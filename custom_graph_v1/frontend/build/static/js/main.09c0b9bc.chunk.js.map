{"version":3,"sources":["Main.jsx","index.tsx"],"names":["CanvasJSChart","CanvasJSReact","CanvasJS","dataPoints","toastr","options","positionClass","hideDuration","timeOut","App","Component","constructor","props","super","this","updateChart","bind","toggleDataSeries","componentDidMount","kwargs","args","y_axis","api","y_max","refresh_sec","graph_height","Streamlit","setFrameHeight","setInterval","e","dataSeries","visible","chart","render","res","axios","post","JSON","parse","data","x_axis","refresh_button","theme_options","fetchGraphData","newSeries","map","axis","y_index","row","index","x","y","timeStamp","length","item","pop","push","legendText","axisX","labelFormatter","dataPoint","value","moment","format","success","error","concat","message","colorSet","dataY","type","xValueFormatString","yValueFormatString","showInLegend","name","addColorSet","backgroundColor","zoomEnabled","title","text","labelFontSize","axisY","suffix","maximum","gridColor","toolTip","shared","contentFormatter","content","formattedXValue","entries","i","entry","color","legend","cursor","verticalAlign","fontSize","fontColor","itemclick","height","React","createElement","style","display","margin","className","onClick","onRef","ref","withStreamlitConnection","ReactDOM","StrictMode","Main","document","getElementById"],"mappings":"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","file":"static/js/main.09c0b9bc.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\nimport CanvasJSReact from \"@canvasjs/react-charts\"\r\nimport moment from \"moment\"\r\n\r\nimport toastr from \"toastr\"\r\nimport \"toastr/build/toastr.min.css\"\r\n\r\nimport axios from \"axios\"\r\n\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\n\r\n\r\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart\r\nvar CanvasJS = CanvasJSReact.CanvasJS\r\nconst dataPoints = [[], [], [], [], [], [], [], [], [], []]\r\n\r\ntoastr.options = {\r\n  positionClass: \"toast-top-full-width\",\r\n  hideDuration: 300,\r\n  timeOut: 3000,\r\n}\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.updateChart = this.updateChart.bind(this)\r\n    this.toggleDataSeries = this.toggleDataSeries.bind(this)\r\n  }\r\n  componentDidMount() {\r\n    const { kwargs } = this.props.args\r\n    const { y_axis, api, y_max, refresh_sec, graph_height } = kwargs\r\n    Streamlit.setFrameHeight()\r\n    this.updateChart()\r\n    if (refresh_sec) setInterval(this.updateChart, refresh_sec * 1000)\r\n  }\r\n  toggleDataSeries(e) {\r\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\r\n      e.dataSeries.visible = false\r\n    } else {\r\n      e.dataSeries.visible = true\r\n    }\r\n    this.chart.render()\r\n  }\r\n  async fetchGraphData() {\r\n    const { kwargs } = this.props.args\r\n    const { y_axis, api, y_max, refresh_sec } = kwargs\r\n    const res = await axios.post(api, { ...kwargs })\r\n    return JSON.parse(res.data)\r\n  }\r\n  async updateChart() {\r\n    const { kwargs } = this.props.args\r\n    const { x_axis, y_axis, api, y_max, refresh_sec, refresh_button, theme_options } = kwargs\r\n    try {\r\n      const data = await this.fetchGraphData()\r\n      const newSeries = []\r\n      y_axis.map((axis, y_index) => {\r\n        return (newSeries[y_index] = data.map((row, index) => {\r\n          return {\r\n            x: index, // Use index as x value instead of datetime\r\n            y: row[axis[\"field\"]],\r\n            timeStamp: row[x_axis[\"field\"]] // Store timestamp for each data point\r\n          }\r\n        }))\r\n      })\r\n  \r\n      while (dataPoints[0].length) {\r\n        y_axis.map((item, index) => {\r\n          dataPoints[index].pop()\r\n        })\r\n      }\r\n  \r\n      y_axis.map((item, index) => {\r\n        dataPoints[index].push(...newSeries[index])\r\n        this.chart.options.data[index].legendText =\r\n          item[\"name\"] + newSeries[index].pop().y\r\n      })\r\n  \r\n      // Update x-axis label formatter to display actual timestamps\r\n      this.chart.options.axisX.labelFormatter = function (e) {\r\n        const dataPoint = dataPoints[0][e.value];\r\n        return moment(dataPoint.timeStamp).format(\"MM/DD/YY hh\");\r\n      };\r\n  \r\n      this.chart.render()\r\n      refresh_button && !refresh_sec && toastr.success(`Success!`)\r\n    } catch (error) {\r\n      refresh_button &&\r\n        !refresh_sec &&\r\n        toastr.error(`Fetch Error: ${error.message}`)\r\n    }\r\n  }\r\n  render() {\r\n    const colorSet = []\r\n    const { kwargs } = this.props.args\r\n    const { y_axis, api, y_max, refresh_sec, theme_options, refresh_button } =\r\n      kwargs\r\n    const dataY = y_axis.map((item, index) => {\r\n      colorSet.push(item[\"color\"])\r\n      return {\r\n        type: \"spline\",\r\n        xValueFormatString: \"#.##0 \",\r\n        yValueFormatString: \"#.##0\",\r\n        showInLegend: theme_options[\"showInLegend\"],\r\n        name: item[\"name\"],\r\n        dataPoints: dataPoints[index],\r\n        // lineColor: item['color'] ? item['color'] : ''\r\n      }\r\n    })\r\n    CanvasJS.addColorSet(\"greenShades\", colorSet)\r\n    const options = {\r\n      colorSet: \"greenShades\",\r\n      backgroundColor: theme_options[\"backgroundColor\"]\r\n        ? theme_options[\"backgroundColor\"]\r\n        : \"white\",\r\n      zoomEnabled: true,\r\n      title: {\r\n        text: theme_options[\"main_title\"] ? theme_options[\"main_title\"] : \"\",\r\n      },\r\n      axisX: {\r\n        title: theme_options[\"x_axis_title\"]\r\n          ? theme_options[\"x_axis_title\"]\r\n          : \"\",\r\n        labelFormatter: (e) => moment(e.value).format(\"MM/DD/YY hh\"),\r\n        labelFontSize: 12,\r\n      },\r\n      axisY: {\r\n        suffix: \"\",\r\n        maximum: y_max ? y_max : null,\r\n        gridColor: theme_options[\"grid_color\"]\r\n          ? theme_options[\"grid_color\"]\r\n          : \"\",\r\n      },\r\n      toolTip: {\r\n        shared: true,\r\n        contentFormatter: function (e) {\r\n          let content = \"\";\r\n    \r\n          // Format the x-axis time and add it to the tooltip content\r\n          const formattedXValue = moment(e.entries[0].dataPoint.timeStamp).format(\"MM/DD/YY HH:mm\");\r\n          content += `<strong>Date</strong>: ${formattedXValue}<br/>`;\r\n    \r\n          // Loop through other data points (excluding the x-axis time) and add them to the tooltip content\r\n          for (let i = 1; i < e.entries.length; i++) {\r\n            const entry = e.entries[i];\r\n            const dataSeries = entry.dataSeries;\r\n            const dataPoint = entry.dataPoint;\r\n            const color = dataSeries.color ? dataSeries.color : dataSeries.options.color;\r\n            content += `<strong style=\"color: ${color}\">${dataSeries.name}</strong>: ${dataPoint.y}<br/>`;\r\n          }\r\n    \r\n          return content;\r\n        }\r\n      },\r\n      legend: {\r\n        cursor: \"pointer\",\r\n        verticalAlign: \"top\",\r\n        fontSize: 18,\r\n        fontColor: \"dimGrey\",\r\n        itemclick: this.toggleDataSeries,\r\n      },\r\n      data: dataY,\r\n      height: kwargs.graph_height ? kwargs.graph_height : 400,\r\n    }\r\n    return (\r\n      <div>\r\n        {refresh_button && !refresh_sec && (\r\n          <div style={{ display: \"flex\" }}>\r\n            <div style={{ margin: \"10px 10px 10px 2px\" }}>\r\n              <button className=\"btn btn-warning\" onClick={this.updateChart}>\r\n                Refresh\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <CanvasJSChart options={options} onRef={(ref) => (this.chart = ref)} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStreamlitConnection(App)\r\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Main from \"./Main\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}