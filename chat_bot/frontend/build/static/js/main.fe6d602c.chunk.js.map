{"version":3,"sources":["ChatBot.js","App.js","index.js"],"names":["i","withStreamlitConnection","props","configuration","Configuration","apiKey","args","api_key","openai","OpenAIApi","useState","text","setText","user","Message","chatting","setChatting","doStuff","txt","object","model","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","prompt","createCompletion","response","prearr","data","choices","useEffect","Streamlit","setFrameHeight","chat_btn","$","chat_box","click","toggleClass","setTimeout","id","className","map","item","type","placeholder","value","onChange","event","target","onKeyPress","key","username","rootElement","document","getElementById","ReactDOM","render"],"mappings":";4TACA,kmGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAKA,IAsFeC,eAtFC,SAACC,GACf,IAAMC,EAAgB,IAAIC,gBAAc,CACtCC,OAAQH,EAAMI,KAAKC,UAEfC,EAAS,IAAIC,YAAUN,GAE7B,EAAwBO,mBAAS,IAAG,mBAA7BC,EAAI,KAAEC,EAAO,KACpB,EAAgCF,mBAAS,CACvC,CAAEG,KAAM,MAAOC,QAAS,4CACxB,mBAFKC,EAAQ,KAAEC,EAAW,KAGtBC,EAAO,uCAAG,WAAOC,GAAG,yEASvB,OARGC,EAAS,CACXC,MAAO,mBACPC,YAAa,EACbC,WAAY,IACZC,MAAO,EACPC,kBAAmB,EACnBC,iBAAkB,EAClBC,OAAQR,GACT,SAEsBV,EAAOmB,iBAAiBR,GAAO,OAAhDS,EAAQ,OACdZ,GAAY,SAACa,GAAM,4BACdA,GAAM,CACT,CAAEhB,KAAM,MAAOC,QAASc,EAASE,KAAKC,QAAQ,GAAGpB,WACjD,2CACH,gBAhBY,sCAkBbqB,qBAAU,WACRC,IAAUC,oBAEZ,IAAMC,EAAWC,IAAE,mBACbC,EAAWD,IAAE,wBAenB,OAbAD,EAASG,OAAM,WACbH,EAASI,YAAY,YACrBC,YAAW,WACTH,EAASE,YAAY,cACpB,QAUH,yBAAKE,GAAG,YACN,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,aAAY,YAC3B,yBAAKA,UAAU,YAGZ3B,EAAS4B,KAAI,SAACC,GAAI,OACjB,yBAAKF,UAAS,UAAmB,QAAdE,EAAK/B,KAAiB,eAAiB,kBACxD,yBAAK6B,UAAU,UAAUE,EAAK9B,cAIpC,yBAAK4B,UAAU,aACb,2BACEG,KAAK,OACLH,UAAU,SACVI,YAAY,eACZC,MAAOpC,EACPqC,SAAU,SAACC,GAAK,OAAKrC,EAAQqC,EAAMC,OAAOH,QAC1CI,WAAY,SAACF,GAAK,MAAmB,UAAdA,EAAMG,MAzBrCpC,GAAY,SAACa,GAAM,4BAASA,GAAM,CAAE,CAAEhB,KAAM,OAAQC,QAASH,QAC7DM,EAAQN,QACRC,EAAQ,QA0BF,0BAAM8B,UAAU,QACd,uBAAGA,UAAU,+BAInB,yBAAKA,UAAU,QACb,yBAAKA,UAAU,QACb,uBAAGA,UAAU,6BACZxC,EAAMI,KAAK+C,UAEd,uBAAGX,UAAU,oBCxENzC,eAPH,SAACC,GACX,OACE,kBAAC,EAAO,SCJNoD,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAAC,EAAG,MAAKJ,K","file":"static/js/main.fe6d602c.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\"\nimport \"./ChatBot.css\"\nimport { Configuration, OpenAIApi } from \"openai\"\nimport $ from \"jquery\"\n\nconst Chatbot = (props) => {\n  const configuration = new Configuration({\n    apiKey: props.args.api_key,\n  })\n  const openai = new OpenAIApi(configuration)\n\n  const [text, setText] = useState(\"\")\n  const [chatting, setChatting] = useState([\n    { user: \"BOT\", Message: \"Hello, I am a bot, How can I help you.\" },\n  ])\n  const doStuff = async (txt) => {\n    let object = {\n      model: \"text-davinci-003\",\n      temperature: 0,\n      max_tokens: 100,\n      top_p: 1,\n      frequency_penalty: 0.0,\n      presence_penalty: 0.0,\n      prompt: txt,\n    }\n\n    const response = await openai.createCompletion(object)\n    setChatting((prearr) => [\n      ...prearr,\n      { user: \"BOT\", Message: response.data.choices[0].text },\n    ])\n  }\n\n  useEffect(() => {\n    Streamlit.setFrameHeight()\n  })\n  const chat_btn = $(\"#chat-bot .icon\")\n  const chat_box = $(\"#chat-bot .messenger\")\n\n  chat_btn.click(() => {\n    chat_btn.toggleClass(\"expanded\")\n    setTimeout(() => {\n      chat_box.toggleClass(\"expanded\")\n    }, 100)\n  })\n\n  function handleEnter(e) {\n    setChatting((prearr) => [...prearr, { user: \"USER\", Message: text }])\n    doStuff(text)\n    setText(\"\")\n  }\n\n  return (\n    <div id=\"chat-bot\">\n      <div className=\"messenger br10\">\n        <div className=\"timestamp\">04:45 AM</div>\n        <div className=\"chatroom\">\n          {/* <!-- msgs  --> */}\n\n          {chatting.map((item) => (\n            <div className={`${item.user === \"BOT\" ? \"msg msg-left\" : \"msg msg-right\"}`}>\n              <div className=\"bubble\">{item.Message}</div>\n            </div>\n          ))}\n        </div>\n        <div className=\"type-area\">\n          <input\n            type=\"text\"\n            className=\"typing\"\n            placeholder=\"Type Here...\"\n            value={text}\n            onChange={(event) => setText(event.target.value)}\n            onKeyPress={(event) => event.key === \"Enter\" && handleEnter()}\n          />\n\n          <span className=\"send\">\n            <i className=\"bi bi-arrow-return-left\"></i>\n          </span>\n        </div>\n      </div>\n      <div className=\"icon\">\n        <div className=\"user\">\n          <i className=\"bi bi-person-circle me-2\"></i>\n          {props.args.username}\n        </div>\n        <i className=\"bi bi-x-lg\"></i>\n      </div>\n    </div>\n  )\n}\n\nexport default withStreamlitConnection(Chatbot)\n","import {\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React from \"react\"\nimport Chatbot from \"./ChatBot\"\n\n\nconst App = (props) => {\n  return (\n    <Chatbot />\n  )\n}\n\n\nexport default withStreamlitConnection(App)\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}