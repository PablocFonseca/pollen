{"version":3,"sources":["Dictaphone.jsx","VoiceGPT.jsx","Main.tsx","index.tsx"],"names":["Dictaphone","_ref","commands","_useState","useState","_useState2","_slicedToArray","transcribing","_useState3","_useState4","clearTranscriptOnListen","_useSpeechRecognition","useSpeechRecognition","transcript","interimTranscript","finalTranscript","listening","resetTranscript","browserSupportsSpeechRecognition","isMicrophoneAvailable","useEffect","React","createElement","style","display","flexDirection","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","timer","CustomVoiceGPT","props","api","_props$kwargs","kwargs","self_image","imageSrc","setImageSrc","message","setMessage","_useState5","_useState6","answers","setAnswers","useMemo","map","command","callback","ret","myFunc","_ref2","_asyncToGenerator","_callee2","body","_yield$axios$post","data","_context2","console","log","concat","api_key","text","axios","post","audio_path","Audio","play","t0","apply","arguments","clearTimeout","setTimeout","matchInterim","Streamlit","setFrameHeight","Fragment","src","height","onClick","SpeechRecognition","startListening","continuous","language","answer","idx","user","resp","withStreamlitConnection","_props$args","args","VoiceGPT","engine","Styletron","ReactDOM","render","StrictMode","StyletronProvider","ThemeProvider","theme","LightTheme","Main","document","getElementById"],"mappings":"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","file":"static/js/main.62fe5c74.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { useSpeechRecognition } from \"react-speech-recognition\"\n\nconst Dictaphone = ({ commands }) => {\n  const [transcribing, setTranscribing] = useState(true)\n  const [clearTranscriptOnListen, setClearTranscriptOnListen] = useState(true)\n  const toggleTranscribing = () => setTranscribing(!transcribing)\n  const toggleClearTranscriptOnListen = () =>\n    setClearTranscriptOnListen(!clearTranscriptOnListen)\n  const {\n    transcript,\n    interimTranscript,\n    finalTranscript,\n    resetTranscript,\n    listening,\n    browserSupportsSpeechRecognition,\n    isMicrophoneAvailable,\n  } = useSpeechRecognition({ transcribing, clearTranscriptOnListen, commands })\n  useEffect(() => {\n    if (interimTranscript !== \"\") {\n      // console.log(\"Got interim result:\", interimTranscript)\n    }\n    if (finalTranscript !== \"\") {\n      // console.log(\"Got final result:\", finalTranscript)\n    }\n  }, [interimTranscript, finalTranscript])\n\n  if (!browserSupportsSpeechRecognition) {\n    return <span>No browser support</span>\n  }\n\n  if (!isMicrophoneAvailable) {\n    return <span>Please allow access to the microphone</span>\n  }\n\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n      <span>All you said: {transcript}</span>\n      <span>listening: {listening ? \"on\" : \"off\"}</span>\n      {/* <span>transcribing: {transcribing ? \"on\" : \"off\"}</span> */}\n      {/* <span>\n        clearTranscriptOnListen: {clearTranscriptOnListen ? \"on\" : \"off\"}\n      </span> */}\n      {/* <button onClick={resetTranscript}>Reset</button>\n      <button onClick={toggleTranscribing}>Toggle transcribing</button> */}\n      {/* <button onClick={toggleClearTranscriptOnListen}>\n        Toggle clearTranscriptOnListen\n      </button> */}\n    </div>\n  )\n}\n\nexport default Dictaphone\n","import React, { useState, useEffect, FC, memo, useMemo } from \"react\"\nimport axios from \"axios\"\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\"\nimport Dictaphone from \"./Dictaphone\"\n\nconst imageUrls = {\n  hoots: \"/hoots.png\",\n  hootsAndHootie: \"/hootsAndhootie.png\",\n}\n\nlet timer = null\n\nconst CustomVoiceGPT = (props) => {\n  const { api, kwargs = {} } = props\n  const [imageSrc, setImageSrc] = useState(kwargs.self_image)\n  const [message, setMessage] = useState(\"\")\n  const [answers, setAnswers] = useState([])\n\n  const testFunc = async () => {\n    const audio = new Audio(\"./test_audio.mp3s\")\n    console.log(audio.play())\n    const response = await axios.post(\n      \"http://192.168.143.97:8000/api/data/voiceGPT\",\n      {\n        api_key: \"sdf\",\n        text: \"text\",\n        self_image: \"something\",\n      }\n    )\n    console.log(\"response :>> \", response)\n  }\n\n  const commands = useMemo(() => {\n    return kwargs[\"commands\"].map((command) => ({\n      command: command[\"keywords\"],\n      callback: (ret) => {\n        const myFunc = async () => {\n          console.log(\"ret :>> \", ret)\n          setMessage(` (${command[\"api_body\"][\"keyword\"]}) ${ret},`)\n          try {\n            console.log(\"api call on listen...\", command)\n            const body = {\n              api_key: \"api_key\",\n              text: command[\"api_body\"][\"keyword\"] + ret,\n              self_image: imageSrc,\n            }\n            const { data } = await axios.post(api, body)\n            console.log(\"data :>> \", data)\n            data.self_image && setImageSrc(data.self_image)\n            setAnswers(data.text)\n            if (data.audio_path) {\n              const audio = new Audio(data.audio_path)\n              audio.play()\n            }\n          } catch (error) {\n            // console.log(\"api call on listen failded!\")\n          }\n        }\n        timer && clearTimeout(timer)\n        timer = setTimeout(myFunc, 1000)\n      },\n      matchInterim: true,\n    }))\n  }, [kwargs.commands])\n  // const commands = [\n  //   {\n  //     command: \"I would like to order *\",\n  //     callback: (food) => setMessage(`Your order is for: ${food}`),\n  //     matchInterim: true,\n  //   },\n  //   {\n  //     command: \"The weather is :condition today\",\n  //     callback: (condition) => setMessage(`Today, the weather is ${condition}`),\n  //   },\n  //   {\n  //     command: [\"Hey foots\", \"Hey foods\"],\n  //     callback: ({ command }) => setMessage(`Hi there! You said: \"${command}\"`),\n  //     matchInterim: true,\n  //   },\n  //   {\n  //     command: \"Beijing\",\n  //     callback: (command, spokenPhrase, similarityRatio) =>\n  //       setMessage(\n  //         `${command} and ${spokenPhrase} are ${similarityRatio * 100}% similar`\n  //       ),\n  //     // If the spokenPhrase is \"Benji\", the message would be \"Beijing and Benji are 40% similar\"\n  //     isFuzzyMatch: true,\n  //     fuzzyMatchingThreshold: 0.2,\n  //   },\n  //   {\n  //     command: [\"eat\", \"sleep\", \"leave\"],\n  //     callback: (command) => setMessage(`Best matching command: ${command}`),\n  //     isFuzzyMatch: true,\n  //     fuzzyMatchingThreshold: 0.2,\n  //     bestMatchOnly: true,\n  //   },\n  //   {\n  //     command: \"clear\",\n  //     callback: ({ resetTranscript }) => resetTranscript(),\n  //     matchInterim: true,\n  //   },\n  // ]\n\n  const listenContinuously = () =>\n    SpeechRecognition.startListening({\n      continuous: true,\n      language: \"en-GB\",\n    })\n  const listenContinuouslyInChinese = () =>\n    SpeechRecognition.startListening({\n      continuous: true,\n      language: \"zh-CN\",\n    })\n  const listenOnce = () =>\n    SpeechRecognition.startListening({ continuous: false })\n\n  useEffect(() => Streamlit.setFrameHeight())\n\n  useEffect(() => {}, [props])\n\n  return (\n    <>\n      <div>\n        <img src={imageSrc} height={100} />\n        <Dictaphone commands={commands} />\n        <button onClick={listenContinuously}>Listen continuously</button>\n        <div> You: {message}</div>\n        {answers.map((answer, idx) => (\n          <div key={idx}>\n            <div>-user: {answer.user}</div>\n            <div>-resp: {answer.resp}</div>\n          </div>\n        ))}\n      </div>\n      <div>\n        {/* <button onClick={listenOnce}>Listen Once</button> */}\n        {/* <button onClick={listenContinuouslyInChinese}></button> */}\n        {/* <button onClick={SpeechRecognition.stopListening}>Stop</button> */}\n        {/* <button onClick={testFunc}>test</button> */}\n      </div>\n    </>\n  )\n}\n\nexport default CustomVoiceGPT\n","import React, { useEffect, useState } from \"react\"\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport VoiceGPT from \"./VoiceGPT.jsx\"\n\nconst Main = (props: ComponentProps) => {\n  const { api, kwargs } = props.args\n  useEffect(() => Streamlit.setFrameHeight())\n  return (\n    <>\n      <VoiceGPT api={api} kwargs={kwargs} />\n    </>\n  )\n}\n\nexport default withStreamlitConnection(Main)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Main from \"./Main\"\n// Lots of import to define a Styletron engine and load the light theme of baseui\nimport { Client as Styletron } from \"styletron-engine-atomic\"\nimport { Provider as StyletronProvider } from \"styletron-react\"\nimport { ThemeProvider, LightTheme } from \"baseui\"\n\nconst engine = new Styletron()\n\n// Wrap your CustomSlider with the baseui them\nReactDOM.render(\n  <React.StrictMode>\n    <StyletronProvider value={engine}>\n      <ThemeProvider theme={LightTheme}>\n        <Main />\n      </ThemeProvider>\n    </StyletronProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}