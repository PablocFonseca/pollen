{"version":3,"sources":["Dictaphone.jsx","VoiceGPT.jsx","Main.tsx","index.tsx"],"names":["Dictaphone","_ref","commands","_useState","useState","_useState2","_slicedToArray","transcribing","setTranscribing","_useState3","_useState4","clearTranscriptOnListen","setClearTranscriptOnListen","_useSpeechRecognition","useSpeechRecognition","transcript","interimTranscript","finalTranscript","resetTranscript","listening","browserSupportsSpeechRecognition","isMicrophoneAvailable","useEffect","console","log","React","createElement","style","display","flexDirection","onClick","imageUrls","CustomVoiceGPT","props","api","kwargs","imageSrc","setMessage","command","callback","food","concat","matchInterim","condition","spokenPhrase","similarityRatio","isFuzzyMatch","fuzzyMatchingThreshold","bestMatchOnly","_ref2","Streamlit","setFrameHeight","Fragment","src","height","withStreamlitConnection","_props$args","args","VoiceGPT","engine","Styletron","ReactDOM","render","StrictMode","StyletronProvider","value","ThemeProvider","theme","LightTheme","Main","document","getElementById"],"mappings":"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","file":"static/js/main.6968453a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { useSpeechRecognition } from \"react-speech-recognition\"\n\nconst Dictaphone = ({ commands }) => {\n  const [transcribing, setTranscribing] = useState(true)\n  const [clearTranscriptOnListen, setClearTranscriptOnListen] = useState(true)\n  const toggleTranscribing = () => setTranscribing(!transcribing)\n  const toggleClearTranscriptOnListen = () =>\n    setClearTranscriptOnListen(!clearTranscriptOnListen)\n  const {\n    transcript,\n    interimTranscript,\n    finalTranscript,\n    resetTranscript,\n    listening,\n    browserSupportsSpeechRecognition,\n    isMicrophoneAvailable,\n  } = useSpeechRecognition({ transcribing, clearTranscriptOnListen, commands })\n  useEffect(() => {\n    if (interimTranscript !== \"\") {\n      console.log(\"Got interim result:\", interimTranscript)\n    }\n    if (finalTranscript !== \"\") {\n      console.log(\"Got final result:\", finalTranscript)\n    }\n  }, [interimTranscript, finalTranscript])\n\n  if (!browserSupportsSpeechRecognition) {\n    return <span>No browser support</span>\n  }\n\n  if (!isMicrophoneAvailable) {\n    return <span>Please allow access to the microphone</span>\n  }\n\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n      <span>listening: {listening ? \"on\" : \"off\"}</span>\n      <span>transcribing: {transcribing ? \"on\" : \"off\"}</span>\n      <span>\n        clearTranscriptOnListen: {clearTranscriptOnListen ? \"on\" : \"off\"}\n      </span>\n      <button onClick={resetTranscript}>Reset</button>\n      <button onClick={toggleTranscribing}>Toggle transcribing</button>\n      <button onClick={toggleClearTranscriptOnListen}>\n        Toggle clearTranscriptOnListen\n      </button>\n      <span>{transcript}</span>\n    </div>\n  )\n}\n\nexport default Dictaphone\n","import React, { useState, useEffect, FC } from \"react\"\nimport axios from \"axios\"\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\"\nimport Dictaphone from \"./Dictaphone\"\n\nconst imageUrls = {\n  hoots: \"/hoots.png\",\n  hootsAndHootie: \"/hootsAndhootie.png\",\n}\n\nconst CustomVoiceGPT = (props) => {\n  const { api, kwargs = {} } = props\n  const [imageSrc, setImageSrc] = useState(imageUrls.hoots)\n  const [message, setMessage] = useState(\"\")\n  const commands = [\n    {\n      command: \"I would like to order *\",\n      callback: (food) => setMessage(`Your order is for: ${food}`),\n      matchInterim: true,\n    },\n    {\n      command: \"The weather is :condition today\",\n      callback: (condition) => setMessage(`Today, the weather is ${condition}`),\n    },\n    {\n      command: [\"Hello\", \"Hi\"],\n      callback: ({ command }) => setMessage(`Hi there! You said: \"${command}\"`),\n      matchInterim: true,\n    },\n    {\n      command: \"Beijing\",\n      callback: (command, spokenPhrase, similarityRatio) =>\n        setMessage(\n          `${command} and ${spokenPhrase} are ${similarityRatio * 100}% similar`\n        ),\n      // If the spokenPhrase is \"Benji\", the message would be \"Beijing and Benji are 40% similar\"\n      isFuzzyMatch: true,\n      fuzzyMatchingThreshold: 0.2,\n    },\n    {\n      command: [\"eat\", \"sleep\", \"leave\"],\n      callback: (command) => setMessage(`Best matching command: ${command}`),\n      isFuzzyMatch: true,\n      fuzzyMatchingThreshold: 0.2,\n      bestMatchOnly: true,\n    },\n    {\n      command: \"clear\",\n      callback: ({ resetTranscript }) => resetTranscript(),\n      matchInterim: true,\n    },\n  ]\n\n  useEffect(() => Streamlit.setFrameHeight())\n\n  useEffect(() => {}, [props])\n\n  return (\n    <>\n      <span>\n        <img src={imageSrc} height={100} />\n        <Dictaphone commands={commands} />\n      </span>\n    </>\n  )\n}\n\nexport default CustomVoiceGPT\n","import React, { useEffect, useState } from \"react\"\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport VoiceGPT from \"./VoiceGPT.jsx\"\n\nconst Main = (props: ComponentProps) => {\n  const { api, kwargs } = props.args\n  useEffect(() => Streamlit.setFrameHeight())\n  return (\n    <>\n      <VoiceGPT api={api} kwargs={kwargs} />\n    </>\n  )\n}\n\nexport default withStreamlitConnection(Main)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Main from \"./Main\"\n// Lots of import to define a Styletron engine and load the light theme of baseui\nimport { Client as Styletron } from \"styletron-engine-atomic\"\nimport { Provider as StyletronProvider } from \"styletron-react\"\nimport { ThemeProvider, LightTheme } from \"baseui\"\n\nconst engine = new Styletron()\n\n// Wrap your CustomSlider with the baseui them\nReactDOM.render(\n  <React.StrictMode>\n    <StyletronProvider value={engine}>\n      <ThemeProvider theme={LightTheme}>\n        <Main />\n      </ThemeProvider>\n    </StyletronProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}