{"version":3,"sources":["Main.jsx","index.tsx"],"names":["_seed","Math","random","data","baseval","count","yrange","i","x","y","floor","max","min","push","getDayWiseTimeSeries","Date","getTime","withStreamlitConnection","props","kwargs","args","useState","series","setSeries","options","setOptions","useEffect","Streamlit","setFrameHeight","getGraphData","a","console","log","axios","post","res","JSON","parse","interval","setInterval","dfData","serie1","map","row","close","serie2","vwap","ApexCharts","exec","name","categories","timestamp_est","new_serires","new_option","chart","height","type","zoom","enabled","dataLabels","stroke","width","curve","dashArray","title","text","align","legend","tooltipHoverFormatter","val","opts","w","globals","seriesIndex","dataPointIndex","markers","size","hover","sizeOffset","xaxis","tooltip","grid","borderColor","onLoad","clearInterval","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wSAUIA,EAAQ,GACZC,KAAKC,OAAS,WAEZ,QADAF,EAAgB,MAARA,EAAgB,YACR,GAAK,YAGvB,IACIG,EAAO,IAGX,SAA8BC,EAASC,EAAOC,GAE5C,IADA,IAAIC,EAAI,EACDA,EAAIF,GAAO,CAChB,IAAIG,EAAIJ,EACJK,EAAIR,KAAKS,MAAMT,KAAKC,UAAYI,EAAOK,IAAML,EAAOM,IAAM,IAAMN,EAAOM,IAE3ET,EAAKU,KAAK,CACRL,IAAGC,MAEML,EACXA,GAZe,MAafG,KAIJO,CAAqB,IAAIC,KAAK,mBAAmBC,UAAW,GAAI,CAC9DJ,IAAK,GACLD,IAAK,KAwBP,IAwIeM,eAxIF,SAACC,GAAW,IAEfC,EAAWD,EAAME,KAAjBD,OAFc,EAGME,mBAAS,IAHf,mBAGfC,EAHe,KAGPC,EAHO,OAIQF,mBAAS,IAJjB,mBAIfG,EAJe,KAINC,EAJM,KAOtBC,qBAAU,kBAAMC,IAAUC,oBAC1B,IAAMC,EAAY,uCAAG,4BAAAC,EAAA,6DACjBC,QAAQC,IAAI,gBAAiBb,GADZ,SAECc,IAAMC,KAAK,8CAAX,eACff,IAHc,cAEXgB,EAFW,yBAKZC,KAAKC,MAAMF,EAAIhC,OALH,2CAAH,qDAsHlB,OA9GAuB,qBAAU,WACR,IAAMY,EAAWC,YAAW,sBAAC,gCAAAT,EAAA,sEACND,IADM,OACrBW,EADqB,OAErBC,EAASD,EAAOE,KAAI,SAACC,GAAD,OAASA,EAAIC,SACjCC,EAASL,EAAOE,KAAI,SAACC,GAAD,OAASA,EAAIG,QACvCC,IAAWC,KAAK,WAAY,eAAgB,CAAC,CAC3CC,KAAM,mBACN9C,KAAMsC,GAER,CACEQ,KAAM,aACN9C,KAAM0C,KAVmB,2CAa1B,KA2FH,OA1FY,uCAAG,sCAAAf,EAAA,sEACQD,IADR,OACPW,EADO,OAEPU,EAAaV,EAAOE,KAAI,SAACC,GAAD,OAAUA,EAAIQ,iBACtCV,EAASD,EAAOE,KAAI,SAACC,GAAD,OAASA,EAAIC,SACjCC,EAASL,EAAOE,KAAI,SAACC,GAAD,OAASA,EAAIG,QACjCM,EAAc,CAAC,CACnBH,KAAM,QACN9C,KAAMsC,GACL,CACDQ,KAAM,OACN9C,KAAM0C,IAEFQ,EAAa,CACjB/B,OAAQ,CAAC,CACP2B,KAAM,mBACN9C,KAAMsC,GAER,CACEQ,KAAM,aACN9C,KAAM0C,IAGRS,MAAO,CACLC,OAAQ,IACRC,KAAM,OACNC,KAAM,CACJC,SAAS,IAGbC,WAAY,CACVD,SAAS,GAEXE,OAAQ,CACNC,MAAO,CAAC,EAAG,EAAG,GACdC,MAAO,WACPC,UAAW,CAAC,EAAG,EAAG,IAEpBC,MAAO,CACLC,KAAM,kBACNC,MAAO,QAETC,OAAQ,CACNC,sBAAuB,SAAUC,EAAKC,GACpC,OAAOD,EAAM,MAAQC,EAAKC,EAAEC,QAAQlD,OAAOgD,EAAKG,aAAaH,EAAKI,kBAGtEC,QAAS,CACPC,KAAM,EACNC,MAAO,CACLC,WAAY,IAGhBC,MAAO,CACLvB,KAAM,WACNN,WAAYA,GAEd8B,QAAS,GAyBTC,KAAM,CACJC,YAAa,YAGjBnD,QAAQC,IAAI,SAAUqB,GACtB5B,EAAW4B,GACX9B,EAAU6B,GAvFG,4CAAH,oDAyFZ+B,GACO,WACLC,cAAc9C,MAEf,IAGD,6BACE,yBAAK+C,GAAG,SACN,kBAAC,IAAD,CAAiB7D,QAASA,EAASF,OAAQA,EAAQkC,KAAK,OAAOD,OAAQ,OAEzE,yBAAK8B,GAAG,kBC5LdC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.6e011bce.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport ReactApexCharts from 'react-apexcharts'\r\nimport ApexCharts from 'apexcharts'\r\nimport axios from \"axios\";\r\n\r\nvar _seed = 42;\r\nMath.random = function () {\r\n  _seed = _seed * 16807 % 2147483647;\r\n  return (_seed - 1) / 2147483646;\r\n};\r\n\r\nvar lastDate = 0;\r\nvar data = [];\r\nvar TICKINTERVAL = 86400000\r\nlet XAXISRANGE = 777600000\r\nfunction getDayWiseTimeSeries(baseval, count, yrange) {\r\n  var i = 0;\r\n  while (i < count) {\r\n    var x = baseval;\r\n    var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\r\n\r\n    data.push({\r\n      x, y\r\n    });\r\n    lastDate = baseval\r\n    baseval += TICKINTERVAL;\r\n    i++;\r\n  }\r\n}\r\n\r\ngetDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 10, {\r\n  min: 10,\r\n  max: 90\r\n})\r\n\r\nfunction getNewSeries(baseval, yrange) {\r\n  var newDate = baseval + TICKINTERVAL;\r\n  lastDate = newDate\r\n\r\n  for (var i = 0; i < data.length - 10; i++) {\r\n    // IMPORTANT\r\n    // we reset the x and y of the data which is out of drawing area\r\n    // to prevent memory leaks\r\n    data[i].x = newDate - XAXISRANGE - TICKINTERVAL\r\n    data[i].y = 0\r\n  }\r\n\r\n  data.push({\r\n    x: newDate,\r\n    y: Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min\r\n  })\r\n  // console.log('getNewSeries', data);\r\n}\r\n\r\n\r\n\r\nconst Main = (props) => {\r\n\r\n  const { kwargs } = props.args;\r\n  const [series, setSeries] = useState([]);\r\n  const [options, setOptions] = useState({});\r\n\r\n\r\n  useEffect(() => Streamlit.setFrameHeight())\r\n  const getGraphData = async () => {\r\n      console.log(\"SSSSSSSSSSSSS\", kwargs);\r\n      const res = await axios.post(\"http://localhost:8000/api/data/symbol_graph\", {\r\n      ...kwargs\r\n    });\r\n    return JSON.parse(res.data);\r\n    console.log(\"postres\", res.data);\r\n  }\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      const dfData = await getGraphData();\r\n      const serie1 = dfData.map((row) => row.close);\r\n      const serie2 = dfData.map((row) => row.vwap);\r\n      ApexCharts.exec('realtime', 'updateSeries', [{\r\n        name: \"Session Duration\",\r\n        data: serie1\r\n      },\r\n      {\r\n        name: \"Page Views\",\r\n        data: serie2\r\n      },\r\n      ])\r\n    }, 1000);\r\n    const onLoad = async () => {\r\n      const dfData = await getGraphData();\r\n      const categories = dfData.map((row) => (row.timestamp_est));\r\n      const serie1 = dfData.map((row) => row.close);\r\n      const serie2 = dfData.map((row) => row.vwap);\r\n      const new_serires = [{\r\n        name: \"close\",\r\n        data: serie1\r\n      }, {\r\n        name: \"vwap\",\r\n        data: serie2\r\n      },]\r\n      const new_option = {\r\n        series: [{\r\n          name: \"Session Duration\",\r\n          data: serie1\r\n        },\r\n        {\r\n          name: \"Page Views\",\r\n          data: serie2\r\n        },\r\n        ],\r\n        chart: {\r\n          height: 350,\r\n          type: 'line',\r\n          zoom: {\r\n            enabled: false\r\n          },\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        stroke: {\r\n          width: [5, 7, 5],\r\n          curve: 'straight',\r\n          dashArray: [0, 8, 5]\r\n        },\r\n        title: {\r\n          text: 'Page Statistics',\r\n          align: 'left'\r\n        },\r\n        legend: {\r\n          tooltipHoverFormatter: function (val, opts) {\r\n            return val + ' - ' + opts.w.globals.series[opts.seriesIndex][opts.dataPointIndex] + ''\r\n          }\r\n        },\r\n        markers: {\r\n          size: 0,\r\n          hover: {\r\n            sizeOffset: 6\r\n          }\r\n        },\r\n        xaxis: {\r\n          type: 'datetime',\r\n          categories: categories\r\n        },\r\n        tooltip: {\r\n          // y: [\r\n          //   {\r\n          //     title: {\r\n          //       formatter: function (val) {\r\n          //         return val + \" (mins)\"\r\n          //       }\r\n          //     }\r\n          //   },\r\n          //   {\r\n          //     title: {\r\n          //       formatter: function (val) {\r\n          //         return val + \" per session\"\r\n          //       }\r\n          //     }\r\n          //   },\r\n          //   {\r\n          //     title: {\r\n          //       formatter: function (val) {\r\n          //         return val;\r\n          //       }\r\n          //     }\r\n          //   }\r\n          // ]\r\n        },\r\n        grid: {\r\n          borderColor: '#f1f1f1',\r\n        }\r\n      };\r\n      console.log(\"onload\", new_option);\r\n      setOptions(new_option);\r\n      setSeries(new_serires)\r\n    }\r\n    onLoad()\r\n    return () => {\r\n      clearInterval(interval);\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"chart\">\r\n        <ReactApexCharts options={options} series={series} type=\"line\" height={350} />\r\n      </div>\r\n      <div id=\"html-dist\"></div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default withStreamlitConnection(Main);\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport Main from \"./Main\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Main />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}