{"version":3,"sources":["Main.jsx","index.tsx"],"names":["_seed","Math","random","data","baseval","count","yrange","i","x","y","floor","max","min","push","getDayWiseTimeSeries","Date","getTime","withStreamlitConnection","props","kwargs","args","y_axis","useState","series","setSeries","options","setOptions","useEffect","Streamlit","setFrameHeight","getGraphData","console","log","axios","post","res","JSON","parse","onLoad","dfData","categories","map","row","timestamp_est","close","vwap","new_serires","line","name","slice","colors","new_option","chart","height","type","zoom","enabled","dataLabels","stroke","width","curve","dashArray","title","text","align","legend","tooltipHoverFormatter","val","opts","w","globals","seriesIndex","dataPointIndex","markers","size","hover","sizeOffset","xaxis","labels","rotate","formatter","moment","unix","format","style","cssClass","tooltip","grid","borderColor","interval","setInterval","clearInterval","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":";utNAWA,IAAIA,EAAQ,GACZC,KAAKC,OAAS,WAEZ,QADAF,EAAgB,MAARA,EAAgB,YACR,GAAK,YAGvB,IACIG,EAAO,IAGX,SAA8BC,EAASC,EAAOC,GAE5C,IADA,IAAIC,EAAI,EACDA,EAAIF,GAAO,CAChB,IAAIG,EAAIJ,EACJK,EAAIR,KAAKS,MAAMT,KAAKC,UAAYI,EAAOK,IAAML,EAAOM,IAAM,IAAMN,EAAOM,IAE3ET,EAAKU,KAAK,CACRL,IAAGC,MAEML,EACXA,GAZe,MAafG,KAIJO,CAAqB,IAAIC,KAAK,mBAAmBC,UAAW,GAAI,CAC9DJ,IAAK,GACLD,IAAK,KAIP,IAgJeM,eAhJF,SAACC,GAEZ,IAAQC,EAAWD,EAAME,KAAjBD,OACAE,EAAWF,EAAXE,OACR,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAGAC,qBAAU,kBAAMC,IAAUC,oBAC1B,IAAMC,EAAY,uCAAG,2FACnBC,QAAQC,IAAI,gBAAiBb,GADV,SAEDc,IAAMC,KAAK,8CAAX,eACbf,IAHc,cAEbgB,EAFa,yBAKZC,KAAKC,MAAMF,EAAIhC,OALH,2CAAH,qDA6HlB,OArHAwB,qBAAU,WAeR,IAAMW,EAAM,uCAAG,4GACQR,IADR,OACPS,EADO,OAEPC,EAAaD,EAAOE,KAAI,SAACC,GAAD,OAAUA,EAAIC,cAAgB,OAE7CJ,EAAOE,KAAI,SAACC,GAAD,OAASA,EAAIE,SACxBL,EAAOE,KAAI,SAACC,GAAD,OAASA,EAAIG,QACjCC,EAAczB,EAAOoB,KAAI,SAACM,GAC9B,MAAO,CACLC,KAAMD,EAAKC,KACX7C,KAAMoC,EAAOE,KAAI,SAACC,GAAD,OAASA,EAAIK,EAAI,UAAYE,MAAM,OAGlDC,EAAS7B,EAAOoB,KAAI,SAACM,GAAD,OAAUA,EAAI,SAClCI,EAAa,CACjBD,OAAQA,EACR3B,OAAQuB,EACRM,MAAO,CACLC,OAAQ,IACRC,KAAM,OACNC,KAAM,CACJC,SAAS,IAGbC,WAAY,CACVD,SAAS,GAEXE,OAAQ,CACNC,MAAO,CAAC,EAAG,EAAG,GACdC,MAAO,WACPC,UAAW,CAAC,EAAG,EAAG,IAEpBC,MAAO,CACLC,KAAM,GACNC,MAAO,QAETC,OAAQ,CACNC,sBAAuB,SAAUC,EAAKC,GACpC,OAAOD,EAAM,MAAQC,EAAKC,EAAEC,QAAQ/C,OAAO6C,EAAKG,aAAaH,EAAKI,kBAGtEC,QAAS,CACPC,KAAM,EACNC,MAAO,CACLC,WAAY,IAGhBC,MAAO,CACLvB,KAAM,WACNd,WAAYA,EACZsC,OAAQ,CACNC,OAAO,EACPC,UAAW,SAAUb,GACnB,OAAOc,IAAOC,KAAKf,GAAKgB,OAAO,WAEjCC,MAAO,CACLC,SAAU,iBAKhBC,QAAS,GAyBTC,KAAM,CACJC,YAAa,YAGjBzD,QAAQC,IAAI,SAAUmB,GACtBzB,EAAWyB,GACX3B,EAAUsB,GA3FG,4CAAH,qDA6FN2C,EAAWC,aAAY,WAC3BpD,MACC,KAEH,OADAA,IACO,WACLqD,cAAcF,MAEf,IAGD,6BACE,yBAAKG,GAAG,SACN,kBAAC,IAAD,CAAiBnE,QAASA,EAASF,OAAQA,EAAQ+B,KAAK,OAAOD,OAAQ,OAEzE,yBAAKuC,GAAG,kBCjLdC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.3054e48a.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport ReactApexCharts from 'react-apexcharts'\r\nimport ApexCharts from 'apexcharts'\r\nimport axios from \"axios\";\r\nimport moment from 'moment';\r\n\r\nvar _seed = 42;\r\nMath.random = function () {\r\n  _seed = _seed * 16807 % 2147483647;\r\n  return (_seed - 1) / 2147483646;\r\n};\r\n\r\nvar lastDate = 0;\r\nvar data = [];\r\nvar TICKINTERVAL = 86400000\r\nlet XAXISRANGE = 777600000\r\nfunction getDayWiseTimeSeries(baseval, count, yrange) {\r\n  var i = 0;\r\n  while (i < count) {\r\n    var x = baseval;\r\n    var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\r\n\r\n    data.push({\r\n      x, y\r\n    });\r\n    lastDate = baseval\r\n    baseval += TICKINTERVAL;\r\n    i++;\r\n  }\r\n}\r\n\r\ngetDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 10, {\r\n  min: 10,\r\n  max: 90\r\n})\r\n\r\n\r\nconst Main = (props) => {\r\n\r\n  const { kwargs } = props.args;\r\n  const { y_axis } = kwargs;\r\n  const [series, setSeries] = useState([]);\r\n  const [options, setOptions] = useState({});\r\n\r\n\r\n  useEffect(() => Streamlit.setFrameHeight())\r\n  const getGraphData = async () => {\r\n    console.log(\"SSSSSSSSSSSSS\", kwargs);\r\n    const res = await axios.post(\"http://localhost:8000/api/data/symbol_graph\", {\r\n      ...kwargs\r\n    });\r\n    return JSON.parse(res.data);\r\n    console.log(\"postres\", res.data);\r\n  }\r\n  useEffect(() => {\r\n    // const interval = setInterval(async () => {\r\n    //   const dfData = await getGraphData();\r\n    //   const serie1 = dfData.map((row) => row.close);\r\n    //   const serie2 = dfData.map((row) => row.vwap);\r\n    //   ApexCharts.exec('realtime', 'updateSeries', [{\r\n    //     name: \"Session Duration\",\r\n    //     data: serie1\r\n    //   },\r\n    //   {\r\n    //     name: \"Page Views\",\r\n    //     data: serie2\r\n    //   },\r\n    //   ])\r\n    // }, 1000);\r\n    const onLoad = async () => {\r\n      const dfData = await getGraphData();\r\n      const categories = dfData.map((row) => (row.timestamp_est / 1000));\r\n      // const categories = dfData.map((row) =>(row.timestamp_est.toString()));\r\n      const serie1 = dfData.map((row) => row.close);\r\n      const serie2 = dfData.map((row) => row.vwap);\r\n      const new_serires = y_axis.map((line) => {\r\n        return {\r\n          name: line.name,\r\n          data: dfData.map((row) => row[line['field']]).slice(0),\r\n        }\r\n      })\r\n      const colors = y_axis.map((line) => line['color'])\r\n      const new_option = {\r\n        colors: colors,\r\n        series: new_serires,\r\n        chart: {\r\n          height: 350,\r\n          type: 'line',\r\n          zoom: {\r\n            enabled: true\r\n          },\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        stroke: {\r\n          width: [3, 3, 3],\r\n          curve: 'straight',\r\n          dashArray: [0, 0, 0]\r\n        },\r\n        title: {\r\n          text: '',\r\n          align: 'left'\r\n        },\r\n        legend: {\r\n          tooltipHoverFormatter: function (val, opts) {\r\n            return val + ' - ' + opts.w.globals.series[opts.seriesIndex][opts.dataPointIndex] + ''\r\n          }\r\n        },\r\n        markers: {\r\n          size: 0,\r\n          hover: {\r\n            sizeOffset: 6\r\n          }\r\n        },\r\n        xaxis: {\r\n          type: 'category',\r\n          categories: categories,\r\n          labels: {\r\n            rotate:0,\r\n            formatter: function (val) {\r\n              return moment.unix(val).format(' hh:mm');\r\n            },\r\n            style: {\r\n              cssClass: 'xaxis-label',\r\n              // fontSize: '22px',\r\n            }\r\n          },\r\n        },\r\n        tooltip: {\r\n          // y: [\r\n          //   {\r\n          //     title: {\r\n          //       formatter: function (val) {\r\n          //         return val + \" (mins)\"\r\n          //       }\r\n          //     }\r\n          //   },\r\n          //   {\r\n          //     title: {\r\n          //       formatter: function (val) {\r\n          //         return val + \" per session\"\r\n          //       }\r\n          //     }\r\n          //   },\r\n          //   {\r\n          //     title: {\r\n          //       formatter: function (val) {\r\n          //         return val;\r\n          //       }\r\n          //     }\r\n          //   }\r\n          // ]\r\n        },\r\n        grid: {\r\n          borderColor: '#f1f1f1',\r\n        }\r\n      };\r\n      console.log(\"onload\", new_option);\r\n      setOptions(new_option);\r\n      setSeries(new_serires)\r\n    }\r\n    const interval = setInterval(() => {\r\n      onLoad()\r\n    }, 1000);\r\n    onLoad()\r\n    return () => {\r\n      clearInterval(interval);\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"chart\">\r\n        <ReactApexCharts options={options} series={series} type=\"line\" height={350} />\r\n      </div>\r\n      <div id=\"html-dist\"></div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default withStreamlitConnection(Main);\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport Main from \"./Main\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Main />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}