{"version":3,"sources":["Aggrid.tsx","Main.tsx","index.tsx"],"names":["BtnCellRenderer","props","onClick","clicked","value","AgGrid","defaultColumnDefs","field","headerName","width","aggFunc","pinned","cellRenderer","enableCellChangeFlash","resizable","cellRendererParams","a","num","prompt","axios","get","params","username","prod","client_order_id","number_shares","alert","gridRef","useRef","api","refresh_sec","refresh_cutoff_sec","useState","rowData","setRowData","columnDefs","useEffect","Streamlit","setFrameHeight","addIds","array","map","item","idx","fetchAndSetData","fetchData","idAdded","current","applyTransactionAsync","update","res","JSON","parse","data","timeout","interval","setInterval","console","log","setTimeout","clearInterval","error","clearTimeout","useCallback","skipHeader","allColumnIds","columnApi","getColumns","forEach","column","push","getId","autoSizeColumns","sizeColumnsToFit","defaultMinWidth","onGridReady","autoGroupColumnDef","useMemo","minWidth","defaultColDef","sortable","getRowId","sideBar","toolPanels","id","labelDefault","labelKey","iconKey","toolPanel","defaultToolPanel","style","display","flexDirection","height","className","overflow","flexGrow","ref","rowStyle","fontSize","padding","headerHeight","rowHeight","domLayout","animateRows","suppressAggFuncInHeader","withStreamlitConnection","args","gridoption_build","Aggrid","engine","Styletron","ReactDOM","render","StrictMode","theme","LightTheme","document","getElementById"],"mappings":"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","file":"static/js/main.3a443547.chunk.js","sourcesContent":["import React, { useState, useEffect, useMemo, useRef, useCallback, StrictMode } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-enterprise';\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\r\nimport './styles.css';\r\nimport axios from \"axios\"\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport { IOlympicData } from './interfaces';\r\nimport {\r\n  ColDef,\r\n  ColGroupDef,\r\n  ColumnResizedEvent,\r\n  GetRowIdFunc,\r\n  GetRowIdParams,\r\n  Grid,\r\n  GridOptions,\r\n  GridReadyEvent,\r\n  SideBarDef,\r\n  ValueParserParams,\r\n} from 'ag-grid-community';\r\n\r\ntype Props = {\r\n  username: string,\r\n  api: string,\r\n  refresh_sec?: number,\r\n  refresh_cutoff_sec?: number,\r\n  gridoption_build?: any,\r\n  prod?: boolean,\r\n}\r\n\r\nconst BtnCellRenderer = (props: any) => {\r\n  const btnClickedHandler = () => {\r\n    props.clicked(props.value);\r\n  }\r\n\r\n  return (\r\n    <button onClick={btnClickedHandler}>Sell</button>\r\n  )\r\n}\r\n\r\nconst defaultWidth = 100;\r\n\r\n\r\n\r\nlet g_rowdata: any[] = [];\r\n\r\nconst AgGrid = (props: Props) => {\r\n  const defaultColumnDefs: ColDef[] = [\r\n    // { field: \"idx\", pinned: \"left\", width: 60 },\r\n    {\r\n      field: 'honey',\r\n      headerName: 'honey',\r\n      width: defaultWidth,\r\n      aggFunc: 'sum',\r\n      pinned: 'left',\r\n      cellRenderer: 'agAnimateShowChangeCellRenderer',\r\n      enableCellChangeFlash: true,\r\n    },\r\n    { field: '$honey', headerName: '$honey', width: defaultWidth, resizable: true },\r\n    { field: 'symbol', headerName: 'Symbol', width: defaultWidth, resizable: true },\r\n    { field: 'ticker_time_frame', headerName: 'ticker_time_frame', width: defaultWidth, resizable: true },\r\n    { field: 'trigname', headerName: 'trigname', width: defaultWidth, resizable: true },\r\n    { field: 'datetime', headerName: 'datetime', width: defaultWidth, resizable: true },\r\n    { field: 'honey_time_in_profit', headerName: 'honey_time_in_profit', width: defaultWidth, resizable: true },\r\n    { field: 'filled_qty', headerName: 'filled_qty', width: defaultWidth, resizable: true },\r\n    { field: 'qty_available', headerName: 'qty_available', width: defaultWidth, resizable: true },\r\n    { field: 'filled_avg_price', headerName: 'filled_avg_price', width: defaultWidth, resizable: true },\r\n    { field: 'limit_price', headerName: 'limit_price', width: defaultWidth, resizable: true },\r\n    { field: 'cost_basis', headerName: 'cost_basis', width: defaultWidth, resizable: true },\r\n    { field: 'wave_amo', headerName: 'wave_amo', width: defaultWidth, resizable: true },\r\n    { field: 'status_q', headerName: 'status_q', width: defaultWidth, resizable: true },\r\n    { field: 'client_order_id', headerName: 'client_order_id', width: defaultWidth, resizable: true },\r\n    { field: 'origin_wave', headerName: 'origin_wave', width: defaultWidth, resizable: true },\r\n    { field: 'wave_at_creation', headerName: 'wave_at_creation', width: defaultWidth, resizable: true },\r\n    { field: 'sell_reason', headerName: 'sell_reason', width: defaultWidth, resizable: true },\r\n    { field: 'exit_order_link', headerName: 'exit_order_link', width: defaultWidth, resizable: true },\r\n    { field: 'queen_order_state', headerName: 'queen_order_state', width: defaultWidth, resizable: true },\r\n    { field: 'order_rules', headerName: 'order_rules', width: defaultWidth, resizable: true },\r\n    { field: 'order_rules.sellout', headerName: 'order_rules.sellout', width: 150, resizable: true },\r\n    { field: 'order_trig_sell_stop', headerName: 'order_trig_sell_stop', width: defaultWidth, resizable: true },\r\n    { field: 'side', headerName: 'side', width: 70, pinned: 'right', resizable: true },\r\n    {\r\n      field: \"client_order_id\",\r\n      headerName: 'action',\r\n      width: 80,\r\n      cellRenderer: BtnCellRenderer,\r\n      cellRendererParams: {\r\n        clicked: async function (field: any) {\r\n          try {\r\n            // const res: any = await postRowId(field)\r\n            const num = prompt(`Please input number`);\r\n            const res = await axios.get(\"http://127.0.0.1:8000/api/data/queen_app_Sellorder_request\", {\r\n              params: {\r\n                username: username,\r\n                prod: prod,\r\n                client_order_id: field,\r\n                number_shares: num,\r\n              }\r\n            })\r\n            alert(\"Success Sellorder_request!\");\r\n          } catch (error) {\r\n            alert(\"Failed Sellorder_request!\");\r\n          }\r\n        },\r\n      },\r\n      pinned: 'right',\r\n    }\r\n  ];\r\n  const gridRef = useRef<AgGridReact>(null);\r\n  const { username, api, refresh_sec = 1, refresh_cutoff_sec = 0, prod = true } = props;\r\n  const [rowData, setRowData] = useState<any[]>([]);\r\n  const [columnDefs, setColumnDefs] = useState<(ColDef | ColGroupDef)[]>(defaultColumnDefs)\r\n  useEffect(() => Streamlit.setFrameHeight());\r\n\r\n  const addIds = (array: any[]) => {\r\n    return array.map((item, idx) => {\r\n      return { ...item, idx }\r\n    })\r\n  }\r\n\r\n  const fetchAndSetData = async () => {\r\n    const array = await fetchData();\r\n    const idAdded = addIds(array);\r\n    const api = gridRef.current!.api;\r\n\r\n    api.applyTransactionAsync({ update: idAdded });\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    const res = await axios.get(api, {\r\n      params: {\r\n        username: username,\r\n        prod: prod,\r\n      }\r\n    });\r\n    const array = JSON.parse(res.data);\r\n    const idAdded = addIds(array)\r\n    g_rowdata = idAdded;\r\n    return idAdded;\r\n  };\r\n\r\n  const postRowId = async (id: any) => {\r\n    const res = await axios.post(api, {\r\n      username: username,\r\n      prod: prod,\r\n      id: id,\r\n    });\r\n    return res;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(fetchAndSetData, refresh_sec * 1000);\r\n    let timeout: NodeJS.Timeout;\r\n    if (refresh_cutoff_sec > 0) {\r\n      console.log(refresh_cutoff_sec);\r\n      timeout = setTimeout(() => {\r\n        clearInterval(interval);\r\n        console.log(\"Fetching data ended, refresh rate:\", refresh_sec);\r\n      }, refresh_cutoff_sec * 1000);\r\n    }\r\n    console.error(\"rendered==========\", props);\r\n    return () => {\r\n      clearInterval(interval);\r\n      if (timeout) clearTimeout(timeout);\r\n    }\r\n  }, [props]);\r\n\r\n  const autoSizeAll = useCallback((skipHeader: boolean) => {\r\n    const allColumnIds: string[] = [];\r\n    gridRef.current!.columnApi.getColumns()!.forEach((column: any) => {\r\n      allColumnIds.push(column.getId());\r\n    });\r\n    gridRef.current!.columnApi.autoSizeColumns(allColumnIds, skipHeader);\r\n  }, []);\r\n\r\n  const sizeToFit = useCallback(() => {\r\n    gridRef.current!.api.sizeColumnsToFit({\r\n      defaultMinWidth: 100,\r\n    });\r\n  }, []);\r\n\r\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\r\n    setTimeout(async () => {\r\n      const data = await fetchData();\r\n      setRowData(data);\r\n    }, 100);\r\n  }, []);\r\n\r\n  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n    return {\r\n      minWidth: 200,\r\n    };\r\n  }, []);\r\n\r\n  const defaultColDef = useMemo<ColDef>(() => {\r\n    return {\r\n      width: 120,\r\n      sortable: true,\r\n      resizable: true,\r\n    };\r\n  }, []);\r\n\r\n  const getRowId = useMemo<GetRowIdFunc>(() => {\r\n    return (params: GetRowIdParams) => {\r\n      return params.data.idx;\r\n    };\r\n  }, []);\r\n\r\n  const sideBar = useMemo<\r\n    SideBarDef | string | string[] | boolean | null\r\n  >(() => {\r\n    return {\r\n      toolPanels: [\r\n        {\r\n          id: 'columns',\r\n          labelDefault: 'Columns',\r\n          labelKey: 'columns',\r\n          iconKey: 'columns',\r\n          toolPanel: 'agColumnsToolPanel',\r\n        },\r\n        {\r\n          id: 'filters',\r\n          labelDefault: 'Filters',\r\n          labelKey: 'filters',\r\n          iconKey: 'filter',\r\n          toolPanel: 'agFiltersToolPanel',\r\n        },\r\n      ],\r\n      defaultToolPanel: 'customStats',\r\n    };\r\n  }, []);\r\n  return (\r\n    <div style={{ display: 'flex', flexDirection: 'row', height: '100%' }}>\r\n      <div className=\"ag-theme-alpine-dark\" style={{ overflow: 'hidden', flexGrow: 1 }}>\r\n        <AgGridReact\r\n          ref={gridRef}\r\n          rowData={rowData}\r\n          columnDefs={columnDefs}\r\n          defaultColDef={defaultColDef}\r\n          rowStyle={{ fontSize: 12, padding: 0 }}\r\n          headerHeight={30}\r\n          rowHeight={30}\r\n          domLayout={\"autoHeight\"}\r\n          onGridReady={onGridReady}\r\n          autoGroupColumnDef={autoGroupColumnDef}\r\n          sideBar={sideBar}\r\n          animateRows={true}\r\n          suppressAggFuncInHeader={true}\r\n          getRowId={getRowId}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AgGrid;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\r\nimport Aggrid from \"./Aggrid\";\r\n\r\nconst Main = (props: ComponentProps) => {\r\n\r\n  const { username, api, refresh_sec, refresh_cutoff_sec, gridoption_build, prod } = props.args;\r\n\r\n  useEffect(() => Streamlit.setFrameHeight());\r\n  // Add a label and pass min/max variables to the baseui Slider\r\n  return (\r\n    <>\r\n      <Aggrid\r\n        username={username}\r\n        api={api}\r\n        refresh_sec={refresh_sec}\r\n        refresh_cutoff_sec={refresh_cutoff_sec}\r\n        gridoption_build={gridoption_build}\r\n        prod={prod}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withStreamlitConnection(Main);\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport Main from \"./Main\"\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\nimport { Client as Styletron } from \"styletron-engine-atomic\"\r\nimport { Provider as StyletronProvider } from \"styletron-react\"\r\nimport { ThemeProvider, LightTheme } from \"baseui\"\r\n\r\nconst engine = new Styletron()\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StyletronProvider value={engine}>\r\n      <ThemeProvider theme={LightTheme}>\r\n        <Main />\r\n      </ThemeProvider>\r\n    </StyletronProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}