{"version":3,"sources":["Aggrid.tsx","Main.tsx","index.tsx"],"names":["AgGrid","props","gridRef","useRef","api","refresh_sec","refresh_cutoff_sec","gridoption_build","useState","rowData","setRowData","useEffect","Streamlit","setFrameHeight","fetchData","a","axios","get","then","response","array","push","data","console","log","interval","setInterval","clearInterval","columnDefs","useMemo","field","headerName","width","pinned","resizable","sortable","useCallback","current","sizeColumnsToFit","defaultMinWidth","columnLimits","key","minWidth","className","style","fontSize","height","ref","rowStyle","padding","headerHeight","rowHeight","domLayout","withStreamlitConnection","args","Aggrid","engine","Styletron","ReactDOM","render","StrictMode","value","theme","LightTheme","document","getElementById"],"mappings":"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","file":"static/js/main.fc2f8fa7.chunk.js","sourcesContent":["import React, { useState, useEffect, useMemo, useRef, useCallback } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\r\nimport './styles.css';\r\nimport axios from \"axios\"\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\n\r\nimport {\r\n  ColDef,\r\n  ColGroupDef,\r\n  ColumnResizedEvent,\r\n  Grid,\r\n  GridOptions,\r\n  GridReadyEvent,\r\n} from 'ag-grid-community';\r\n// import { IOlympicData } from './interfaces';\r\n\r\ntype Props = {\r\n  api: string,\r\n  refresh_sec?: number,\r\n  refresh_cutoff_sec?: number,\r\n  gridoption_build?: any\r\n}\r\n\r\n\r\nconst AgGrid = (props: Props) => {\r\n  const gridRef = useRef<any>();\r\n  const { api, refresh_sec, refresh_cutoff_sec, gridoption_build } = props;\r\n  const [rowData, setRowData] = useState<any[]>([]);\r\n  useEffect(() => Streamlit.setFrameHeight());\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      axios.get(api).then((response) => {\r\n        const array = [];\r\n        array.push(response.data)\r\n        setRowData(array);\r\n        console.log('response.data :>> ', response.data);\r\n      });\r\n    };\r\n\r\n    fetchData();\r\n    const interval = setInterval(fetchData, 1000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n\r\n\r\n  const columnDefs = useMemo<ColDef[]>(() => [\r\n    { field: 'honey', headerName: 'honey', width: 100, pinned: 'left', resizable: true, sortable: true, },\r\n    { field: '$honey', headerName: '$honey', width: 100, resizable: true },\r\n    { field: 'symbol', headerName: 'Symbol', width: 100, resizable: true },\r\n    { field: 'ticker_time_frame', headerName: 'ticker_time_frame', width: 100, resizable: true },\r\n    { field: 'trigname', headerName: 'trigname', width: 100, resizable: true },\r\n    { field: 'datetime', headerName: 'datetime', width: 100, resizable: true },\r\n    { field: 'honey_time_in_profit', headerName: 'honey_time_in_profit', width: 100, resizable: true },\r\n    { field: 'filled_qty', headerName: 'filled_qty', width: 100, resizable: true },\r\n    { field: 'qty_available', headerName: 'qty_available', width: 100, resizable: true },\r\n    { field: 'filled_avg_price', headerName: 'filled_avg_price', width: 100, resizable: true },\r\n    { field: 'limit_price', headerName: 'limit_price', width: 100, resizable: true },\r\n    { field: 'cost_basis', headerName: 'cost_basis', width: 100, resizable: true },\r\n    { field: 'wave_amo', headerName: 'wave_amo', width: 100, resizable: true },\r\n    { field: 'status_q', headerName: 'status_q', width: 100, resizable: true },\r\n    { field: 'client_order_id', headerName: 'client_order_id', width: 100, resizable: true },\r\n    { field: 'origin_wave', headerName: 'origin_wave', width: 100, resizable: true },\r\n    { field: 'wave_at_creation', headerName: 'wave_at_creation', width: 100, resizable: true },\r\n    { field: 'sell_reason', headerName: 'sell_reason', width: 100, resizable: true },\r\n    { field: 'exit_order_link', headerName: 'exit_order_link', width: 100, resizable: true },\r\n    { field: 'queen_order_state', headerName: 'queen_order_state', width: 100, resizable: true },\r\n    { field: 'order_rules', headerName: 'order_rules', width: 100, resizable: true },\r\n    { field: 'order_trig_sell_stop', headerName: 'order_trig_sell_stop', width: 100, resizable: true },\r\n    { field: 'side', headerName: 'side', width: 100, pinned: 'right', resizable: true },\r\n  ], []);\r\n\r\n\r\n\r\n  const sizeToFit = useCallback(() => {\r\n    gridRef.current.api.sizeColumnsToFit({\r\n      defaultMinWidth: 100,\r\n      columnLimits: [{ key: 'country', minWidth: 900 }],\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className=\"ag-theme-alpine\"\r\n      style={{\r\n        fontSize: 10,\r\n        height: '500px',\r\n        width: '100%',\r\n      }}\r\n    >\r\n      <AgGridReact\r\n        ref={gridRef}\r\n        columnDefs={columnDefs}\r\n        rowData={rowData}\r\n        rowStyle={{ fontSize: 10, padding: 0 }}\r\n        headerHeight={30}\r\n        rowHeight={30}\r\n        domLayout={\"autoHeight\"}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AgGrid;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport { Slider } from \"baseui/slider\";\r\nimport { setTimeout } from \"timers\";\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\r\nimport axios from \"axios\";\r\nimport Aggrid from \"./Aggrid\";\r\n\r\nconst Main = (props: ComponentProps) => {\r\n\r\n  const { api, refresh_sec, refresh_cutoff_sec, gridoption_build } = props.args;\r\n\r\n  useEffect(() => Streamlit.setFrameHeight());\r\n  // Add a label and pass min/max variables to the baseui Slider\r\n  return (\r\n    <>\r\n      <Aggrid\r\n        api={api}\r\n        refresh_sec={refresh_sec}\r\n        refresh_cutoff_sec={refresh_cutoff_sec}\r\n        gridoption_build={gridoption_build}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withStreamlitConnection(Main);\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport Main from \"./Main\"\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\nimport { Client as Styletron } from \"styletron-engine-atomic\"\r\nimport { Provider as StyletronProvider } from \"styletron-react\"\r\nimport { ThemeProvider, LightTheme } from \"baseui\"\r\n\r\nconst engine = new Styletron()\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StyletronProvider value={engine}>\r\n      <ThemeProvider theme={LightTheme}>\r\n        <Main />\r\n      </ThemeProvider>\r\n    </StyletronProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}