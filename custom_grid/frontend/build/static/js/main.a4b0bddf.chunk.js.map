{"version":3,"sources":["components/Modal.jsx","Aggrid.tsx","Main.tsx","index.tsx"],"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","ReactModal","setAppElement","MyModal","_ref","isOpen","closeModal","modalData","promptText","setPromptText","toastr","handleOk","_ref2","_asyncToGenerator","_callee","_context","axios","post","button_api","_objectSpread","username","prod","selected_row","selectedRow","default_value","kwargs","success","t0","alert","concat","apply","arguments","React","createElement","className","style","display","prompt_message","onClick","rows","cols","placeholder","onChange","e","target","g_rowdata","g_newRowData","dateFormatter","isoString","formaterString","date","Date","format","_unused","currencyFormatter","number","currencySymbol","n","Number","parseFloat","toFixed","numberFormatter","precision","HyperlinkRenderer","props","console","log","href","column","colDef","baseURL","data","options","positionClass","hideDuration","timeOut","AgGrid","BtnCellRenderer","clicked","buttonName","gridRef","useRef","api","api_update","_props$refresh_sec","refresh_sec","_props$refresh_cutoff","refresh_cutoff_sec","_props$prod","index","_props$grid_options","grid_options","buttons","_useState","useState","_useState2","_slicedToArray","rowData","setRowData","_useState3","_useState4","modalShow","setModalshow","_useState5","_useState6","setModalData","_useState7","_useState8","useEffect","Streamlit","setFrameHeight","map","button","prompt_field","columnDefs","field","headerName","width","pinned","cellRenderer","cellRendererParams","_clicked","find","row","window","confirm","_x","fetchAndSetData","_callee2","array","id_array","old_id_array","toUpdate","toRemove","toAdd","_context2","fetchData","current","item","filter","includes","applyTransactionAsync","update","remove","add","_callee3","res","_context3","JSON","parse","status","message","timeout","interval","setInterval","setTimeout","clearInterval","clearTimeout","useCallback","skipHeader","allColumnIds","columnApi","getColumns","getId","autoSizeColumns","sizeColumnsToFit","defaultMinWidth","onGridReady","_ref3","_callee5","params","_context5","_callee4","_context4","_x2","autoGroupColumnDef","useMemo","minWidth","getRowId","onCellValueChanged","toolPanels","id","labelDefault","labelKey","iconKey","toolPanel","defaultToolPanel","event","onRefresh","_ref5","_callee6","_context6","onUpdate","_ref6","_callee7","_context7","warning","new_data","columnTypes","dateColumnFilter","filterParams","comparator","filterValue","cellValue","compareAsc","numberColumnFilter","shortDateTimeFormat","valueFormatter","customDateTimeFormat","custom_format_string","customNumericFormat","_params$column$colDef2","customCurrencyFormat","custom_currency_symbol","timedeltaFormat","duration","humanize","customNumberFormat","toLocaleString","minimumFractionDigits","customHyperlinkRenderer","Fragment","flexDirection","height","margin","theme","AgGridReact","ref","getRowStyle","background","color","rowStyle","fontSize","padding","headerHeight","rowHeight","animateRows","suppressAggFuncInHeader","gridOptions","withStreamlitConnection","_props$args","args","gridoption_build","_props$args2","_props$args2$kwargs","Aggrid","ReactDOM","render","StrictMode","Main","document","getElementById"],"mappings":";mZACAA,EAAA,kBAAAC,GAAA,IAAAA,EAAA,GAAAC,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAAJ,OAAAI,gBAAA,SAAAC,EAAAC,EAAAC,GAAAF,EAAAC,GAAAC,EAAAC,OAAAC,EAAA,mBAAAC,cAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,eAAA,kBAAAC,EAAAN,EAAAO,aAAA,yBAAAC,EAAAZ,EAAAC,EAAAE,GAAA,OAAAR,OAAAI,eAAAC,EAAAC,EAAA,CAAAE,QAAAU,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAf,EAAAC,GAAA,IAAAW,EAAA,aAAAI,GAAAJ,EAAA,SAAAZ,EAAAC,EAAAE,GAAA,OAAAH,EAAAC,GAAAE,GAAA,SAAAc,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,KAAAvB,qBAAA2B,EAAAJ,EAAAI,EAAAC,EAAA7B,OAAA8B,OAAAH,EAAA1B,WAAA8B,EAAA,IAAAC,EAAAN,GAAA,WAAAtB,EAAAyB,EAAA,WAAArB,MAAAyB,EAAAV,EAAAE,EAAAM,KAAAF,EAAA,SAAAK,EAAAC,EAAA9B,EAAA+B,GAAA,WAAAC,KAAA,SAAAD,IAAAD,EAAAG,KAAAjC,EAAA+B,IAAA,MAAAf,GAAA,OAAAgB,KAAA,QAAAD,IAAAf,IAAAvB,EAAAwB,OAAA,IAAAiB,EAAA,YAAAX,KAAA,SAAAY,KAAA,SAAAC,KAAA,IAAAC,EAAA,GAAAzB,EAAAyB,EAAA/B,GAAA,8BAAAgC,EAAA3C,OAAA4C,eAAAC,EAAAF,OAAAG,EAAA,MAAAD,OAAA9C,GAAAG,EAAAoC,KAAAO,EAAAlC,KAAA+B,EAAAG,GAAA,IAAAE,EAAAN,EAAAxC,UAAA2B,EAAA3B,UAAAD,OAAA8B,OAAAY,GAAA,SAAAM,EAAA/C,GAAA,0BAAAgD,SAAA,SAAAC,GAAAjC,EAAAhB,EAAAiD,GAAA,SAAAd,GAAA,YAAAe,QAAAD,EAAAd,SAAA,SAAAgB,EAAAvB,EAAAwB,GAAA,IAAAC,EAAAlD,EAAA,gBAAAI,MAAA,SAAA0C,EAAAd,GAAA,SAAAmB,IAAA,WAAAF,GAAA,SAAAG,EAAAC,IAAA,SAAAC,EAAAR,EAAAd,EAAAoB,EAAAC,GAAA,IAAAE,EAAAzB,EAAAL,EAAAqB,GAAArB,EAAAO,GAAA,aAAAuB,EAAAtB,KAAA,KAAAuB,EAAAD,EAAAvB,IAAA5B,EAAAoD,EAAApD,MAAA,OAAAA,GAAA,iBAAAA,GAAAN,EAAAoC,KAAA9B,EAAA,WAAA6C,EAAAG,QAAAhD,EAAAqD,SAAAC,MAAA,SAAAtD,GAAAkD,EAAA,OAAAlD,EAAAgD,EAAAC,MAAA,SAAApC,GAAAqC,EAAA,QAAArC,EAAAmC,EAAAC,MAAAJ,EAAAG,QAAAhD,GAAAsD,MAAA,SAAAC,GAAAH,EAAApD,MAAAuD,EAAAP,EAAAI,MAAA,SAAAI,GAAA,OAAAN,EAAA,QAAAM,EAAAR,EAAAC,QAAAE,EAAAvB,KAAAsB,CAAAR,EAAAd,EAAAoB,EAAAC,MAAA,OAAAH,MAAAQ,KAAAP,YAAA,SAAAtB,EAAAV,EAAAE,EAAAM,GAAA,IAAAkC,EAAA,iCAAAf,EAAAd,GAAA,iBAAA6B,EAAA,UAAAC,MAAA,iDAAAD,EAAA,cAAAf,EAAA,MAAAd,EAAA,OAAA+B,IAAA,IAAApC,EAAAmB,SAAAnB,EAAAK,QAAA,KAAAgC,EAAArC,EAAAqC,SAAA,GAAAA,EAAA,KAAAC,EAAAC,EAAAF,EAAArC,GAAA,GAAAsC,EAAA,IAAAA,IAAA9B,EAAA,gBAAA8B,GAAA,YAAAtC,EAAAmB,OAAAnB,EAAAwC,KAAAxC,EAAAyC,MAAAzC,EAAAK,SAAA,aAAAL,EAAAmB,OAAA,uBAAAe,EAAA,MAAAA,EAAA,YAAAlC,EAAAK,IAAAL,EAAA0C,kBAAA1C,EAAAK,SAAA,WAAAL,EAAAmB,QAAAnB,EAAA2C,OAAA,SAAA3C,EAAAK,KAAA6B,EAAA,gBAAAN,EAAAzB,EAAAX,EAAAE,EAAAM,GAAA,cAAA4B,EAAAtB,KAAA,IAAA4B,EAAAlC,EAAA4C,KAAA,6BAAAhB,EAAAvB,MAAAG,EAAA,gBAAA/B,MAAAmD,EAAAvB,IAAAuC,KAAA5C,EAAA4C,MAAA,UAAAhB,EAAAtB,OAAA4B,EAAA,YAAAlC,EAAAmB,OAAA,QAAAnB,EAAAK,IAAAuB,EAAAvB,OAAA,SAAAkC,EAAAF,EAAArC,GAAA,IAAA6C,EAAA7C,EAAAmB,SAAAkB,EAAAxD,SAAAgE,GAAA,QAAAC,IAAA3B,EAAA,OAAAnB,EAAAqC,SAAA,eAAAQ,GAAAR,EAAAxD,SAAAkE,SAAA/C,EAAAmB,OAAA,SAAAnB,EAAAK,SAAAyC,EAAAP,EAAAF,EAAArC,GAAA,UAAAA,EAAAmB,SAAA,WAAA0B,IAAA7C,EAAAmB,OAAA,QAAAnB,EAAAK,IAAA,IAAA2C,UAAA,oCAAAH,EAAA,aAAArC,EAAA,IAAAoB,EAAAzB,EAAAgB,EAAAkB,EAAAxD,SAAAmB,EAAAK,KAAA,aAAAuB,EAAAtB,KAAA,OAAAN,EAAAmB,OAAA,QAAAnB,EAAAK,IAAAuB,EAAAvB,IAAAL,EAAAqC,SAAA,KAAA7B,EAAA,IAAAyC,EAAArB,EAAAvB,IAAA,OAAA4C,IAAAL,MAAA5C,EAAAqC,EAAAa,YAAAD,EAAAxE,MAAAuB,EAAAmD,KAAAd,EAAAe,QAAA,WAAApD,EAAAmB,SAAAnB,EAAAmB,OAAA,OAAAnB,EAAAK,SAAAyC,GAAA9C,EAAAqC,SAAA,KAAA7B,GAAAyC,GAAAjD,EAAAmB,OAAA,QAAAnB,EAAAK,IAAA,IAAA2C,UAAA,oCAAAhD,EAAAqC,SAAA,KAAA7B,GAAA,SAAA6C,EAAAC,GAAA,IAAAC,EAAA,CAAAC,OAAAF,EAAA,SAAAA,IAAAC,EAAAE,SAAAH,EAAA,SAAAA,IAAAC,EAAAG,WAAAJ,EAAA,GAAAC,EAAAI,SAAAL,EAAA,SAAAM,WAAAC,KAAAN,GAAA,SAAAO,EAAAP,GAAA,IAAA3B,EAAA2B,EAAAQ,YAAA,GAAAnC,EAAAtB,KAAA,gBAAAsB,EAAAvB,IAAAkD,EAAAQ,WAAAnC,EAAA,SAAA3B,EAAAN,GAAA,KAAAiE,WAAA,EAAAJ,OAAA,SAAA7D,EAAAuB,QAAAmC,EAAA,WAAAW,OAAA,YAAAjD,EAAAkD,GAAA,GAAAA,EAAA,KAAAC,EAAAD,EAAArF,GAAA,GAAAsF,EAAA,OAAAA,EAAA3D,KAAA0D,GAAA,sBAAAA,EAAAd,KAAA,OAAAc,EAAA,IAAAE,MAAAF,EAAAG,QAAA,KAAAC,GAAA,EAAAlB,EAAA,SAAAA,IAAA,OAAAkB,EAAAJ,EAAAG,QAAA,GAAAjG,EAAAoC,KAAA0D,EAAAI,GAAA,OAAAlB,EAAA1E,MAAAwF,EAAAI,GAAAlB,EAAAP,MAAA,EAAAO,EAAA,OAAAA,EAAA1E,WAAAqE,EAAAK,EAAAP,MAAA,EAAAO,GAAA,OAAAA,UAAA,OAAAA,KAAAf,GAAA,SAAAA,IAAA,OAAA3D,WAAAqE,EAAAF,MAAA,UAAAnC,EAAAvC,UAAAwC,EAAArC,EAAA2C,EAAA,eAAAvC,MAAAiC,EAAAtB,cAAA,IAAAf,EAAAqC,EAAA,eAAAjC,MAAAgC,EAAArB,cAAA,IAAAqB,EAAA6D,YAAApF,EAAAwB,EAAA1B,EAAA,qBAAAjB,EAAAwG,oBAAA,SAAAC,GAAA,IAAAC,EAAA,mBAAAD,KAAAE,YAAA,QAAAD,QAAAhE,GAAA,uBAAAgE,EAAAH,aAAAG,EAAAE,QAAA5G,EAAA6G,KAAA,SAAAJ,GAAA,OAAAvG,OAAA4G,eAAA5G,OAAA4G,eAAAL,EAAA9D,IAAA8D,EAAAM,UAAApE,EAAAxB,EAAAsF,EAAAxF,EAAA,sBAAAwF,EAAAtG,UAAAD,OAAA8B,OAAAiB,GAAAwD,GAAAzG,EAAAgH,MAAA,SAAA1E,GAAA,OAAAyB,QAAAzB,IAAAY,EAAAI,EAAAnD,WAAAgB,EAAAmC,EAAAnD,UAAAY,GAAA,0BAAAf,EAAAsD,gBAAAtD,EAAAiH,MAAA,SAAAxF,EAAAC,EAAAC,EAAAC,EAAA2B,QAAA,IAAAA,MAAA2D,SAAA,IAAAC,EAAA,IAAA7D,EAAA9B,EAAAC,EAAAC,EAAAC,EAAAC,GAAA2B,GAAA,OAAAvD,EAAAwG,oBAAA9E,GAAAyF,IAAA/B,OAAApB,MAAA,SAAAF,GAAA,OAAAA,EAAAe,KAAAf,EAAApD,MAAAyG,EAAA/B,WAAAlC,EAAAD,GAAA9B,EAAA8B,EAAAhC,EAAA,aAAAE,EAAA8B,EAAApC,GAAA,0BAAAM,EAAA8B,EAAA,qDAAAjD,EAAAoH,KAAA,SAAAC,GAAA,IAAAC,EAAApH,OAAAmH,GAAAD,EAAA,WAAA5G,KAAA8G,EAAAF,EAAAtB,KAAAtF,GAAA,OAAA4G,EAAAG,UAAA,SAAAnC,IAAA,KAAAgC,EAAAf,QAAA,KAAA7F,EAAA4G,EAAAI,MAAA,GAAAhH,KAAA8G,EAAA,OAAAlC,EAAA1E,MAAAF,EAAA4E,EAAAP,MAAA,EAAAO,EAAA,OAAAA,EAAAP,MAAA,EAAAO,IAAApF,EAAAgD,SAAAd,EAAA/B,UAAA,CAAAwG,YAAAzE,EAAA+D,MAAA,SAAAwB,GAAA,QAAAC,KAAA,OAAAtC,KAAA,OAAAX,KAAA,KAAAC,WAAAK,EAAA,KAAAF,MAAA,OAAAP,SAAA,UAAAlB,OAAA,YAAAd,SAAAyC,EAAA,KAAAc,WAAA1C,QAAA4C,IAAA0B,EAAA,QAAAb,KAAA,WAAAA,EAAAe,OAAA,IAAAvH,EAAAoC,KAAA,KAAAoE,KAAAR,OAAAQ,EAAAgB,MAAA,WAAAhB,QAAA7B,IAAA8C,KAAA,gBAAAhD,MAAA,MAAAiD,EAAA,KAAAjC,WAAA,GAAAG,WAAA,aAAA8B,EAAAvF,KAAA,MAAAuF,EAAAxF,IAAA,YAAAyF,MAAApD,kBAAA,SAAAqD,GAAA,QAAAnD,KAAA,MAAAmD,EAAA,IAAA/F,EAAA,cAAAgG,EAAAC,EAAAC,GAAA,OAAAtE,EAAAtB,KAAA,QAAAsB,EAAAvB,IAAA0F,EAAA/F,EAAAmD,KAAA8C,EAAAC,IAAAlG,EAAAmB,OAAA,OAAAnB,EAAAK,SAAAyC,KAAAoD,EAAA,QAAA7B,EAAA,KAAAT,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAA,KAAAK,WAAAS,GAAAzC,EAAA2B,EAAAQ,WAAA,YAAAR,EAAAC,OAAA,OAAAwC,EAAA,UAAAzC,EAAAC,QAAA,KAAAiC,KAAA,KAAAU,EAAAhI,EAAAoC,KAAAgD,EAAA,YAAA6C,EAAAjI,EAAAoC,KAAAgD,EAAA,iBAAA4C,GAAAC,EAAA,SAAAX,KAAAlC,EAAAE,SAAA,OAAAuC,EAAAzC,EAAAE,UAAA,WAAAgC,KAAAlC,EAAAG,WAAA,OAAAsC,EAAAzC,EAAAG,iBAAA,GAAAyC,GAAA,QAAAV,KAAAlC,EAAAE,SAAA,OAAAuC,EAAAzC,EAAAE,UAAA,YAAA2C,EAAA,UAAAjE,MAAA,kDAAAsD,KAAAlC,EAAAG,WAAA,OAAAsC,EAAAzC,EAAAG,gBAAAf,OAAA,SAAArC,EAAAD,GAAA,QAAAgE,EAAA,KAAAT,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAA,KAAAK,WAAAS,GAAA,GAAAd,EAAAC,QAAA,KAAAiC,MAAAtH,EAAAoC,KAAAgD,EAAA,oBAAAkC,KAAAlC,EAAAG,WAAA,KAAA2C,EAAA9C,EAAA,OAAA8C,IAAA,UAAA/F,GAAA,aAAAA,IAAA+F,EAAA7C,QAAAnD,MAAAgG,EAAA3C,aAAA2C,EAAA,UAAAzE,EAAAyE,IAAAtC,WAAA,UAAAnC,EAAAtB,OAAAsB,EAAAvB,MAAAgG,GAAA,KAAAlF,OAAA,YAAAgC,KAAAkD,EAAA3C,WAAAlD,GAAA,KAAA8F,SAAA1E,IAAA0E,SAAA,SAAA1E,EAAA+B,GAAA,aAAA/B,EAAAtB,KAAA,MAAAsB,EAAAvB,IAAA,gBAAAuB,EAAAtB,MAAA,aAAAsB,EAAAtB,KAAA,KAAA6C,KAAAvB,EAAAvB,IAAA,WAAAuB,EAAAtB,MAAA,KAAAwF,KAAA,KAAAzF,IAAAuB,EAAAvB,IAAA,KAAAc,OAAA,cAAAgC,KAAA,kBAAAvB,EAAAtB,MAAAqD,IAAA,KAAAR,KAAAQ,GAAAnD,GAAA+F,OAAA,SAAA7C,GAAA,QAAAW,EAAA,KAAAT,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAA,KAAAK,WAAAS,GAAA,GAAAd,EAAAG,eAAA,YAAA4C,SAAA/C,EAAAQ,WAAAR,EAAAI,UAAAG,EAAAP,GAAA/C,IAAAgG,MAAA,SAAAhD,GAAA,QAAAa,EAAA,KAAAT,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAA,KAAAK,WAAAS,GAAA,GAAAd,EAAAC,WAAA,KAAA5B,EAAA2B,EAAAQ,WAAA,aAAAnC,EAAAtB,KAAA,KAAAmG,EAAA7E,EAAAvB,IAAAyD,EAAAP,GAAA,OAAAkD,GAAA,UAAAtE,MAAA,0BAAAuE,cAAA,SAAAzC,EAAAf,EAAAE,GAAA,YAAAf,SAAA,CAAAxD,SAAAkC,EAAAkD,GAAAf,aAAAE,WAAA,cAAAjC,SAAA,KAAAd,SAAAyC,GAAAtC,IAAAzC,EAeA4I,IAAWC,cAAc,SAEzB,IAoEeC,EApEC,SAAHC,GAON,IANLC,EAAMD,EAANC,OACAC,EAAUF,EAAVE,WACAC,EAASH,EAATG,UACAC,EAAUJ,EAAVI,WACAC,EAAaL,EAAbK,cACAC,EAAMN,EAANM,OAEMC,EAAQ,eAAAC,EAAAC,YAAAzJ,IAAA8G,MAAG,SAAA4C,IAAA,OAAA1J,IAAAyB,MAAA,SAAAkI,GAAA,cAAAA,EAAAhC,KAAAgC,EAAAtE,MAAA,cAAAsE,EAAAhC,KAAA,EAAAgC,EAAAtE,KAAA,EAEKuE,IAAMC,KAAKV,EAAUW,WAAUC,YAAA,CAC/CC,SAAUb,EAAUa,SACpBC,KAAMd,EAAUc,KAChBC,aAAcf,EAAUgB,YACxBC,cAAehB,GACZD,EAAUkB,SACb,OANOV,EAAAjF,KAOT4E,EAAOgB,QAAQ,WACfpB,IAAYS,EAAAtE,KAAA,gBAAAsE,EAAAhC,KAAA,EAAAgC,EAAAY,GAAAZ,EAAA,SAEZa,MAAM,GAADC,OAAAd,EAAAY,KAAY,yBAAAZ,EAAA7B,UAAA4B,EAAA,kBAEpB,kBAda,OAAAF,EAAAkB,MAAA,KAAAC,YAAA,GAed,OAQEC,IAAAC,cAAA,OAAKC,UAAU,WAAWC,MAAO,CAAEC,QAAS/B,EAAS,QAAU,SAC7D2B,IAAAC,cAAA,OAAKC,UAAU,oBACbF,IAAAC,cAAA,OAAKC,UAAU,qBACbF,IAAAC,cAAA,UAAK1B,EAAU8B,gBACfL,IAAAC,cAAA,QAAMC,UAAU,QAAQI,QAAShC,GAAY,SAI/C0B,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAAA,YACEC,UAAU,eACVK,KAAM,EACNC,KAAM,GACN5I,KAAK,OACL7B,MAAOyI,EACPiC,YAAY,oBACZC,SAAU,SAACC,GAAC,OAAKlC,EAAckC,EAAEC,OAAO7K,WAG5CiK,IAAAC,cAAA,OAAKC,UAAU,gBACbF,IAAAC,cAAA,UAAQrI,KAAK,SAASsI,UAAU,kBAAkBI,QAAS3B,GAAU,MAGrEqB,IAAAC,cAAA,UACErI,KAAK,SACLsI,UAAU,oBACVI,QAAShC,GACV,c,aC3EXlJ,EAAA,kBAAAC,GAAA,IAAAA,EAAA,GAAAC,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAAJ,OAAAI,gBAAA,SAAAC,EAAAC,EAAAC,GAAAF,EAAAC,GAAAC,EAAAC,OAAAC,EAAA,mBAAAC,cAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,eAAA,kBAAAC,EAAAN,EAAAO,aAAA,yBAAAC,EAAAZ,EAAAC,EAAAE,GAAA,OAAAR,OAAAI,eAAAC,EAAAC,EAAA,CAAAE,QAAAU,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAf,EAAAC,GAAA,IAAAW,EAAA,aAAAI,GAAAJ,EAAA,SAAAZ,EAAAC,EAAAE,GAAA,OAAAH,EAAAC,GAAAE,GAAA,SAAAc,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,KAAAvB,qBAAA2B,EAAAJ,EAAAI,EAAAC,EAAA7B,OAAA8B,OAAAH,EAAA1B,WAAA8B,EAAA,IAAAC,EAAAN,GAAA,WAAAtB,EAAAyB,EAAA,WAAArB,MAAAyB,EAAAV,EAAAE,EAAAM,KAAAF,EAAA,SAAAK,EAAAC,EAAA9B,EAAA+B,GAAA,WAAAC,KAAA,SAAAD,IAAAD,EAAAG,KAAAjC,EAAA+B,IAAA,MAAAf,GAAA,OAAAgB,KAAA,QAAAD,IAAAf,IAAAvB,EAAAwB,OAAA,IAAAiB,EAAA,YAAAX,KAAA,SAAAY,KAAA,SAAAC,KAAA,IAAAC,EAAA,GAAAzB,EAAAyB,EAAA/B,GAAA,8BAAAgC,EAAA3C,OAAA4C,eAAAC,EAAAF,OAAAG,EAAA,MAAAD,OAAA9C,GAAAG,EAAAoC,KAAAO,EAAAlC,KAAA+B,EAAAG,GAAA,IAAAE,EAAAN,EAAAxC,UAAA2B,EAAA3B,UAAAD,OAAA8B,OAAAY,GAAA,SAAAM,EAAA/C,GAAA,0BAAAgD,SAAA,SAAAC,GAAAjC,EAAAhB,EAAAiD,GAAA,SAAAd,GAAA,YAAAe,QAAAD,EAAAd,SAAA,SAAAgB,EAAAvB,EAAAwB,GAAA,IAAAC,EAAAlD,EAAA,gBAAAI,MAAA,SAAA0C,EAAAd,GAAA,SAAAmB,IAAA,WAAAF,GAAA,SAAAG,EAAAC,IAAA,SAAAC,EAAAR,EAAAd,EAAAoB,EAAAC,GAAA,IAAAE,EAAAzB,EAAAL,EAAAqB,GAAArB,EAAAO,GAAA,aAAAuB,EAAAtB,KAAA,KAAAuB,EAAAD,EAAAvB,IAAA5B,EAAAoD,EAAApD,MAAA,OAAAA,GAAA,iBAAAA,GAAAN,EAAAoC,KAAA9B,EAAA,WAAA6C,EAAAG,QAAAhD,EAAAqD,SAAAC,MAAA,SAAAtD,GAAAkD,EAAA,OAAAlD,EAAAgD,EAAAC,MAAA,SAAApC,GAAAqC,EAAA,QAAArC,EAAAmC,EAAAC,MAAAJ,EAAAG,QAAAhD,GAAAsD,MAAA,SAAAC,GAAAH,EAAApD,MAAAuD,EAAAP,EAAAI,MAAA,SAAAI,GAAA,OAAAN,EAAA,QAAAM,EAAAR,EAAAC,QAAAE,EAAAvB,KAAAsB,CAAAR,EAAAd,EAAAoB,EAAAC,MAAA,OAAAH,MAAAQ,KAAAP,YAAA,SAAAtB,EAAAV,EAAAE,EAAAM,GAAA,IAAAkC,EAAA,iCAAAf,EAAAd,GAAA,iBAAA6B,EAAA,UAAAC,MAAA,iDAAAD,EAAA,cAAAf,EAAA,MAAAd,EAAA,OAAA+B,IAAA,IAAApC,EAAAmB,SAAAnB,EAAAK,QAAA,KAAAgC,EAAArC,EAAAqC,SAAA,GAAAA,EAAA,KAAAC,EAAAC,EAAAF,EAAArC,GAAA,GAAAsC,EAAA,IAAAA,IAAA9B,EAAA,gBAAA8B,GAAA,YAAAtC,EAAAmB,OAAAnB,EAAAwC,KAAAxC,EAAAyC,MAAAzC,EAAAK,SAAA,aAAAL,EAAAmB,OAAA,uBAAAe,EAAA,MAAAA,EAAA,YAAAlC,EAAAK,IAAAL,EAAA0C,kBAAA1C,EAAAK,SAAA,WAAAL,EAAAmB,QAAAnB,EAAA2C,OAAA,SAAA3C,EAAAK,KAAA6B,EAAA,gBAAAN,EAAAzB,EAAAX,EAAAE,EAAAM,GAAA,cAAA4B,EAAAtB,KAAA,IAAA4B,EAAAlC,EAAA4C,KAAA,6BAAAhB,EAAAvB,MAAAG,EAAA,gBAAA/B,MAAAmD,EAAAvB,IAAAuC,KAAA5C,EAAA4C,MAAA,UAAAhB,EAAAtB,OAAA4B,EAAA,YAAAlC,EAAAmB,OAAA,QAAAnB,EAAAK,IAAAuB,EAAAvB,OAAA,SAAAkC,EAAAF,EAAArC,GAAA,IAAA6C,EAAA7C,EAAAmB,SAAAkB,EAAAxD,SAAAgE,GAAA,QAAAC,IAAA3B,EAAA,OAAAnB,EAAAqC,SAAA,eAAAQ,GAAAR,EAAAxD,SAAAkE,SAAA/C,EAAAmB,OAAA,SAAAnB,EAAAK,SAAAyC,EAAAP,EAAAF,EAAArC,GAAA,UAAAA,EAAAmB,SAAA,WAAA0B,IAAA7C,EAAAmB,OAAA,QAAAnB,EAAAK,IAAA,IAAA2C,UAAA,oCAAAH,EAAA,aAAArC,EAAA,IAAAoB,EAAAzB,EAAAgB,EAAAkB,EAAAxD,SAAAmB,EAAAK,KAAA,aAAAuB,EAAAtB,KAAA,OAAAN,EAAAmB,OAAA,QAAAnB,EAAAK,IAAAuB,EAAAvB,IAAAL,EAAAqC,SAAA,KAAA7B,EAAA,IAAAyC,EAAArB,EAAAvB,IAAA,OAAA4C,IAAAL,MAAA5C,EAAAqC,EAAAa,YAAAD,EAAAxE,MAAAuB,EAAAmD,KAAAd,EAAAe,QAAA,WAAApD,EAAAmB,SAAAnB,EAAAmB,OAAA,OAAAnB,EAAAK,SAAAyC,GAAA9C,EAAAqC,SAAA,KAAA7B,GAAAyC,GAAAjD,EAAAmB,OAAA,QAAAnB,EAAAK,IAAA,IAAA2C,UAAA,oCAAAhD,EAAAqC,SAAA,KAAA7B,GAAA,SAAA6C,EAAAC,GAAA,IAAAC,EAAA,CAAAC,OAAAF,EAAA,SAAAA,IAAAC,EAAAE,SAAAH,EAAA,SAAAA,IAAAC,EAAAG,WAAAJ,EAAA,GAAAC,EAAAI,SAAAL,EAAA,SAAAM,WAAAC,KAAAN,GAAA,SAAAO,EAAAP,GAAA,IAAA3B,EAAA2B,EAAAQ,YAAA,GAAAnC,EAAAtB,KAAA,gBAAAsB,EAAAvB,IAAAkD,EAAAQ,WAAAnC,EAAA,SAAA3B,EAAAN,GAAA,KAAAiE,WAAA,EAAAJ,OAAA,SAAA7D,EAAAuB,QAAAmC,EAAA,WAAAW,OAAA,YAAAjD,EAAAkD,GAAA,GAAAA,EAAA,KAAAC,EAAAD,EAAArF,GAAA,GAAAsF,EAAA,OAAAA,EAAA3D,KAAA0D,GAAA,sBAAAA,EAAAd,KAAA,OAAAc,EAAA,IAAAE,MAAAF,EAAAG,QAAA,KAAAC,GAAA,EAAAlB,EAAA,SAAAA,IAAA,OAAAkB,EAAAJ,EAAAG,QAAA,GAAAjG,EAAAoC,KAAA0D,EAAAI,GAAA,OAAAlB,EAAA1E,MAAAwF,EAAAI,GAAAlB,EAAAP,MAAA,EAAAO,EAAA,OAAAA,EAAA1E,WAAAqE,EAAAK,EAAAP,MAAA,EAAAO,GAAA,OAAAA,UAAA,OAAAA,KAAAf,GAAA,SAAAA,IAAA,OAAA3D,WAAAqE,EAAAF,MAAA,UAAAnC,EAAAvC,UAAAwC,EAAArC,EAAA2C,EAAA,eAAAvC,MAAAiC,EAAAtB,cAAA,IAAAf,EAAAqC,EAAA,eAAAjC,MAAAgC,EAAArB,cAAA,IAAAqB,EAAA6D,YAAApF,EAAAwB,EAAA1B,EAAA,qBAAAjB,EAAAwG,oBAAA,SAAAC,GAAA,IAAAC,EAAA,mBAAAD,KAAAE,YAAA,QAAAD,QAAAhE,GAAA,uBAAAgE,EAAAH,aAAAG,EAAAE,QAAA5G,EAAA6G,KAAA,SAAAJ,GAAA,OAAAvG,OAAA4G,eAAA5G,OAAA4G,eAAAL,EAAA9D,IAAA8D,EAAAM,UAAApE,EAAAxB,EAAAsF,EAAAxF,EAAA,sBAAAwF,EAAAtG,UAAAD,OAAA8B,OAAAiB,GAAAwD,GAAAzG,EAAAgH,MAAA,SAAA1E,GAAA,OAAAyB,QAAAzB,IAAAY,EAAAI,EAAAnD,WAAAgB,EAAAmC,EAAAnD,UAAAY,GAAA,0BAAAf,EAAAsD,gBAAAtD,EAAAiH,MAAA,SAAAxF,EAAAC,EAAAC,EAAAC,EAAA2B,QAAA,IAAAA,MAAA2D,SAAA,IAAAC,EAAA,IAAA7D,EAAA9B,EAAAC,EAAAC,EAAAC,EAAAC,GAAA2B,GAAA,OAAAvD,EAAAwG,oBAAA9E,GAAAyF,IAAA/B,OAAApB,MAAA,SAAAF,GAAA,OAAAA,EAAAe,KAAAf,EAAApD,MAAAyG,EAAA/B,WAAAlC,EAAAD,GAAA9B,EAAA8B,EAAAhC,EAAA,aAAAE,EAAA8B,EAAApC,GAAA,0BAAAM,EAAA8B,EAAA,qDAAAjD,EAAAoH,KAAA,SAAAC,GAAA,IAAAC,EAAApH,OAAAmH,GAAAD,EAAA,WAAA5G,KAAA8G,EAAAF,EAAAtB,KAAAtF,GAAA,OAAA4G,EAAAG,UAAA,SAAAnC,IAAA,KAAAgC,EAAAf,QAAA,KAAA7F,EAAA4G,EAAAI,MAAA,GAAAhH,KAAA8G,EAAA,OAAAlC,EAAA1E,MAAAF,EAAA4E,EAAAP,MAAA,EAAAO,EAAA,OAAAA,EAAAP,MAAA,EAAAO,IAAApF,EAAAgD,SAAAd,EAAA/B,UAAA,CAAAwG,YAAAzE,EAAA+D,MAAA,SAAAwB,GAAA,QAAAC,KAAA,OAAAtC,KAAA,OAAAX,KAAA,KAAAC,WAAAK,EAAA,KAAAF,MAAA,OAAAP,SAAA,UAAAlB,OAAA,YAAAd,SAAAyC,EAAA,KAAAc,WAAA1C,QAAA4C,IAAA0B,EAAA,QAAAb,KAAA,WAAAA,EAAAe,OAAA,IAAAvH,EAAAoC,KAAA,KAAAoE,KAAAR,OAAAQ,EAAAgB,MAAA,WAAAhB,QAAA7B,IAAA8C,KAAA,gBAAAhD,MAAA,MAAAiD,EAAA,KAAAjC,WAAA,GAAAG,WAAA,aAAA8B,EAAAvF,KAAA,MAAAuF,EAAAxF,IAAA,YAAAyF,MAAApD,kBAAA,SAAAqD,GAAA,QAAAnD,KAAA,MAAAmD,EAAA,IAAA/F,EAAA,cAAAgG,EAAAC,EAAAC,GAAA,OAAAtE,EAAAtB,KAAA,QAAAsB,EAAAvB,IAAA0F,EAAA/F,EAAAmD,KAAA8C,EAAAC,IAAAlG,EAAAmB,OAAA,OAAAnB,EAAAK,SAAAyC,KAAAoD,EAAA,QAAA7B,EAAA,KAAAT,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAA,KAAAK,WAAAS,GAAAzC,EAAA2B,EAAAQ,WAAA,YAAAR,EAAAC,OAAA,OAAAwC,EAAA,UAAAzC,EAAAC,QAAA,KAAAiC,KAAA,KAAAU,EAAAhI,EAAAoC,KAAAgD,EAAA,YAAA6C,EAAAjI,EAAAoC,KAAAgD,EAAA,iBAAA4C,GAAAC,EAAA,SAAAX,KAAAlC,EAAAE,SAAA,OAAAuC,EAAAzC,EAAAE,UAAA,WAAAgC,KAAAlC,EAAAG,WAAA,OAAAsC,EAAAzC,EAAAG,iBAAA,GAAAyC,GAAA,QAAAV,KAAAlC,EAAAE,SAAA,OAAAuC,EAAAzC,EAAAE,UAAA,YAAA2C,EAAA,UAAAjE,MAAA,kDAAAsD,KAAAlC,EAAAG,WAAA,OAAAsC,EAAAzC,EAAAG,gBAAAf,OAAA,SAAArC,EAAAD,GAAA,QAAAgE,EAAA,KAAAT,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAA,KAAAK,WAAAS,GAAA,GAAAd,EAAAC,QAAA,KAAAiC,MAAAtH,EAAAoC,KAAAgD,EAAA,oBAAAkC,KAAAlC,EAAAG,WAAA,KAAA2C,EAAA9C,EAAA,OAAA8C,IAAA,UAAA/F,GAAA,aAAAA,IAAA+F,EAAA7C,QAAAnD,MAAAgG,EAAA3C,aAAA2C,EAAA,UAAAzE,EAAAyE,IAAAtC,WAAA,UAAAnC,EAAAtB,OAAAsB,EAAAvB,MAAAgG,GAAA,KAAAlF,OAAA,YAAAgC,KAAAkD,EAAA3C,WAAAlD,GAAA,KAAA8F,SAAA1E,IAAA0E,SAAA,SAAA1E,EAAA+B,GAAA,aAAA/B,EAAAtB,KAAA,MAAAsB,EAAAvB,IAAA,gBAAAuB,EAAAtB,MAAA,aAAAsB,EAAAtB,KAAA,KAAA6C,KAAAvB,EAAAvB,IAAA,WAAAuB,EAAAtB,MAAA,KAAAwF,KAAA,KAAAzF,IAAAuB,EAAAvB,IAAA,KAAAc,OAAA,cAAAgC,KAAA,kBAAAvB,EAAAtB,MAAAqD,IAAA,KAAAR,KAAAQ,GAAAnD,GAAA+F,OAAA,SAAA7C,GAAA,QAAAW,EAAA,KAAAT,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAA,KAAAK,WAAAS,GAAA,GAAAd,EAAAG,eAAA,YAAA4C,SAAA/C,EAAAQ,WAAAR,EAAAI,UAAAG,EAAAP,GAAA/C,IAAAgG,MAAA,SAAAhD,GAAA,QAAAa,EAAA,KAAAT,WAAAQ,OAAA,EAAAC,GAAA,IAAAA,EAAA,KAAAd,EAAA,KAAAK,WAAAS,GAAA,GAAAd,EAAAC,WAAA,KAAA5B,EAAA2B,EAAAQ,WAAA,aAAAnC,EAAAtB,KAAA,KAAAmG,EAAA7E,EAAAvB,IAAAyD,EAAAP,GAAA,OAAAkD,GAAA,UAAAtE,MAAA,0BAAAuE,cAAA,SAAAzC,EAAAf,EAAAE,GAAA,YAAAf,SAAA,CAAAxD,SAAAkC,EAAAkD,GAAAf,aAAAE,WAAA,cAAAjC,SAAA,KAAAd,SAAAyC,GAAAtC,IAAAzC,EAqDA,IAAIwL,EAAmB,GACnBC,EAAoB,KAExB,SAASC,EAAeC,EAAmBC,GACzC,IACE,IAAIC,EAAO,IAAIC,KAAKH,GACpB,OAAOI,YAAOF,EAAMD,GACpB,MAAAI,GACA,OAAOL,GAKX,SAASM,EAAmBC,EAAaC,GACvC,IAAIC,EAAIC,OAAOC,WAAWJ,GAC1B,OAAKG,OAAOjG,MAAMgG,GAGTF,EAFAC,EAAiBC,EAAEG,QAAQ,GAMtC,SAASC,EAAiBN,EAAaO,GACrC,IAAIL,EAAIC,OAAOC,WAAWJ,GAC1B,OAAKG,OAAOjG,MAAMgG,GAGTF,EAFAE,EAAEG,QAAQE,GAMrB,IAqCMC,EAAoB,SAACC,GAEzB,OADAC,QAAQC,IAAI,YAAaF,GAEvBhC,IAAAC,cAAA,KACEkC,KAAI,GAAAtC,OAAKmC,EAAMI,OAAOC,OAAOC,QAAO,KAAAzC,OAClCmC,EAAMO,KAAKP,EAAMI,OAAOC,OAAkB,YAE5CzB,OAAO,UAENoB,EAAMjM,QAKb2I,IAAO8D,QAAU,CACfC,cAAe,uBACfC,aAAc,IACdC,QAAS,KAGX,IAmXeC,EAnXA,SAACZ,GACd,IAAMa,EAAkB,SAACb,GAKvB,OAAOhC,IAAAC,cAAA,UAAQK,QAJW,WACxB0B,EAAMc,QAAQd,EAAMjM,SAGsBiM,EAAMe,aAG9CC,EAAUC,iBAAoB,MAElC7D,EAQE4C,EARF5C,SACA8D,EAOElB,EAPFkB,IACAC,EAMEnB,EANFmB,WAAUC,EAMRpB,EALFqB,mBAAW,IAAAD,OAAGhJ,EAASgJ,EAAAE,EAKrBtB,EAJFuB,0BAAkB,IAAAD,EAAG,EAACA,EAAAE,EAIpBxB,EAHF3C,YAAI,IAAAmE,GAAOA,EACXC,EAEEzB,EAFFyB,MACAhE,EACEuC,EADFvC,OAEFiE,EAA4B1B,EAAtB2B,oBAAY,IAAAD,EAAG,GAAEA,EACfE,EAAYnE,EAAZmE,QACRC,EAA8BC,mBAAgB,IAAGC,EAAAC,YAAAH,EAAA,GAA1CI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,EAAkCL,oBAAS,GAAMM,EAAAJ,YAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,EAAkCT,mBAAS,IAAGU,EAAAR,YAAAO,EAAA,GAAvChG,EAASiG,EAAA,GAAEC,EAAYD,EAAA,GAC9BE,EAAoCZ,mBAAS,IAAGa,EAAAX,YAAAU,EAAA,GAAzClG,EAAUmG,EAAA,GAAElG,EAAakG,EAAA,GAEhCC,qBAAU,WACRC,IAAUC,iBACV7C,QAAQC,IAAI,eAAgB0B,GACxBA,EAAQlI,QACVkI,EAAQmB,KAAI,SAACC,GACX,IAAQC,EAA6CD,EAA7CC,aAAc5E,EAA+B2E,EAA/B3E,eAAgBnB,EAAe8F,EAAf9F,WACtCyE,EAAauB,WAAY/J,KAAK,CAC5BgK,MAAO1B,EACP2B,WAAYJ,EAAuB,eACnCK,MAAOL,EAAkB,UACzBM,OAAQN,EAAe,OACvBO,aAAc1C,EACd2C,mBAAoB,CAClBzC,WAAYiC,EAAoB,YAChClC,QAAQ,WAAD,IAAA2C,EAAA5G,YAAAzJ,IAAA8G,MAAE,SAAA4C,EAAgBqG,GAAU,IAAA5F,EAAA,OAAAnK,IAAAyB,MAAA,SAAAkI,GAAA,cAAAA,EAAAhC,KAAAgC,EAAAtE,MAAA,OAE+B,GAF/BsE,EAAAhC,KAAA,EAEzBwC,EAAcsB,EAAU6E,MAAK,SAAAC,GAAG,OAAIA,EAAIlC,IAAU0B,MACpDF,IAAgB5E,EAAc,CAAAtB,EAAAtE,KAAA,QAChC6J,GAAa,GACbG,EAAa,CACXpE,iBACAnB,WAAYA,EACZE,SAAUA,EACVC,KAAMA,EACNE,YAAaA,EACbE,OAAQA,IAEVhB,EAAcc,EAAY0F,IAS1BlG,EAAAtE,KAAA,oBAEImL,OAAOC,QAAQxF,GAAgB,CAADtB,EAAAtE,KAAA,gBAAAsE,EAAAtE,KAAA,GACduE,IAAMC,KAAKC,EAAUC,YAAA,CACrCC,SAAUA,EACVC,KAAMA,EACNC,aAAcC,GACXE,IACH,QALOV,EAAAjF,KAAA,QAOX4E,IAAOgB,QAAQ,YAAW,QAAAX,EAAAtE,KAAA,iBAAAsE,EAAAhC,KAAA,GAAAgC,EAAAY,GAAAZ,EAAA,SAG5Ba,MAAM,GAADC,OAAAd,EAAAY,KAAY,yBAAAZ,EAAA7B,UAAA4B,EAAA,mBAEpB,gBAAAgH,GAAA,OAAAL,EAAA3F,MAAA,KAAAC,YArCO,YA6ClB,IAAMgG,EAAe,eAAA3H,EAAAS,YAAAzJ,IAAA8G,MAAG,SAAA8J,IAAA,IAAAC,EAAA/C,EAAAgD,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAlR,IAAAyB,MAAA,SAAA0P,GAAA,cAAAA,EAAAxJ,KAAAwJ,EAAA9L,MAAA,cAAA8L,EAAA9L,KAAA,EACF+L,IAAW,OAApB,IACG,KADRP,EAAKM,EAAAzM,MACQ,CAAAyM,EAAA9L,KAAA,eAAA8L,EAAAtM,OAAA,UAAS,GAAK,OAYhB,OAXXiJ,EAAMF,EAAQyD,QAASvD,IACvBgD,EAAWD,EAAMlB,KAAI,SAAC2B,GAAS,OAAKA,EAAKjD,MACzC0C,EAAetF,EAAUkE,KAAI,SAAC2B,GAAS,OAAKA,EAAKjD,MACjD2C,EAAWH,EAAMU,QAAO,SAAChB,GAAQ,OAAKO,EAASU,SAASjB,EAAIlC,OAC5D4C,EAAWxF,EAAU8F,QAAO,SAAAhB,GAAG,OAAKO,EAASU,SAASjB,EAAIlC,OAC1D6C,EAAQL,EAAMU,QAAO,SAAChB,GAAQ,OAAMQ,EAAaS,SAASjB,EAAIlC,OACpEP,EAAI2D,sBAAsB,CACxBC,OAAQV,EACRW,OAAQV,EACRW,IAAKV,IAEPzF,EAAYoF,EAAKM,EAAAtM,OAAA,UACV,GAAI,yBAAAsM,EAAArJ,UAAA8I,OACZ,kBAhBoB,OAAA5H,EAAA0B,MAAA,KAAAC,YAAA,GAkBfyG,EAAS,eAAA5H,EAAAC,YAAAzJ,IAAA8G,MAAG,SAAA+K,IAAA,IAAAC,EAAAjB,EAAA,OAAA7Q,IAAAyB,MAAA,SAAAsQ,GAAA,cAAAA,EAAApK,KAAAoK,EAAA1M,MAAA,cAAA0M,EAAApK,KAAA,EAAAoK,EAAA1M,KAAA,EAEIuE,IAAMC,KAAKiE,EAAG/D,YAAA,CAC9BC,SAAUA,EACVC,KAAMA,GACHI,IACH,OAEmC,GAN/ByH,EAAGC,EAAArN,KAKHmM,EAAQmB,KAAKC,MAAMH,EAAI3E,MAC7BN,QAAQC,IAAI,kBAAmB+D,GACX,GAAhBA,EAAMqB,OAAe,CAAAH,EAAA1M,KAAA,QACsB,OAA7CiE,IAAOnF,MAAM,gBAADsG,OAAiBoG,EAAMsB,UAAUJ,EAAAlN,OAAA,UACtC,GAAK,cAAAkN,EAAAlN,OAAA,SAEPgM,GAAK,QAEiC,OAFjCkB,EAAApK,KAAA,GAAAoK,EAAAxH,GAAAwH,EAAA,SAEZzI,IAAOnF,MAAM,gBAADsG,OAAiBsH,EAAAxH,GAAM4H,UAAUJ,EAAAlN,OAAA,UACtC,GAAK,yBAAAkN,EAAAjK,UAAA+J,EAAA,mBAEf,kBAlBc,OAAArI,EAAAkB,MAAA,KAAAC,YAAA,GAoBf6E,qBAAU,WACR,GAAIvB,GAAeA,EAAc,EAAG,CAClC,IACImE,EADEC,EAAWC,YAAY3B,EAA+B,IAAd1C,GAU9C,OARIE,EAAqB,IACvBtB,QAAQC,IAAIqB,GACZiE,EAAUG,YAAW,WACnBC,cAAcH,GACdxF,QAAQC,IAAI,qCAAsCmB,KAC5B,IAArBE,IAELtB,QAAQ1I,MAAM,qBAAsByI,GAC7B,WACL4F,cAAcH,GACVD,GAASK,aAAaL,OAG7B,CAACxF,IAEgB8F,uBAAY,SAACC,GAC/B,IAAMC,EAAyB,GAC/BhF,EAAQyD,QAASwB,UAAUC,aAAc1P,SAAQ,SAAC4J,GAChD4F,EAAa7M,KAAKiH,EAAO+F,YAE3BnF,EAAQyD,QAASwB,UAAUG,gBAAgBJ,EAAcD,KACxD,IAEeD,uBAAY,WAC5B9E,EAAQyD,QAASvD,IAAImF,iBAAiB,CACpCC,gBAAiB,QAElB,IAZH,IAcMC,GAAcT,sBAAW,eAAAU,EAAA3J,YAAAzJ,IAAA8G,MAAC,SAAAuM,EAAOC,GAAsB,OAAAtT,IAAAyB,MAAA,SAAA8R,GAAA,cAAAA,EAAA5L,KAAA4L,EAAAlO,MAAA,OAC3DkN,WAAU9I,YAAAzJ,IAAA8G,MAAC,SAAA0M,IAAA,IAAA3C,EAAA,OAAA7Q,IAAAyB,MAAA,SAAAgS,GAAA,cAAAA,EAAA9L,KAAA8L,EAAApO,MAAA,cAAAoO,EAAA9L,KAAA,EAAA8L,EAAApO,KAAA,EAEa+L,IAAW,OACc,GADvCP,EAAK4C,EAAA/O,KACXmI,QAAQC,IAAI,0BAA2B+D,GAC1B,GAATA,EAAc,CAAA4C,EAAApO,KAAA,eAAAoO,EAAA5O,OAAA,iBAIlBiK,EAAW+B,GACXpF,EAAYoF,EAAK4C,EAAApO,KAAA,iBAAAoO,EAAA9L,KAAA,GAAA8L,EAAAlJ,GAAAkJ,EAAA,SAEjBnK,IAAOnF,MAAM,UAADsG,OAAWgJ,EAAAlJ,GAAM4H,UAAU,yBAAAsB,EAAA3L,UAAA0L,EAAA,mBAExC,KAAI,wBAAAD,EAAAzL,UAAAuL,OACR,gBAAAK,GAAA,OAAAN,EAAA1I,MAAA,KAAAC,YAf8B,GAe5B,IAEGgJ,GAAqBC,mBAAgB,WACzC,MAAO,CACLC,SAAU,OAEX,IAEGC,GAAWF,mBAAsB,WACrC,OAAO,SAACN,GACN,OAAOA,EAAOnG,KAAKkB,MAEpB,CAACA,IA0BE0F,IAxBUH,mBAEd,WACA,MAAO,CACLI,WAAY,CACV,CACEC,GAAI,UACJC,aAAc,UACdC,SAAU,UACVC,QAAS,UACTC,UAAW,sBAEb,CACEJ,GAAI,UACJC,aAAc,UACdC,SAAU,UACVC,QAAS,SACTC,UAAW,uBAGfC,iBAAkB,iBAEnB,IAEwB5B,uBAAY,SAAA6B,GACjB,MAAhB7I,IAAsBA,EAAe,IACzCA,EAAa6I,EAAMpH,KAAKkB,IAAUkG,EAAMpH,KACxCN,QAAQC,IAAI,uBAAwBpB,KACnC,KAEG8I,GAAS,eAAAC,EAAAhL,YAAAzJ,IAAA8G,MAAG,SAAA4N,IAAA,OAAA1U,IAAAyB,MAAA,SAAAkT,GAAA,cAAAA,EAAAhN,KAAAgN,EAAAtP,MAAA,cAAAsP,EAAAhN,KAAA,EAAAgN,EAAAtP,KAAA,EAEQsL,IAAiB,OAA1BgE,EAAAjQ,MACF4E,IAAOgB,QAAQ,oBAAmBqK,EAAAtP,KAAA,gBAAAsP,EAAAhN,KAAA,EAAAgN,EAAApK,GAAAoK,EAAA,SAE7CrL,IAAOnF,MAAM,mBAADsG,OAAoBkK,EAAApK,GAAM4H,UAAU,yBAAAwC,EAAA7M,UAAA4M,EAAA,kBAEnD,kBAPc,OAAAD,EAAA/J,MAAA,KAAAC,YAAA,GASTiK,GAAQ,eAAAC,EAAApL,YAAAzJ,IAAA8G,MAAG,SAAAgO,IAAA,IAAAhD,EAAA,OAAA9R,IAAAyB,MAAA,SAAAsT,GAAA,cAAAA,EAAApN,KAAAoN,EAAA1P,MAAA,UACK,MAAhBqG,EAAoB,CAAAqJ,EAAA1P,KAAA,QACgB,OAAtCiE,IAAO0L,QAAQ,wBAAuBD,EAAAlQ,OAAA,wBAAAkQ,EAAApN,KAAA,EAAAoN,EAAA1P,KAAA,EAIfuE,IAAMC,KAAKkE,EAAUhE,YAAA,CAC1CC,SAAUA,EACVC,KAAMA,EACNgL,SAAUvJ,GACPrB,IACH,OALIyH,EAAQiD,EAAArQ,KAMdgH,EAAe,KACXoG,EAAII,OAAQ5I,IAAOgB,QAAQ,0BAC1BhB,IAAOnF,MAAM,WAADsG,OAAYqH,EAAIK,UAAU4C,EAAA1P,KAAA,iBAAA0P,EAAApN,KAAA,GAAAoN,EAAAxK,GAAAwK,EAAA,SAE3CzL,IAAOnF,MAAM,WAADsG,OAAAsK,EAAAxK,KAAoB,yBAAAwK,EAAAjN,UAAAgN,EAAA,mBAEnC,kBAlBa,OAAAD,EAAAnK,MAAA,KAAAC,YAAA,GAoBRuK,GAActB,mBAAa,WAC/B,MAAO,CACLuB,iBAAkB,CAChB5D,OAAQ,qBACR6D,aAAc,CACZC,WAAY,SAACC,EAAkBC,GAAiB,OAC9CC,YAAW,IAAIzJ,KAAKwJ,GAAYD,MAGtCG,mBAAoB,CAClBlE,OAAQ,wBAEVmE,oBAAqB,CACnBC,eAAgB,SAACrC,GAAW,OAC1B3H,EAAc2H,EAAO3S,MAAO,sBAEhCiV,qBAAsB,CACpBD,eAAgB,SAACrC,GAAW,OAC1B3H,EACE2H,EAAO3S,MACP2S,EAAOtG,OAAOC,OAAO4I,wBAG3BC,oBAAqB,CACnBH,eAAgB,SAACrC,GAAW,IAAAyC,EAAA,OAC1BtJ,EAAgB6G,EAAO3S,MAAqC,QAAhCoV,EAAEzC,EAAOtG,OAAOC,OAAOP,iBAAS,IAAAqJ,IAAI,KAEpEC,qBAAsB,CACpBL,eAAgB,SAACrC,GAAW,OAC1BpH,EACEoH,EAAO3S,MACP2S,EAAOtG,OAAOC,OAAOgJ,0BAG3BC,gBAAiB,CACfP,eAAgB,SAACrC,GAAW,OAAK6C,mBAAS7C,EAAO3S,OAAOyV,UAAS,KAEnEC,mBAAoB,CAClBV,eAAgB,SAACrC,GAAW,OAC1BhH,OAAOgH,EAAO3S,OAAO2V,eAAe,QAAS,CAC3CC,sBAAuB,MAG7BC,wBAAyB,CAGvBrG,aAAcxD,EACdyD,mBAAoB,CAClBlD,QAAS,0BAId,IAeH,OACEtC,IAAAC,cAAAD,IAAA6L,SAAA,KACE7L,IAAAC,cAAC9B,EAAO,CACNE,OAAQgG,EACR/F,WAAY,kBAAMgG,GAAa,IAC/B/F,UAAWA,EACXC,WAAYA,EACZC,cAAeA,EACfC,OAAQA,MAEVsB,IAAAC,cAAA,OACEE,MAAO,CAAE2L,cAAe,MAAOC,OAAQ,OAAQ1G,MAAO,OACtDgE,GAAG,gBAEcjP,GAAfiJ,GAA2C,GAAfA,IAC5BrD,IAAAC,cAAA,OAAKE,MAAO,CAAEC,QAAS,SACrBJ,IAAAC,cAAA,OAAKE,MAAO,CAAE6L,OAAQ,uBACpBhM,IAAAC,cAAA,UAAQC,UAAU,kBAAkBI,QAASsJ,IAAW,YAI1D5J,IAAAC,cAAA,OAAKE,MAAO,CAAE6L,OAAQ,uBACpBhM,IAAAC,cAAA,UAAQC,UAAU,kBAAkBI,QAAS0J,IAAU,YAM7DhK,IAAAC,cAAA,OACEC,UAAWyD,EAAasI,OAAS,uBACjC9L,MAAO,CACLkF,MAAO,OACP0G,OAAQtM,EAAoB,YAAIA,EAAoB,YAAI,SAG1DO,IAAAC,cAACiM,cAAW,CACVC,IAAKnJ,EACLiB,QAASA,EAETmI,YA/CU,SAAC1D,GAEnB,OADAzG,QAAQC,IAAI,kBAAmBwG,GACxB,CACL2D,WAAY3D,EAAOnG,KAAgB,UACnC+J,MAAO5D,EAAOnG,KAAqB,iBA4C7BgK,SAAU,CAAEC,SAAU,GAAIC,QAAS,GACnCC,aAAc,GACdC,UAAW,GACXpE,YAAaA,GACbQ,mBAAoBA,GAEpB6D,aAAa,EACbC,yBAAyB,EACzB3D,SAAUA,GACV4D,YAAanJ,EACbwF,mBAAoBA,GACpBmB,YAAaA,SCtdVyC,eAxBF,SAAC/K,GAEZ,IAAAgL,EAA+FhL,EAAMiL,KAA7F7N,EAAQ4N,EAAR5N,SAAU8D,EAAG8J,EAAH9J,IAAKC,EAAU6J,EAAV7J,WAAYE,EAAW2J,EAAX3J,YAAaE,EAAkByJ,EAAlBzJ,mBAAoB2J,EAAgBF,EAAhBE,iBAAkB7N,EAAI2N,EAAJ3N,KACtF8N,EAAsCnL,EAAMiL,KAApCtJ,EAAYwJ,EAAZxJ,aAAYyJ,EAAAD,EAAE1N,cAAM,IAAA2N,EAAG,GAAEA,EACzB3J,EAAgBE,EAAhBF,MAAgBE,EAAVsI,MAEd,OADAhK,QAAQC,IAAI,WAAYyB,GAEtB3D,IAAAC,cAAA,WACED,IAAAC,cAACoN,EAAM,CACLjO,SAAUA,EACV8D,IAAKA,EACLC,WAAYA,EACZE,YAAaA,EACbE,mBAAoBA,EACpB2J,iBAAkBA,EAClB7N,KAAMA,EACNsE,aAAcA,EACdF,MAAOA,EACPhE,OAAQA,QCzBhB6N,IAASC,OACPvN,IAAAC,cAACD,IAAMwN,WAAU,KACfxN,IAAAC,cAACwN,EAAI,OAEPC,SAASC,eAAe,U","file":"static/js/main.a4b0bddf.chunk.js","sourcesContent":["import React from \"react\"\r\nimport ReactModal from \"react-modal\"\r\nimport \"./modal.css\"\r\nimport axios from \"axios\"\r\n\r\nconst modalStyle = {\r\n  content: {\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    right: \"auto\",\r\n    bottom: \"auto\",\r\n    marginRight: \"-50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    backgroundColor: \"yellow\",\r\n  },\r\n}\r\nReactModal.setAppElement(\"#root\")\r\n\r\nconst MyModal = ({\r\n  isOpen,\r\n  closeModal,\r\n  modalData,\r\n  promptText,\r\n  setPromptText,\r\n  toastr,\r\n}) => {\r\n  const handleOk = async () => {\r\n    try {\r\n      const res = await axios.post(modalData.button_api, {\r\n        username: modalData.username,\r\n        prod: modalData.prod,\r\n        selected_row: modalData.selectedRow,\r\n        default_value: promptText,\r\n        ...modalData.kwargs,\r\n      })\r\n      toastr.success(\"Success\")\r\n      closeModal()\r\n    } catch (error) {\r\n      alert(`${error}`)\r\n    }\r\n  }\r\n  return (\r\n    // <ReactModal\r\n    //   isOpen={isOpen}\r\n    //   onAfterOpen={afterOpenModal}\r\n    //   onRequestClose={closeModal}\r\n    //   style={modalStyle}\r\n    //   contentLabel=\"Example Modal\"\r\n    // >\r\n    <div className=\"my-modal\" style={{ display: isOpen ? \"block\" : \"none\" }}>\r\n      <div className=\"my-modal-content\">\r\n        <div className=\"modal-header px-4\">\r\n          <h4>{modalData.prompt_message}</h4>\r\n          <span className=\"close\" onClick={closeModal}>\r\n            &times;\r\n          </span>\r\n        </div>\r\n        <div className=\"modal-body p-2\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            rows={4}\r\n            cols={50}\r\n            type=\"text\"\r\n            value={promptText}\r\n            placeholder=\"Please input text\"\r\n            onChange={(e) => setPromptText(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"modal-footer\">\r\n          <button type=\"button\" className=\"btn btn-primary\" onClick={handleOk}>\r\n            Ok\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={closeModal}\r\n          >\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    // </ReactModal>\r\n  )\r\n}\r\n\r\nexport default MyModal\r\n","import React, {\r\n  useState,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useCallback,\r\n  StrictMode,\r\n} from 'react'\r\nimport { AgGridReact } from 'ag-grid-react'\r\nimport toastr from 'toastr'\r\nimport 'toastr/build/toastr.min.css'\r\nimport 'ag-grid-community/styles/ag-grid.css'\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css'\r\nimport 'ag-grid-community/styles/ag-theme-balham.css'\r\nimport 'ag-grid-community/styles/ag-theme-material.css'\r\nimport Modal from 'react-modal'\r\nimport 'ag-grid-enterprise'\r\nimport { parseISO, compareAsc } from 'date-fns'\r\nimport { format } from 'date-fns-tz'\r\nimport { duration } from 'moment'\r\nimport './styles.css'\r\nimport axios from 'axios'\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from 'streamlit-component-lib'\r\nimport {\r\n  ColDef,\r\n  ColGroupDef,\r\n  ColumnResizedEvent,\r\n  GetRowIdFunc,\r\n  GetRowIdParams,\r\n  Grid,\r\n  GridOptions,\r\n  GridReadyEvent,\r\n  SideBarDef,\r\n  ValueParserParams,\r\n} from 'ag-grid-community'\r\nimport MyModal from './components/Modal'\r\n\r\ntype Props = {\r\n  username: string\r\n  api: string\r\n  api_update: string\r\n  refresh_sec?: number\r\n  refresh_cutoff_sec?: number\r\n  gridoption_build?: any\r\n  prod?: boolean\r\n  grid_options?: any\r\n  index: string\r\n  kwargs: any\r\n}\r\n\r\nlet g_rowdata: any[] = []\r\nlet g_newRowData: any = null\r\n\r\nfunction dateFormatter (isoString: string, formaterString: string): String {\r\n  try {\r\n    let date = new Date(isoString)\r\n    return format(date, formaterString)\r\n  } catch {\r\n    return isoString\r\n  } finally {\r\n  }\r\n}\r\n\r\nfunction currencyFormatter (number: any, currencySymbol: string): String {\r\n  let n = Number.parseFloat(number)\r\n  if (!Number.isNaN(n)) {\r\n    return currencySymbol + n.toFixed(2)\r\n  } else {\r\n    return number\r\n  }\r\n}\r\n\r\nfunction numberFormatter (number: any, precision: number): String {\r\n  let n = Number.parseFloat(number)\r\n  if (!Number.isNaN(n)) {\r\n    return n.toFixed(precision)\r\n  } else {\r\n    return number\r\n  }\r\n}\r\n\r\nconst columnFormaters = {\r\n  columnTypes: {\r\n    dateColumnFilter: {\r\n      filter: 'agDateColumnFilter',\r\n      filterParams: {\r\n        comparator: (filterValue: any, cellValue: string) =>\r\n          compareAsc(parseISO(cellValue), filterValue),\r\n      },\r\n    },\r\n    numberColumnFilter: {\r\n      filter: 'agNumberColumnFilter',\r\n    },\r\n    shortDateTimeFormat: {\r\n      valueFormatter: (params: any) =>\r\n        dateFormatter(params.value, 'dd/MM/yyyy HH:mm'),\r\n    },\r\n    customDateTimeFormat: {\r\n      valueFormatter: (params: any) =>\r\n        dateFormatter(params.value, params.column.colDef.custom_format_string),\r\n    },\r\n    customNumericFormat: {\r\n      valueFormatter: (params: any) =>\r\n        numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n    },\r\n    customCurrencyFormat: {\r\n      valueFormatter: (params: any) =>\r\n        currencyFormatter(\r\n          params.value,\r\n          params.column.colDef.custom_currency_symbol\r\n        ),\r\n    },\r\n    timedeltaFormat: {\r\n      valueFormatter: (params: any) => duration(params.value).humanize(true),\r\n    },\r\n  },\r\n}\r\n\r\nconst HyperlinkRenderer = (props: any) => {\r\n  console.log('hyperlink', props)\r\n  return (\r\n    <a\r\n      href={`${props.column.colDef.baseURL}/${\r\n        props.data[props.column.colDef['linkField']]\r\n      }`}\r\n      target='_blank'\r\n    >\r\n      {props.value}\r\n    </a>\r\n  )\r\n}\r\n\r\ntoastr.options = {\r\n  positionClass: 'toast-top-full-width',\r\n  hideDuration: 300,\r\n  timeOut: 3000,\r\n}\r\n\r\nconst AgGrid = (props: Props) => {\r\n  const BtnCellRenderer = (props: any) => {\r\n    const btnClickedHandler = () => {\r\n      props.clicked(props.value)\r\n    }\r\n\r\n    return <button onClick={btnClickedHandler}>{props.buttonName}</button>\r\n  }\r\n\r\n  const gridRef = useRef<AgGridReact>(null)\r\n  const {\r\n    username,\r\n    api,\r\n    api_update,\r\n    refresh_sec = undefined,\r\n    refresh_cutoff_sec = 0,\r\n    prod = true,\r\n    index,\r\n    kwargs,\r\n  } = props\r\n  let { grid_options = {} } = props\r\n  const { buttons } = kwargs\r\n  const [rowData, setRowData] = useState<any[]>([])\r\n  const [modalShow, setModalshow] = useState(false)\r\n  const [modalData, setModalData] = useState({})\r\n  const [promptText, setPromptText] = useState('')\r\n\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight()\r\n    console.log('buttons :>> ', buttons)\r\n    if (buttons.length) {\r\n      buttons.map((button: any) => {\r\n        const { prompt_field, prompt_message, button_api } = button\r\n        grid_options.columnDefs!.push({\r\n          field: index,\r\n          headerName: button['col_headername'],\r\n          width: button['col_width'],\r\n          pinned: button['pinned'],\r\n          cellRenderer: BtnCellRenderer,\r\n          cellRendererParams: {\r\n            buttonName: button['button_name'],\r\n            clicked: async function (field: any) {\r\n              try {\r\n                const selectedRow = g_rowdata.find(row => row[index] == field)\r\n                if (prompt_field && prompt_message) {\r\n                  setModalshow(true)\r\n                  setModalData({\r\n                    prompt_message,\r\n                    button_api: button_api,\r\n                    username: username,\r\n                    prod: prod,\r\n                    selectedRow: selectedRow,\r\n                    kwargs: kwargs,\r\n                  })\r\n                  setPromptText(selectedRow[prompt_field])\r\n                  // const num = prompt(prompt_message, selectedRow[prompt_field]);\r\n                  // if (num == null) return;\r\n                  // const res = await axios.post(button_api, {\r\n                  //   username: username,\r\n                  //   prod: prod,\r\n                  //   selected_row: selectedRow,\r\n                  //   default_value: num,\r\n                  //   ...kwargs,\r\n                  // })\r\n                } else {\r\n                  if (window.confirm(prompt_message)) {\r\n                    const res = await axios.post(button_api, {\r\n                      username: username,\r\n                      prod: prod,\r\n                      selected_row: selectedRow,\r\n                      ...kwargs,\r\n                    })\r\n                  }\r\n                  toastr.success('Success!')\r\n                }\r\n              } catch (error) {\r\n                alert(`${error}`)\r\n              }\r\n            },\r\n          },\r\n        })\r\n      })\r\n    }\r\n    // parseGridoptions()\r\n  })\r\n\r\n  const fetchAndSetData = async () => {\r\n    const array = await fetchData()\r\n    if (array === false) return false\r\n    const api = gridRef.current!.api\r\n    const id_array = array.map((item: any) => item[index])\r\n    const old_id_array = g_rowdata.map((item: any) => item[index])\r\n    const toUpdate = array.filter((row: any) => id_array.includes(row[index]))\r\n    const toRemove = g_rowdata.filter(row => !id_array.includes(row[index]))\r\n    const toAdd = array.filter((row: any) => !old_id_array.includes(row[index]))\r\n    api.applyTransactionAsync({\r\n      update: toUpdate,\r\n      remove: toRemove,\r\n      add: toAdd,\r\n    })\r\n    g_rowdata = array\r\n    return true\r\n  }\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const res = await axios.post(api, {\r\n        username: username,\r\n        prod: prod,\r\n        ...kwargs,\r\n      })\r\n      const array = JSON.parse(res.data)\r\n      console.log('table data :>> ', array)\r\n      if (array.status == false) {\r\n        toastr.error(`Fetch Error: ${array.message}`)\r\n        return false\r\n      }\r\n      return array\r\n    } catch (error: any) {\r\n      toastr.error(`Fetch Error: ${error.message}`)\r\n      return false\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (refresh_sec && refresh_sec > 0) {\r\n      const interval = setInterval(fetchAndSetData, refresh_sec * 1000)\r\n      let timeout: NodeJS.Timeout\r\n      if (refresh_cutoff_sec > 0) {\r\n        console.log(refresh_cutoff_sec)\r\n        timeout = setTimeout(() => {\r\n          clearInterval(interval)\r\n          console.log('Fetching data ended, refresh rate:', refresh_sec)\r\n        }, refresh_cutoff_sec * 1000)\r\n      }\r\n      console.error('rendered==========', props)\r\n      return () => {\r\n        clearInterval(interval)\r\n        if (timeout) clearTimeout(timeout)\r\n      }\r\n    }\r\n  }, [props])\r\n\r\n  const autoSizeAll = useCallback((skipHeader: boolean) => {\r\n    const allColumnIds: string[] = []\r\n    gridRef.current!.columnApi.getColumns()!.forEach((column: any) => {\r\n      allColumnIds.push(column.getId())\r\n    })\r\n    gridRef.current!.columnApi.autoSizeColumns(allColumnIds, skipHeader)\r\n  }, [])\r\n\r\n  const sizeToFit = useCallback(() => {\r\n    gridRef.current!.api.sizeColumnsToFit({\r\n      defaultMinWidth: 100,\r\n    })\r\n  }, [])\r\n\r\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\r\n    setTimeout(async () => {\r\n      try {\r\n        const array = await fetchData()\r\n        console.log('AAAAAAAAAAAAAAAAAAAAAAA', array)\r\n        if (array == false) {\r\n          // toastr.error(`Error: ${array.message}`)\r\n          return\r\n        }\r\n        setRowData(array)\r\n        g_rowdata = array\r\n      } catch (error: any) {\r\n        toastr.error(`Error: ${error.message}`)\r\n      }\r\n    }, 100)\r\n  }, [])\r\n\r\n  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n    return {\r\n      minWidth: 200,\r\n    }\r\n  }, [])\r\n\r\n  const getRowId = useMemo<GetRowIdFunc>(() => {\r\n    return (params: GetRowIdParams) => {\r\n      return params.data[index]\r\n    }\r\n  }, [index])\r\n\r\n  const sideBar = useMemo<\r\n    SideBarDef | string | string[] | boolean | null\r\n  >(() => {\r\n    return {\r\n      toolPanels: [\r\n        {\r\n          id: 'columns',\r\n          labelDefault: 'Columns',\r\n          labelKey: 'columns',\r\n          iconKey: 'columns',\r\n          toolPanel: 'agColumnsToolPanel',\r\n        },\r\n        {\r\n          id: 'filters',\r\n          labelDefault: 'Filters',\r\n          labelKey: 'filters',\r\n          iconKey: 'filter',\r\n          toolPanel: 'agFiltersToolPanel',\r\n        },\r\n      ],\r\n      defaultToolPanel: 'customStats',\r\n    }\r\n  }, [])\r\n\r\n  const onCellValueChanged = useCallback(event => {\r\n    if (g_newRowData == null) g_newRowData = {}\r\n    g_newRowData[event.data[index]] = event.data\r\n    console.log('Data after change is', g_newRowData)\r\n  }, [])\r\n\r\n  const onRefresh = async () => {\r\n    try {\r\n      const success = await fetchAndSetData()\r\n      success && toastr.success('Refresh success!')\r\n    } catch (error: any) {\r\n      toastr.error(`Refresh Failed! ${error.message}`)\r\n    }\r\n  }\r\n\r\n  const onUpdate = async () => {\r\n    if (g_newRowData == null) {\r\n      toastr.warning(`No changes to update`)\r\n      return\r\n    }\r\n    try {\r\n      const res: any = await axios.post(api_update, {\r\n        username: username,\r\n        prod: prod,\r\n        new_data: g_newRowData,\r\n        ...kwargs,\r\n      })\r\n      g_newRowData = null\r\n      if (res.status) toastr.success(`Successfully Updated! `)\r\n      else toastr.error(`Failed! ${res.message}`)\r\n    } catch (error) {\r\n      toastr.error(`Failed! ${error}`)\r\n    }\r\n  }\r\n\r\n  const columnTypes = useMemo<any>(() => {\r\n    return {\r\n      dateColumnFilter: {\r\n        filter: 'agDateColumnFilter',\r\n        filterParams: {\r\n          comparator: (filterValue: any, cellValue: string) =>\r\n            compareAsc(new Date(cellValue), filterValue),\r\n        },\r\n      },\r\n      numberColumnFilter: {\r\n        filter: 'agNumberColumnFilter',\r\n      },\r\n      shortDateTimeFormat: {\r\n        valueFormatter: (params: any) =>\r\n          dateFormatter(params.value, 'dd/MM/yyyy HH:mm'),\r\n      },\r\n      customDateTimeFormat: {\r\n        valueFormatter: (params: any) =>\r\n          dateFormatter(\r\n            params.value,\r\n            params.column.colDef.custom_format_string\r\n          ),\r\n      },\r\n      customNumericFormat: {\r\n        valueFormatter: (params: any) =>\r\n          numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n      },\r\n      customCurrencyFormat: {\r\n        valueFormatter: (params: any) =>\r\n          currencyFormatter(\r\n            params.value,\r\n            params.column.colDef.custom_currency_symbol\r\n          ),\r\n      },\r\n      timedeltaFormat: {\r\n        valueFormatter: (params: any) => duration(params.value).humanize(true),\r\n      },\r\n      customNumberFormat: {\r\n        valueFormatter: (params: any) =>\r\n          Number(params.value).toLocaleString('en-US', {\r\n            minimumFractionDigits: 0,\r\n          }),\r\n      },\r\n      customHyperlinkRenderer: {\r\n        // valueGetter: (params: any) =>\r\n        //   params.column.colDef.baseURL + params.data.honey,\r\n        cellRenderer: HyperlinkRenderer,\r\n        cellRendererParams: {\r\n          baseURL: 'URLSearchParams.co',\r\n        },\r\n      },\r\n    }\r\n  }, [])\r\n\r\n  const onClick = () => {\r\n    toastr.clear()\r\n    setTimeout(() => toastr.success(`Settings updated `), 300)\r\n  }\r\n\r\n  const getRowStyle = (params: any) => {\r\n    console.log('AAAAAAAAAA :>> ', params)\r\n    return {\r\n      background: params.data['color_row'],\r\n      color: params.data['color_row_text'],\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MyModal\r\n        isOpen={modalShow}\r\n        closeModal={() => setModalshow(false)}\r\n        modalData={modalData}\r\n        promptText={promptText}\r\n        setPromptText={setPromptText}\r\n        toastr={toastr}\r\n      ></MyModal>\r\n      <div\r\n        style={{ flexDirection: 'row', height: '100%', width: '100' }}\r\n        id='myGrid'\r\n      >\r\n        {(refresh_sec == undefined || refresh_sec == 0) && (\r\n          <div style={{ display: 'flex' }}>\r\n            <div style={{ margin: '10px 10px 10px 2px' }}>\r\n              <button className='btn btn-warning' onClick={onRefresh}>\r\n                Refresh\r\n              </button>\r\n            </div>\r\n            <div style={{ margin: '10px 10px 10px 2px' }}>\r\n              <button className='btn btn-success' onClick={onUpdate}>\r\n                Update\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div\r\n          className={grid_options.theme || 'ag-theme-alpine-dark'}\r\n          style={{\r\n            width: '100%',\r\n            height: kwargs['grid_height'] ? kwargs['grid_height'] : '100%',\r\n          }}\r\n        >\r\n          <AgGridReact\r\n            ref={gridRef}\r\n            rowData={rowData}\r\n            // defaultColDef={defaultColDef}\r\n            getRowStyle={getRowStyle}\r\n            rowStyle={{ fontSize: 12, padding: 0 }}\r\n            headerHeight={30}\r\n            rowHeight={30}\r\n            onGridReady={onGridReady}\r\n            autoGroupColumnDef={autoGroupColumnDef}\r\n            // sideBar={sideBar}\r\n            animateRows={true}\r\n            suppressAggFuncInHeader={true}\r\n            getRowId={getRowId}\r\n            gridOptions={grid_options}\r\n            onCellValueChanged={onCellValueChanged}\r\n            columnTypes={columnTypes}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AgGrid\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\n// import 'ag-grid-community/styles/ag-theme-alpine.css';\r\nimport 'ag-grid-community/styles/ag-theme-balham.css';\r\nimport Aggrid from \"./Aggrid\";\r\n\r\nconst Main = (props: ComponentProps) => {\r\n\r\n  const { username, api, api_update, refresh_sec, refresh_cutoff_sec, gridoption_build, prod } = props.args;\r\n  const { grid_options, kwargs = {} } = props.args;\r\n  const { index,theme } = grid_options;\r\n  console.log(\"AAAAAAAA\", grid_options);\r\n  return (\r\n    <div >\r\n      <Aggrid\r\n        username={username}\r\n        api={api}\r\n        api_update={api_update}\r\n        refresh_sec={refresh_sec}\r\n        refresh_cutoff_sec={refresh_cutoff_sec}\r\n        gridoption_build={gridoption_build}\r\n        prod={prod}\r\n        grid_options={grid_options}\r\n        index={index}\r\n        kwargs={kwargs}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withStreamlitConnection(Main);\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport Main from \"./Main\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Main />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}