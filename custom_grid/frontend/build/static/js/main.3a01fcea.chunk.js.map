{"version":3,"sources":["Aggrid.tsx","Main.tsx","index.tsx"],"names":["BtnCellRenderer","props","onClick","clicked","value","AgGrid","defaultColumnDefs","field","pinned","width","headerName","cellRenderer","aggFunc","resizable","cellRendererParams","a","postRowId","res","alert","data","gridRef","useRef","username","api","refresh_sec","refresh_cutoff_sec","prod","useState","rowData","setRowData","columnDefs","useEffect","Streamlit","setFrameHeight","addIds","array","map","item","idx","fetchAndSetData","fetchData","idAdded","current","axios","get","params","JSON","parse","id","post","timeout","interval","setInterval","console","log","setTimeout","clearInterval","error","clearTimeout","useCallback","skipHeader","allColumnIds","columnApi","getColumns","forEach","column","push","getId","autoSizeColumns","sizeColumnsToFit","defaultMinWidth","onGridReady","autoGroupColumnDef","useMemo","minWidth","defaultColDef","sortable","sideBar","toolPanels","labelDefault","labelKey","iconKey","toolPanel","defaultToolPanel","className","ref","rowStyle","fontSize","padding","headerHeight","rowHeight","domLayout","enableCellChangeFlash","animateRows","suppressAggFuncInHeader","withStreamlitConnection","args","gridoption_build","Aggrid","engine","Styletron","ReactDOM","render","StrictMode","theme","LightTheme","document","getElementById"],"mappings":"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","file":"static/js/main.3a01fcea.chunk.js","sourcesContent":["import React, { useState, useEffect, useMemo, useRef, useCallback, StrictMode } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\r\nimport './styles.css';\r\nimport axios from \"axios\"\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport { IOlympicData } from './interfaces';\r\nimport {\r\n  ColDef,\r\n  ColGroupDef,\r\n  ColumnResizedEvent,\r\n  GetRowIdFunc,\r\n  GetRowIdParams,\r\n  Grid,\r\n  GridOptions,\r\n  GridReadyEvent,\r\n  SideBarDef,\r\n  ValueParserParams,\r\n} from 'ag-grid-community';\r\n\r\ntype Props = {\r\n  username: string,\r\n  api: string,\r\n  refresh_sec?: number,\r\n  refresh_cutoff_sec?: number,\r\n  gridoption_build?: any,\r\n  prod?: boolean,\r\n}\r\n\r\nconst BtnCellRenderer = (props: any) => {\r\n  const btnClickedHandler = () => {\r\n    props.clicked(props.value);\r\n  }\r\n\r\n  return (\r\n    <button onClick={btnClickedHandler}>Sell</button>\r\n  )\r\n}\r\n\r\nconst defaultWidth = 100;\r\n\r\n\r\n\r\nlet g_rowdata: any[] = [];\r\n\r\nconst AgGrid = (props: Props) => {\r\n  const defaultColumnDefs: ColDef[] = [\r\n    { field: \"idx\", pinned: \"left\", width: 60 },\r\n    { field: 'honey', headerName: 'honey', width: defaultWidth, pinned: 'left', cellRenderer: 'agAnimateShowChangeCellRenderer', aggFunc: \"sum\" },\r\n    { field: '$honey', headerName: '$honey', width: defaultWidth, resizable: true },\r\n    { field: 'symbol', headerName: 'Symbol', width: defaultWidth, resizable: true },\r\n    { field: 'ticker_time_frame', headerName: 'ticker_time_frame', width: defaultWidth, resizable: true },\r\n    { field: 'trigname', headerName: 'trigname', width: defaultWidth, resizable: true },\r\n    { field: 'datetime', headerName: 'datetime', width: defaultWidth, resizable: true },\r\n    { field: 'honey_time_in_profit', headerName: 'honey_time_in_profit', width: defaultWidth, resizable: true },\r\n    { field: 'filled_qty', headerName: 'filled_qty', width: defaultWidth, resizable: true },\r\n    { field: 'qty_available', headerName: 'qty_available', width: defaultWidth, resizable: true },\r\n    { field: 'filled_avg_price', headerName: 'filled_avg_price', width: defaultWidth, resizable: true },\r\n    { field: 'limit_price', headerName: 'limit_price', width: defaultWidth, resizable: true },\r\n    { field: 'cost_basis', headerName: 'cost_basis', width: defaultWidth, resizable: true },\r\n    { field: 'wave_amo', headerName: 'wave_amo', width: defaultWidth, resizable: true },\r\n    { field: 'status_q', headerName: 'status_q', width: defaultWidth, resizable: true },\r\n    { field: 'client_order_id', headerName: 'client_order_id', width: defaultWidth, resizable: true },\r\n    { field: 'origin_wave', headerName: 'origin_wave', width: defaultWidth, resizable: true },\r\n    { field: 'wave_at_creation', headerName: 'wave_at_creation', width: defaultWidth, resizable: true },\r\n    { field: 'sell_reason', headerName: 'sell_reason', width: defaultWidth, resizable: true },\r\n    { field: 'exit_order_link', headerName: 'exit_order_link', width: defaultWidth, resizable: true },\r\n    { field: 'queen_order_state', headerName: 'queen_order_state', width: defaultWidth, resizable: true },\r\n    { field: 'order_rules', headerName: 'order_rules', width: defaultWidth, resizable: true },\r\n    { field: 'order_rules.sellout', headerName: 'order_rules.sellout', width: 150, resizable: true },\r\n    { field: 'order_trig_sell_stop', headerName: 'order_trig_sell_stop', width: defaultWidth, resizable: true },\r\n    { field: 'side', headerName: 'side', width: 70, pinned: 'right', resizable: true },\r\n    {\r\n      field: \"client_order_id\",\r\n      headerName: 'action',\r\n      width: 80,\r\n      cellRenderer: BtnCellRenderer,\r\n      cellRendererParams: {\r\n        clicked: async function (field: any) {\r\n          try {\r\n            const res: any = await postRowId(field)\r\n            alert(`id : ${field}, result: ${res.data}`);\r\n\r\n          } catch (error) {\r\n            alert(\"failed!\");\r\n\r\n          }\r\n        },\r\n      },\r\n      pinned: 'right',\r\n    }\r\n  ];\r\n  const gridRef = useRef<any>();\r\n  const { username, api, refresh_sec = 1, refresh_cutoff_sec = 0, prod = true } = props;\r\n  const [rowData, setRowData] = useState<any[]>([]);\r\n  const [columnDefs, setColumnDefs] = useState<(ColDef | ColGroupDef)[]>(defaultColumnDefs)\r\n  useEffect(() => Streamlit.setFrameHeight());\r\n\r\n  const addIds = (array: any[]) => {\r\n    return array.map((item, idx) => {\r\n      return { ...item, idx }\r\n    })\r\n  }\r\n\r\n  const fetchAndSetData = async () => {\r\n    const array = await fetchData();\r\n    const idAdded = addIds(array);\r\n    gridRef.current!.api.setRowData(idAdded);\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    const res = await axios.get(api, {\r\n      params: {\r\n        username: username,\r\n        prod: prod,\r\n      }\r\n    });\r\n    const array = JSON.parse(res.data);\r\n    const idAdded = addIds(array)\r\n    g_rowdata = idAdded;\r\n    return idAdded;\r\n  };\r\n\r\n  const postRowId = async (id: any) => {\r\n    const res = await axios.post(api, {\r\n      username: username,\r\n      prod: prod,\r\n      id: id,\r\n    });\r\n    return res;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(fetchAndSetData, refresh_sec * 1000);\r\n    let timeout: NodeJS.Timeout;\r\n    if (refresh_cutoff_sec > 0) {\r\n      console.log(refresh_cutoff_sec);\r\n      timeout = setTimeout(() => {\r\n        clearInterval(interval);\r\n        console.log(\"Fetching data ended, refresh rate:\", refresh_sec);\r\n      }, refresh_cutoff_sec * 1000);\r\n    }\r\n    console.error(\"rendered==========\", props);\r\n    return () => {\r\n      clearInterval(interval);\r\n      if (timeout) clearTimeout(timeout);\r\n    }\r\n  }, [props]);\r\n\r\n  const autoSizeAll = useCallback((skipHeader: boolean) => {\r\n    const allColumnIds: string[] = [];\r\n    gridRef.current!.columnApi.getColumns()!.forEach((column: any) => {\r\n      allColumnIds.push(column.getId());\r\n    });\r\n    gridRef.current!.columnApi.autoSizeColumns(allColumnIds, skipHeader);\r\n  }, []);\r\n\r\n  const sizeToFit = useCallback(() => {\r\n    gridRef.current.api.sizeColumnsToFit({\r\n      defaultMinWidth: 100,\r\n    });\r\n  }, []);\r\n\r\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\r\n    setTimeout(async () => {\r\n      const data = await fetchData();\r\n      setRowData(data);\r\n    }, 100);\r\n  }, []);\r\n\r\n  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n    return {\r\n      minWidth: 200,\r\n    };\r\n  }, []);\r\n\r\n  const defaultColDef = useMemo<ColDef>(() => {\r\n    return {\r\n      width: 120,\r\n      sortable: true,\r\n      resizable: true,\r\n    };\r\n  }, []);\r\n\r\n  const getRowId = useMemo<GetRowIdFunc>(() => {\r\n    return (params: GetRowIdParams<any>) => params.data.id;\r\n  }, []);\r\n\r\n  const sideBar = useMemo<\r\n    SideBarDef | string | string[] | boolean | null\r\n  >(() => {\r\n    return {\r\n      toolPanels: [\r\n        {\r\n          id: 'columns',\r\n          labelDefault: 'Columns',\r\n          labelKey: 'columns',\r\n          iconKey: 'columns',\r\n          toolPanel: 'agColumnsToolPanel',\r\n        },\r\n        {\r\n          id: 'filters',\r\n          labelDefault: 'Filters',\r\n          labelKey: 'filters',\r\n          iconKey: 'filter',\r\n          toolPanel: 'agFiltersToolPanel',\r\n        },\r\n      ],\r\n      defaultToolPanel: 'customStats',\r\n    };\r\n  }, []);\r\n  return (\r\n    <div\r\n      className=\"ag-theme-alpine-dark\"\r\n    >\r\n      <AgGridReact\r\n        ref={gridRef}\r\n        rowData={rowData}\r\n        columnDefs={columnDefs}\r\n        defaultColDef={defaultColDef}\r\n        rowStyle={{ fontSize: 12, padding: 0 }}\r\n        headerHeight={30}\r\n        rowHeight={30}\r\n        domLayout={\"autoHeight\"}\r\n        onGridReady={onGridReady}\r\n        autoGroupColumnDef={autoGroupColumnDef}\r\n        sideBar={sideBar}\r\n        enableCellChangeFlash={true}\r\n        animateRows={true}\r\n        suppressAggFuncInHeader={true}\r\n      // getRowId={getRowId}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AgGrid;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport { Slider } from \"baseui/slider\";\r\nimport { setTimeout } from \"timers\";\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\r\nimport axios from \"axios\";\r\nimport Aggrid from \"./Aggrid\";\r\n\r\nconst Main = (props: ComponentProps) => {\r\n\r\n  const { username, api, refresh_sec, refresh_cutoff_sec, gridoption_build, prod } = props.args;\r\n\r\n  useEffect(() => Streamlit.setFrameHeight());\r\n  // Add a label and pass min/max variables to the baseui Slider\r\n  return (\r\n    <>\r\n      <Aggrid\r\n        username={username}\r\n        api={api}\r\n        refresh_sec={refresh_sec}\r\n        refresh_cutoff_sec={refresh_cutoff_sec}\r\n        gridoption_build={gridoption_build}\r\n        prod={prod}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withStreamlitConnection(Main);\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport Main from \"./Main\"\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\nimport { Client as Styletron } from \"styletron-engine-atomic\"\r\nimport { Provider as StyletronProvider } from \"styletron-react\"\r\nimport { ThemeProvider, LightTheme } from \"baseui\"\r\n\r\nconst engine = new Styletron()\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StyletronProvider value={engine}>\r\n      <ThemeProvider theme={LightTheme}>\r\n        <Main />\r\n      </ThemeProvider>\r\n    </StyletronProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}