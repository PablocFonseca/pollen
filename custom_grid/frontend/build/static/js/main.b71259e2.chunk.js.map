{"version":3,"sources":["Aggrid.tsx","Main.tsx","index.tsx"],"names":["BtnCellRenderer","props","onClick","clicked","value","g_rowdata","AgGrid","defaultColumnDefs","field","headerName","width","filter","pinned","cellRenderer","enableCellChangeFlash","resizable","cellRendererParams","a","num","prompt","axios","get","params","username","prod","client_order_id","number_shares","alert","gridRef","useRef","api","refresh_sec","refresh_cutoff_sec","useState","rowData","setRowData","columnDefs","useEffect","Streamlit","setFrameHeight","fetchAndSetData","fetchData","array","current","console","log","id_array","map","item","old_id_array","toUpdate","includes","toRemove","row","toAdd","applyTransactionAsync","update","remove","add","res","JSON","parse","data","timeout","interval","setInterval","setTimeout","clearInterval","error","clearTimeout","useCallback","skipHeader","allColumnIds","columnApi","getColumns","forEach","column","push","getId","autoSizeColumns","sizeColumnsToFit","defaultMinWidth","onGridReady","autoGroupColumnDef","useMemo","minWidth","defaultColDef","sortable","getRowId","sideBar","toolPanels","id","labelDefault","labelKey","iconKey","toolPanel","defaultToolPanel","style","display","flexDirection","height","className","ref","rowStyle","fontSize","padding","headerHeight","rowHeight","animateRows","suppressAggFuncInHeader","withStreamlitConnection","args","gridoption_build","Aggrid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b71259e2.chunk.js","sourcesContent":["import React, { useState, useEffect, useMemo, useRef, useCallback, StrictMode } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-enterprise';\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\r\n// import './styles.css';\r\nimport axios from \"axios\"\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport { IOlympicData } from './interfaces';\r\nimport {\r\n  ColDef,\r\n  ColGroupDef,\r\n  ColumnResizedEvent,\r\n  GetRowIdFunc,\r\n  GetRowIdParams,\r\n  Grid,\r\n  GridOptions,\r\n  GridReadyEvent,\r\n  SideBarDef,\r\n  ValueParserParams,\r\n} from 'ag-grid-community';\r\n\r\ntype Props = {\r\n  username: string,\r\n  api: string,\r\n  refresh_sec?: number,\r\n  refresh_cutoff_sec?: number,\r\n  gridoption_build?: any,\r\n  prod?: boolean,\r\n}\r\n\r\nconst BtnCellRenderer = (props: any) => {\r\n  const btnClickedHandler = () => {\r\n    props.clicked(props.value);\r\n  }\r\n\r\n  return (\r\n    <button onClick={btnClickedHandler}>Sell</button>\r\n  )\r\n}\r\n\r\nconst defaultWidth = 100;\r\n\r\n\r\n\r\nlet g_rowdata: any[] = [];\r\n\r\nconst AgGrid = (props: Props) => {\r\n  const defaultColumnDefs: ColDef[] = [\r\n    {\r\n      field: 'honey',\r\n      headerName: 'honey',\r\n      width: defaultWidth,\r\n      filter: \"agTextColumnFilter\",\r\n      pinned: 'left',\r\n      cellRenderer: 'agAnimateShowChangeCellRenderer',\r\n      enableCellChangeFlash: true,\r\n    },\r\n    {\r\n      field: '$honey',\r\n      headerName: '$honey',\r\n      width: defaultWidth,\r\n      resizable: true,\r\n      cellRenderer: 'agAnimateShowChangeCellRenderer',\r\n      enableCellChangeFlash: true,\r\n    },\r\n    { field: 'symbol', headerName: 'Symbol', width: defaultWidth, resizable: true },\r\n    { field: 'ticker_time_frame', headerName: 'ticker_time_frame', width: defaultWidth, resizable: true },\r\n    { field: 'trigname', headerName: 'trigname', width: defaultWidth, resizable: true },\r\n    { field: 'datetime', headerName: 'datetime', width: defaultWidth, resizable: true },\r\n    { field: 'honey_time_in_profit', headerName: 'honey_time_in_profit', width: defaultWidth, resizable: true },\r\n    { field: 'filled_qty', headerName: 'filled_qty', width: defaultWidth, resizable: true },\r\n    { field: 'qty_available', headerName: 'qty_available', width: defaultWidth, resizable: true },\r\n    { field: 'filled_avg_price', headerName: 'filled_avg_price', width: defaultWidth, resizable: true },\r\n    { field: 'limit_price', headerName: 'limit_price', width: defaultWidth, resizable: true },\r\n    { field: 'cost_basis', headerName: 'cost_basis', width: defaultWidth, resizable: true },\r\n    { field: 'wave_amo', headerName: 'wave_amo', width: defaultWidth, resizable: true },\r\n    { field: 'status_q', headerName: 'status_q', width: defaultWidth, resizable: true },\r\n    { field: 'client_order_id', headerName: 'client_order_id', width: defaultWidth, resizable: true },\r\n    { field: 'origin_wave', headerName: 'origin_wave', width: defaultWidth, resizable: true },\r\n    { field: 'wave_at_creation', headerName: 'wave_at_creation', width: defaultWidth, resizable: true },\r\n    { field: 'sell_reason', headerName: 'sell_reason', width: defaultWidth, resizable: true },\r\n    { field: 'exit_order_link', headerName: 'exit_order_link', width: defaultWidth, resizable: true },\r\n    { field: 'queen_order_state', headerName: 'queen_order_state', width: defaultWidth, resizable: true },\r\n    { field: 'order_rules', headerName: 'order_rules', width: defaultWidth, resizable: true },\r\n    { field: 'order_rules.sellout', headerName: 'order_rules.sellout', width: 150, resizable: true },\r\n    { field: 'order_trig_sell_stop', headerName: 'order_trig_sell_stop', width: defaultWidth, resizable: true },\r\n    { field: 'side', headerName: 'side', width: 70, pinned: 'right', resizable: true },\r\n    {\r\n      field: \"client_order_id\",\r\n      headerName: 'action',\r\n      width: 80,\r\n      cellRenderer: BtnCellRenderer,\r\n      cellRendererParams: {\r\n        clicked: async function (field: any) {\r\n          try {\r\n            // const res: any = await postRowId(field)\r\n            const num = prompt(`Please input number`);\r\n            const res = await axios.get(\"http://127.0.0.1:8000/api/data/queen_app_Sellorder_request\", {\r\n              params: {\r\n                username: username,\r\n                prod: prod,\r\n                client_order_id: field,\r\n                number_shares: num,\r\n              }\r\n            })\r\n            alert(\"Success Sellorder_request!\");\r\n          } catch (error) {\r\n            alert(\"Failed Sellorder_request!\");\r\n          }\r\n        },\r\n      },\r\n      pinned: 'right',\r\n    }\r\n  ];\r\n  const gridRef = useRef<AgGridReact>(null);\r\n  const { username, api, refresh_sec = 1, refresh_cutoff_sec = 0, prod = true } = props;\r\n  const [rowData, setRowData] = useState<any[]>([]);\r\n  const [columnDefs, setColumnDefs] = useState<(ColDef | ColGroupDef)[]>(defaultColumnDefs)\r\n  useEffect(() => Streamlit.setFrameHeight());\r\n\r\n  const addIds = (array: any[]) => {\r\n    return array.map((item, idx) => {\r\n      return { ...item, idx }\r\n    })\r\n  }\r\n\r\n  const fetchAndSetData = async () => {\r\n    const array = await fetchData();\r\n    const api = gridRef.current!.api;\r\n    console.log(g_rowdata);\r\n    const id_array = array.map((item: any) => item.client_order_id)\r\n    const old_id_array = g_rowdata.map((item: any) => item.client_order_id)\r\n    const toUpdate = g_rowdata.filter((item: any) => id_array.includes(item.client_order_id))\r\n    const toRemove = g_rowdata.filter((row) => !id_array.includes(row.client_order_id))\r\n    const toAdd = array.filter((row: any) => !old_id_array.includes(row.client_order_id))\r\n    console.log(toRemove);\r\n    api.applyTransactionAsync({ update: toUpdate, remove: toRemove, add: toAdd });\r\n    g_rowdata = array\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    const res = await axios.get(api, {\r\n      params: {\r\n        username: username,\r\n        prod: prod,\r\n      }\r\n    });\r\n    const array = JSON.parse(res.data);\r\n    return array;\r\n  };\r\n\r\n  const postRowId = async (id: any) => {\r\n    const res = await axios.post(api, {\r\n      username: username,\r\n      prod: prod,\r\n      id: id,\r\n    });\r\n    return res;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(fetchAndSetData, refresh_sec * 1000);\r\n    let timeout: NodeJS.Timeout;\r\n    if (refresh_cutoff_sec > 0) {\r\n      console.log(refresh_cutoff_sec);\r\n      timeout = setTimeout(() => {\r\n        clearInterval(interval);\r\n        console.log(\"Fetching data ended, refresh rate:\", refresh_sec);\r\n      }, refresh_cutoff_sec * 1000);\r\n    }\r\n    console.error(\"rendered==========\", props);\r\n    return () => {\r\n      clearInterval(interval);\r\n      if (timeout) clearTimeout(timeout);\r\n    }\r\n  }, [props]);\r\n\r\n  const autoSizeAll = useCallback((skipHeader: boolean) => {\r\n    const allColumnIds: string[] = [];\r\n    gridRef.current!.columnApi.getColumns()!.forEach((column: any) => {\r\n      allColumnIds.push(column.getId());\r\n    });\r\n    gridRef.current!.columnApi.autoSizeColumns(allColumnIds, skipHeader);\r\n  }, []);\r\n\r\n  const sizeToFit = useCallback(() => {\r\n    gridRef.current!.api.sizeColumnsToFit({\r\n      defaultMinWidth: 100,\r\n    });\r\n  }, []);\r\n\r\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\r\n    setTimeout(async () => {\r\n      const array = await fetchData();\r\n      setRowData(array);\r\n      g_rowdata = array;\r\n    }, 100);\r\n  }, []);\r\n\r\n  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n    return {\r\n      minWidth: 200,\r\n    };\r\n  }, []);\r\n\r\n  const defaultColDef = useMemo<ColDef>(() => {\r\n    return {\r\n      width: 120,\r\n      sortable: true,\r\n      resizable: true,\r\n      filter: true,\r\n    };\r\n  }, []);\r\n\r\n  const getRowId = useMemo<GetRowIdFunc>(() => {\r\n    return (params: GetRowIdParams) => {\r\n      return params.data.client_order_id;\r\n    };\r\n  }, []);\r\n\r\n  const sideBar = useMemo<\r\n    SideBarDef | string | string[] | boolean | null\r\n  >(() => {\r\n    return {\r\n      toolPanels: [\r\n        {\r\n          id: 'columns',\r\n          labelDefault: 'Columns',\r\n          labelKey: 'columns',\r\n          iconKey: 'columns',\r\n          toolPanel: 'agColumnsToolPanel',\r\n        },\r\n        {\r\n          id: 'filters',\r\n          labelDefault: 'Filters',\r\n          labelKey: 'filters',\r\n          iconKey: 'filter',\r\n          toolPanel: 'agFiltersToolPanel',\r\n        },\r\n      ],\r\n      defaultToolPanel: 'customStats',\r\n    };\r\n  }, []);\r\n  return (\r\n    <div style={{ display: 'flex', flexDirection: 'row', height: '300px', width: \"100\" }}>\r\n      <div className=\"ag-theme-alpine-dark\" style={{ width: \"100%\", height: \"100%\" }}>\r\n        <AgGridReact\r\n          ref={gridRef}\r\n          rowData={rowData}\r\n          columnDefs={columnDefs}\r\n          defaultColDef={defaultColDef}\r\n          rowStyle={{ fontSize: 12, padding: 0 }}\r\n          headerHeight={30}\r\n          rowHeight={30}\r\n          onGridReady={onGridReady}\r\n          autoGroupColumnDef={autoGroupColumnDef}\r\n          sideBar={sideBar}\r\n          animateRows={true}\r\n          suppressAggFuncInHeader={true}\r\n          getRowId={getRowId}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AgGrid;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\r\nimport Aggrid from \"./Aggrid\";\r\n\r\nconst Main = (props: ComponentProps) => {\r\n\r\n  const { username, api, refresh_sec, refresh_cutoff_sec, gridoption_build, prod } = props.args;\r\n\r\n  // useEffect(() => Streamlit.setFrameHeight());\r\n  // Add a label and pass min/max variables to the baseui Slider\r\n  return (\r\n    <div >\r\n      <Aggrid\r\n        username={username}\r\n        api={api}\r\n        refresh_sec={refresh_sec}\r\n        refresh_cutoff_sec={refresh_cutoff_sec}\r\n        gridoption_build={gridoption_build}\r\n        prod={prod}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withStreamlitConnection(Main);\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport Main from \"./Main\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Main />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}