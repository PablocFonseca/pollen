{"version":3,"sources":["components/Modal.tsx","Aggrid.tsx","Main.tsx","index.tsx"],"names":["formats","ReactModal","setAppElement","isExecuting","MyModal","_ref","isOpen","closeModal","modalData","promptText","setPromptText","toastr","prompt_field","prompt_order_rules","selectedRow","selectedField","ref","useRef","useEffect","setTimeout","_ref$current","current","focus","isValidDate","dateStr","some","format","moment","isValid","formatToLocalDatetime","date","toDate","timeZone","Intl","DateTimeFormat","resolvedOptions","zonedDate","utcToZonedTime","textFields","booleanFields","datetimeFields","arrayFields","rule","value","Array","isArray","push","React","createElement","className","style","display","prompt_message","onClick","length","map","index","key","type","onChange","e","target","checked","item","i","async","formattedSellDate","sell_date","body","username","prod","selected_row","default_value","kwargs","console","log","data","res","axios","post","button_api","status","description","message_type","success","alert","error","close_modal","message","g_rowdata","g_newRowData","dateFormatter","isoString","formaterString","Date","currencyFormatter","number","currencySymbol","n","Number","parseFloat","isNaN","toFixed","numberFormatter","precision","HyperlinkRenderer","props","href","concat","column","colDef","baseURL","options","positionClass","hideDuration","timeOut","AgGrid","BtnCellRenderer","btnClickedHandler","clicked","node","id","background","width","borderColor","col_header","buttonName","gridRef","api","api_update","refresh_sec","refresh_cutoff_sec","grid_options","buttons","toggle_views","rowData","setRowData","useState","modalShow","setModalshow","setModalData","viewId","setViewId","Streamlit","setFrameHeight","button","columnDefs","field","headerName","pinned","cellRenderer","cellRendererParams","row_index","find","row","str","JSON","parse","replace","rules_value","window","confirm","fetchAndSetData","array","fetchData","onRefresh","toggle_view_selection","interval","setInterval","timeout","clearInterval","clearTimeout","useCallback","skipHeader","allColumnIds","columnApi","getColumns","forEach","getId","autoSizeColumns","sizeColumnsToFit","defaultMinWidth","onGridReady","autoGroupColumnDef","useMemo","minWidth","getRowId","params","onCellValueChanged","toolPanels","labelDefault","labelKey","iconKey","toolPanel","defaultToolPanel","event","columnTypes","dateColumnFilter","filter","filterParams","comparator","filterValue","cellValue","compareAsc","numberColumnFilter","shortDateTimeFormat","valueFormatter","customDateTimeFormat","custom_format_string","customNumericFormat","_params$column$colDef2","customCurrencyFormat","custom_currency_symbol","timedeltaFormat","duration","humanize","customNumberFormat","toLocaleString","minimumFractionDigits","customHyperlinkRenderer","Fragment","flexDirection","height","undefined","margin","new_data","warning","view","theme","AgGridReact","getRowStyle","_params$data$color_ro","_params$data$color_ro2","color","rowStyle","fontSize","padding","headerHeight","rowHeight","animateRows","suppressAggFuncInHeader","gridOptions","withStreamlitConnection","gridoption_build","args","Aggrid","ReactDOM","render","StrictMode","Main","document","getElementById"],"mappings":"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","file":"static/js/main.e565cf93.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport ReactModal from \"react-modal\";\nimport \"./modal.css\";\nimport axios from \"axios\";\nimport { utcToZonedTime, format } from 'date-fns-tz';\nimport moment from \"moment\";\n\nconst formats = [\"YYYY-MM-DDTHH:mm\", \"MM/DD/YYYYTHH:mm\", \"MM/DD/YYYY HH:mm\", \"YYYY-MM-DD HH:mm\"];\n\nconst modalStyle = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"yellow\",\n  },\n};\n\nReactModal.setAppElement(\"#root\");\nlet isExecuting = false;\n\ninterface MyModalProps {\n  isOpen: boolean;\n  closeModal: () => void;\n  modalData: any;\n  promptText: any;\n  setPromptText: (value: any) => void;\n  toastr: any; // Define the toastr type if available\n}\n\nconst MyModal: React.FC<MyModalProps> = ({\n  isOpen,\n  closeModal,\n  modalData,\n  promptText,\n  setPromptText,\n  toastr,\n}) => {\n  const { prompt_field, prompt_order_rules, selectedRow, selectedField } = modalData;\n\n  const ref = useRef<HTMLButtonElement>(null);\n  const selectRef = useRef<HTMLSelectElement>(null);\n\n  const handleOk = async () => {\n    if (isExecuting) return;\n    isExecuting = true;\n    try {\n      const { data: res } = await axios.post(modalData.button_api, {\n        username: modalData.username,\n        prod: modalData.prod,\n        selected_row: modalData.selectedRow,\n        default_value: promptText,\n        ...modalData.kwargs,\n      });\n      const { status, data, description } = res;\n      console.log(\"res :>> \", res);\n      if (status === \"success\") {\n        data.message_type === \"fade\"\n          ? toastr.success(description, \"Success\")\n          : alert(\"Success!\\nDescription: \" + description);\n      } else {\n        data.message_type === \"fade\"\n          ? toastr.error(description, \"Error\")\n          : alert(\"Error!\\nDescription: \" + description);\n      }\n      if (data?.close_modal != false) closeModal();\n    } catch (error: any) {\n      console.log(\"error :>> \", error);\n      toastr.error(error.message);\n    }\n    isExecuting = false;\n  };\n\n  const handleOkSecond = async () => {\n    if (isExecuting) return;\n    isExecuting = true;\n    try {\n      const formattedSellDate = moment(promptText.sell_date, formats, true).format('YYYY-MM-DDTHH:mm');\n\n      const body = {\n        username: modalData.username,\n        prod: modalData.prod,\n        selected_row: modalData.selectedRow,\n        default_value: {\n          ...promptText,\n          sell_date: formattedSellDate\n        },\n        ...modalData.kwargs,\n      };\n      console.log(\"body :>> \", body);\n      const { data: res } = await axios.post(modalData.button_api, body);\n      const { status, data, description } = res;\n      if (status === \"success\") {\n        data.message_type === \"fade\"\n          ? toastr.success(description, \"Success\")\n          : alert(\"Success!\\nDescription: \" + description);\n      } else {\n        data.message_type === \"fade\"\n          ? toastr.error(description, \"Error\")\n          : alert(\"Error!\\nDescription: \" + description);\n      }\n      if (data?.close_modal != false) closeModal();\n    } catch (error: any) {\n      console.log(\"error :>> \", error);\n      toastr.error(error.message);\n    }\n    isExecuting = false;\n  };\n\n  const handleOkOnArray = async () => {\n    console.log(\"selectRef.current.value :>> \", selectRef.current?.value);\n    if (isExecuting) return;\n    isExecuting = true;\n    try {\n      const body = {\n        username: modalData.username,\n        prod: modalData.prod,\n        selected_row: modalData.selectedRow,\n        default_value: selectRef.current?.value,\n        ...modalData.kwargs,\n      };\n      console.log(\"body :>> \", body);\n      const { data: res } = await axios.post(modalData.button_api, body);\n      const { status, data, description } = res;\n      console.log(\"res :>> \", res);\n      if (status === \"success\") {\n        data.message_type === \"fade\"\n          ? toastr.success(description, \"Success\")\n          : alert(\"Success!\\nDescription: \" + description);\n      } else {\n        data.message_type === \"fade\"\n          ? toastr.error(description, \"Error\")\n          : alert(\"Error!\\nDescription: \" + description);\n      }\n      if (data?.close_modal != false) closeModal();\n    } catch (error: any) {\n      console.log(\"error :>> \", error);\n      toastr.error(error.message);\n    }\n    isExecuting = false;\n  };\n\n  useEffect(() => {\n    if (isOpen) setTimeout(() => ref.current?.focus(), 100);\n  }, [isOpen]);\n\n  const isValidDate = (dateStr: string) => {\n    return formats.some(format => moment(dateStr, format, true).isValid());\n  };\n\n  const formatToLocalDatetime = (dateStr: string) => {\n    const date = moment(dateStr, formats, true).toDate();\n    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const zonedDate = utcToZonedTime(date, timeZone);\n    return format(zonedDate, 'yyyy-MM-dd\\'T\\'HH:mm');\n  };\n\n  // Categorize fields by type\n  const textFields = [];\n  const booleanFields = [];\n  const datetimeFields = [];\n  const arrayFields = [];\n\n  if (prompt_order_rules) {\n    for (const rule of prompt_order_rules) {\n      const value = promptText[rule];\n      if (Array.isArray(value)) {\n        arrayFields.push(rule);\n      } else if (typeof value === \"boolean\") {\n        booleanFields.push(rule);\n      } else if (isValidDate(value)) {\n        datetimeFields.push(rule);\n      } else {\n        textFields.push(rule);\n      }\n    }\n  }\n\n  // Only render columns if there are fields of that type\n  return (\n    <div className=\"my-modal\" style={{ display: isOpen ? \"block\" : \"none\" }}>\n      <div className=\"my-modal-content\">\n        <div className=\"modal-header px-4\">\n          <h4>{modalData.prompt_message}</h4>\n          <span className=\"close\" onClick={closeModal}>\n            &times;\n          </span>\n        </div>\n        <div className=\"modal-body p-2\">\n          <div className=\"d-flex flex-row justify-content-between\">\n            {textFields.length > 0 && (\n              <div className=\"d-flex flex-column\">\n                {textFields.map((rule: any, index: number) => (\n                  <div className=\"d-flex flex-row justify-content-end\" key={index}>\n                    <label className=\"d-flex flex-row\">\n                      {rule + \": \"}\n                      <input\n                        type=\"text\"\n                        value={promptText[rule]}\n                        onChange={(e) =>\n                          setPromptText({\n                            ...promptText,\n                            [rule]: e.target.value,\n                          })\n                        }\n                      />\n                    </label>\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {booleanFields.length > 0 && (\n              <div className=\"d-flex flex-column\">\n                {booleanFields.map((rule: any, index: number) => (\n                  <div className=\"d-flex flex-row justify-content-end\" key={index}>\n                    <label className=\"d-flex flex-row\">\n                      {rule + \": \"}\n                      <input\n                        type=\"checkbox\"\n                        checked={promptText[rule]}\n                        onChange={(e) =>\n                          setPromptText({\n                            ...promptText,\n                            [rule]: e.target.checked,\n                          })\n                        }\n                      />\n                    </label>\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {datetimeFields.length > 0 && (\n              <div className=\"d-flex flex-column\">\n                {datetimeFields.map((rule: any, index: number) => (\n                  <div className=\"d-flex flex-row justify-content-end\" key={index}>\n                    <label className=\"d-flex flex-row\">\n                      {rule + \": \"}\n                      <input\n                        type=\"datetime-local\"\n                        value={promptText[rule] && formatToLocalDatetime(promptText[rule])}\n                        onChange={(e) =>\n                          setPromptText({\n                            ...promptText,\n                            [rule]: e.target.value,\n                          })\n                        }\n                      />\n                    </label>\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {arrayFields.length > 0 && (\n              <div className=\"d-flex flex-column\">\n                {arrayFields.map((rule: any, index: number) => (\n                  <div className=\"d-flex flex-row justify-content-end\" key={index}>\n                    <label className=\"d-flex flex-row\">\n                      {rule + \": \"}\n                      <select\n                        value={promptText[rule][0]} // Assuming the first option is selected by default\n                        onChange={(e) =>\n                          setPromptText({\n                            ...promptText,\n                            [rule]: [e.target.value],\n                          })\n                        }\n                      >\n                        {promptText[rule].map((item: any, i: number) => (\n                          <option key={i} value={item}>\n                            {item}\n                          </option>\n                        ))}\n                      </select>\n                    </label>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"modal-footer\">\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={handleOkSecond}\n            ref={ref}\n          >\n            Ok\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            onClick={closeModal}\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MyModal;\n","import React, {\r\n  useState,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useCallback\r\n} from \"react\"\r\nimport { AgGridReact } from \"ag-grid-react\"\r\nimport { RowClassParams } from 'ag-grid-community';\r\n\r\nimport toastr from \"toastr\"\r\nimport \"toastr/build/toastr.min.css\"\r\nimport \"ag-grid-community/styles/ag-grid.css\"\r\nimport \"ag-grid-community/styles/ag-theme-alpine.css\"\r\nimport \"ag-grid-community/styles/ag-theme-balham.css\"\r\nimport \"ag-grid-community/styles/ag-theme-material.css\"\r\nimport MyModal from './components/Modal'\r\nimport \"ag-grid-enterprise\"\r\nimport { parseISO, compareAsc } from \"date-fns\"\r\nimport { format } from \"date-fns-tz\"\r\nimport { duration } from \"moment\"\r\nimport \"./styles.css\"\r\nimport axios from \"axios\"\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport {\r\n  ColDef,\r\n  ColGroupDef,\r\n  ColumnResizedEvent,\r\n  GetRowIdFunc,\r\n  GetRowIdParams,\r\n  Grid,\r\n  GridOptions,\r\n  GridReadyEvent,\r\n  SideBarDef,\r\n  ValueParserParams,\r\n} from \"ag-grid-community\"\r\nimport { order_rules_default } from \"./utils/order_rules\"\r\n\r\ntype Props = {\r\n  username: string\r\n  api: string\r\n  api_update: string\r\n  refresh_sec?: number\r\n  refresh_cutoff_sec?: number\r\n  gridoption_build?: any\r\n  prod?: boolean\r\n  grid_options?: any\r\n  index: string\r\n  kwargs: any\r\n}\r\n\r\nlet g_rowdata: any[] = []\r\nlet g_newRowData: any = null\r\n\r\nfunction dateFormatter(isoString: string, formaterString: string): String {\r\n  try {\r\n    let date = new Date(isoString)\r\n    return format(date, formaterString)\r\n  } catch {\r\n    return isoString\r\n  } finally {\r\n  }\r\n}\r\n\r\nfunction currencyFormatter(number: any, currencySymbol: string): String {\r\n  let n = Number.parseFloat(number)\r\n  if (!Number.isNaN(n)) {\r\n    return currencySymbol + n.toFixed(2)\r\n  } else {\r\n    return number\r\n  }\r\n}\r\n\r\nfunction numberFormatter(number: any, precision: number): String {\r\n  let n = Number.parseFloat(number)\r\n  if (!Number.isNaN(n)) {\r\n    return n.toFixed(precision)\r\n  } else {\r\n    return number\r\n  }\r\n}\r\n\r\nconst columnFormaters = {\r\n  columnTypes: {\r\n    dateColumnFilter: {\r\n      filter: \"agDateColumnFilter\",\r\n      filterParams: {\r\n        comparator: (filterValue: any, cellValue: string) =>\r\n          compareAsc(parseISO(cellValue), filterValue),\r\n      },\r\n    },\r\n    numberColumnFilter: {\r\n      filter: \"agNumberColumnFilter\",\r\n    },\r\n    shortDateTimeFormat: {\r\n      valueFormatter: (params: any) =>\r\n        dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n    },\r\n    customDateTimeFormat: {\r\n      valueFormatter: (params: any) =>\r\n        dateFormatter(params.value, params.column.colDef.custom_format_string),\r\n    },\r\n    customNumericFormat: {\r\n      valueFormatter: (params: any) =>\r\n        numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n    },\r\n    customCurrencyFormat: {\r\n      valueFormatter: (params: any) =>\r\n        currencyFormatter(\r\n          params.value,\r\n          params.column.colDef.custom_currency_symbol\r\n        ),\r\n    },\r\n    timedeltaFormat: {\r\n      valueFormatter: (params: any) => duration(params.value).humanize(true),\r\n    },\r\n  },\r\n}\r\n\r\nconst HyperlinkRenderer = (props: any) => {\r\n  return (\r\n    <a\r\n      href={`${props.column.colDef.baseURL}/${\r\n        props.data[props.column.colDef[\"linkField\"]]\r\n      }`}\r\n      target=\"_blank\"\r\n    >\r\n      {props.value}\r\n    </a>\r\n  )\r\n}\r\n\r\ntoastr.options = {\r\n  positionClass: \"toast-top-full-width\",\r\n  hideDuration: 300,\r\n  timeOut: 3000,\r\n}\r\n\r\nconst AgGrid = (props: Props) => {\r\n  const BtnCellRenderer = (props: any) => {\r\n    const btnClickedHandler = () => {\r\n      props.clicked(props.node.id)\r\n    }\r\n    return (\r\n      <button\r\n        onClick={btnClickedHandler}\r\n        style={{\r\n          background: \"transparent\",\r\n          width: \"100%\",\r\n          borderColor: props.borderColor ? props.borderColor : \"black\",\r\n        }}\r\n      >\r\n        {props.col_header ? props.value : props.buttonName}\r\n      </button>\r\n    )\r\n  }\r\n\r\n  const gridRef = useRef<AgGridReact>(null)\r\n  const {\r\n    username,\r\n    api,\r\n    api_update,\r\n    refresh_sec = undefined,\r\n    refresh_cutoff_sec = 0,\r\n    prod = true,\r\n    index,\r\n    kwargs,\r\n  } = props\r\n  let { grid_options = {} } = props\r\n  const { buttons, toggle_views } = kwargs\r\n  const [rowData, setRowData] = useState<any[]>([])\r\n  const [modalShow, setModalshow] = useState(false)\r\n  const [modalData, setModalData] = useState({})\r\n  const [promptText, setPromptText] = useState(\"\")\r\n  const [viewId, setViewId] = useState(0)\r\n\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight()\r\n    if (buttons.length) {\r\n      buttons.map((button: any) => {\r\n        const { prompt_field, prompt_message, button_api, prompt_order_rules } =\r\n          button\r\n        grid_options.columnDefs!.push({\r\n          field: button[\"col_header\"] ? button[\"col_header\"] : index,\r\n          headerName: button[\"col_headername\"],\r\n          width: button[\"col_width\"],\r\n          pinned: button[\"pinned\"],\r\n          cellRenderer: BtnCellRenderer,\r\n          cellRendererParams: {\r\n            col_header: button[\"col_header\"],\r\n            buttonName: button[\"button_name\"],\r\n            borderColor: button[\"border_color\"],\r\n            clicked: async function (row_index: any) {\r\n              try {\r\n                const selectedRow = g_rowdata.find(\r\n                  (row) => row[index] == row_index\r\n                )\r\n                if (prompt_order_rules) {\r\n                  const str = selectedRow[prompt_field]\r\n                  const selectedField =\r\n                    typeof str === \"string\"\r\n                      ? JSON.parse(\r\n                          selectedRow[prompt_field]\r\n                            .replace(/'/g, '\"')\r\n                            .replace(/\\n/g, \"\")\r\n                            .replace(/\\s/g, \"\")\r\n                            .replace(/False/g, \"false\")\r\n                            .replace(/True/g, \"true\")\r\n                        )\r\n                      : str\r\n                  setModalshow(true)\r\n                  setModalData({\r\n                    prompt_message,\r\n                    button_api: button_api,\r\n                    username: username,\r\n                    prod: prod,\r\n                    selectedRow: selectedRow,\r\n                    kwargs: kwargs,\r\n                    prompt_field,\r\n                    prompt_order_rules,\r\n                    selectedField,\r\n                  })\r\n                  const rules_value: any = {}\r\n                  prompt_order_rules.map((rule: string) => {\r\n                    rules_value[rule] = selectedField[rule]\r\n                  })\r\n                  setPromptText(rules_value)\r\n                } else if (prompt_field && prompt_message) {\r\n                  setModalshow(true)\r\n                  setModalData({\r\n                    prompt_message,\r\n                    button_api: button_api,\r\n                    username: username,\r\n                    prod: prod,\r\n                    selectedRow: selectedRow,\r\n                    kwargs: kwargs,\r\n                  })\r\n                  setPromptText(selectedRow[prompt_field])\r\n                  // const num = prompt(prompt_message, selectedRow[prompt_field]);\r\n                  // if (num == null) return;\r\n                  // const res = await axios.post(button_api, {\r\n                  //   username: username,\r\n                  //   prod: prod,\r\n                  //   selected_row: selectedRow,\r\n                  //   default_value: num,\r\n                  //   ...kwargs,\r\n                  // })\r\n                } else {\r\n                  if (window.confirm(prompt_message)) {\r\n                    const res = await axios.post(button_api, {\r\n                      username: username,\r\n                      prod: prod,\r\n                      selected_row: selectedRow,\r\n                      ...kwargs,\r\n                    })\r\n                  }\r\n                  toastr.success(\"Success!\")\r\n                }\r\n              } catch (error) {\r\n                alert(`${error}`)\r\n              }\r\n            },\r\n          },\r\n        })\r\n      })\r\n    }\r\n    // parseGridoptions()\r\n  })\r\n\r\n  const fetchAndSetData = async () => {\r\n    const array = await fetchData()\r\n    if (array === false) return false\r\n    setRowData(array)\r\n    g_rowdata = array\r\n    // const api = gridRef.current!.api\r\n    // const id_array = array.map((item: any) => item[index])\r\n    // const old_id_array = g_rowdata.map((item: any) => item[index])\r\n    // const toUpdate = array.filter((row: any) => id_array.includes(row[index]))\r\n    // const toRemove = g_rowdata.filter((row) => !id_array.includes(row[index]))\r\n    // const toAdd = array.filter((row: any) => !old_id_array.includes(row[index]))\r\n    // api.applyTransactionAsync({\r\n    //   update: toUpdate,\r\n    //   remove: toRemove,\r\n    //   add: toAdd,\r\n    // })\r\n    // g_rowdata = array\r\n    return true\r\n  }\r\n\r\n  useEffect(() => {\r\n    onRefresh()\r\n  }, [viewId])\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const res = await axios.post(api, {\r\n        username: username,\r\n        prod: prod,\r\n        ...kwargs,\r\n        toggle_view_selection: toggle_views ? toggle_views[viewId] : \"none\",\r\n      })\r\n      const array = JSON.parse(res.data)\r\n      console.log(\r\n        \"toggle_views[viewId],viewId :>> \",\r\n        toggle_views[viewId],\r\n        viewId\r\n      )\r\n      console.log(\"table data :>> \", array)\r\n      if (array.status == false) {\r\n        toastr.error(`Fetch Error: ${array.message}`)\r\n        return false\r\n      }\r\n      return array\r\n    } catch (error: any) {\r\n      toastr.error(`Fetch Error: ${error.message}`)\r\n      return false\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (refresh_sec && refresh_sec > 0) {\r\n      const interval = setInterval(fetchAndSetData, refresh_sec * 1000)\r\n      let timeout: NodeJS.Timeout\r\n      if (refresh_cutoff_sec > 0) {\r\n        console.log(refresh_cutoff_sec)\r\n        timeout = setTimeout(() => {\r\n          clearInterval(interval)\r\n          console.log(\"Fetching data ended, refresh rate:\", refresh_sec)\r\n        }, refresh_cutoff_sec * 1000)\r\n      }\r\n      console.error(\"rendered==========\", props)\r\n      return () => {\r\n        clearInterval(interval)\r\n        if (timeout) clearTimeout(timeout)\r\n      }\r\n    }\r\n  }, [props, viewId])\r\n\r\n  const autoSizeAll = useCallback((skipHeader: boolean) => {\r\n    const allColumnIds: string[] = []\r\n    gridRef.current!.columnApi.getColumns()!.forEach((column: any) => {\r\n      allColumnIds.push(column.getId())\r\n    })\r\n    gridRef.current!.columnApi.autoSizeColumns(allColumnIds, skipHeader)\r\n  }, [])\r\n\r\n  const sizeToFit = useCallback(() => {\r\n    gridRef.current!.api.sizeColumnsToFit({\r\n      defaultMinWidth: 100,\r\n    })\r\n  }, [])\r\n\r\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\r\n    setTimeout(async () => {\r\n      try {\r\n        const array = await fetchData()\r\n        // console.log(\"AAAAAAAAAAAAAAAAAAAAAAA\", array)\r\n        if (array == false) {\r\n          // toastr.error(`Error: ${array.message}`)\r\n          return\r\n        }\r\n        setRowData(array)\r\n        g_rowdata = array\r\n      } catch (error: any) {\r\n        toastr.error(`Error: ${error.message}`)\r\n      }\r\n    }, 100)\r\n  }, [])\r\n\r\n  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n    return {\r\n      minWidth: 200,\r\n    }\r\n  }, [])\r\n\r\n  const getRowId = useMemo<GetRowIdFunc>(() => {\r\n    return (params: GetRowIdParams) => {\r\n      return params.data[index]\r\n    }\r\n  }, [index])\r\n\r\n  const sideBar = useMemo<\r\n    SideBarDef | string | string[] | boolean | null\r\n  >(() => {\r\n    return {\r\n      toolPanels: [\r\n        {\r\n          id: \"columns\",\r\n          labelDefault: \"Columns\",\r\n          labelKey: \"columns\",\r\n          iconKey: \"columns\",\r\n          toolPanel: \"agColumnsToolPanel\",\r\n        },\r\n        {\r\n          id: \"filters\",\r\n          labelDefault: \"Filters\",\r\n          labelKey: \"filters\",\r\n          iconKey: \"filter\",\r\n          toolPanel: \"agFiltersToolPanel\",\r\n        },\r\n      ],\r\n      defaultToolPanel: \"customStats\",\r\n    }\r\n  }, [])\r\n\r\n  const onCellValueChanged = useCallback((event) => {\r\n    if (g_newRowData == null) g_newRowData = {}\r\n    g_newRowData[event.data[index]] = event.data\r\n    console.log(\"Data after change is\", g_newRowData)\r\n  }, [])\r\n\r\n  const onRefresh = async () => {\r\n    try {\r\n      const success = await fetchAndSetData()\r\n      success && toastr.success(\"Refresh success!\")\r\n    } catch (error: any) {\r\n      toastr.error(`Refresh Failed! ${error.message}`)\r\n    }\r\n  }\r\n\r\n  const onUpdate = async () => {\r\n    if (g_newRowData == null) {\r\n      toastr.warning(`No changes to update`)\r\n      return\r\n    }\r\n    try {\r\n      const res: any = await axios.post(api_update, {\r\n        username: username,\r\n        prod: prod,\r\n        new_data: g_newRowData,\r\n        ...kwargs,\r\n      })\r\n      g_newRowData = null\r\n      if (res.status) toastr.success(`Successfully Updated! `)\r\n      else toastr.error(`Failed! ${res.message}`)\r\n    } catch (error) {\r\n      toastr.error(`Failed! ${error}`)\r\n    }\r\n  }\r\n\r\n  const columnTypes = useMemo<any>(() => {\r\n    return {\r\n      dateColumnFilter: {\r\n        filter: \"agDateColumnFilter\",\r\n        filterParams: {\r\n          comparator: (filterValue: any, cellValue: string) =>\r\n            compareAsc(new Date(cellValue), filterValue),\r\n        },\r\n      },\r\n      numberColumnFilter: {\r\n        filter: \"agNumberColumnFilter\",\r\n      },\r\n      shortDateTimeFormat: {\r\n        valueFormatter: (params: any) =>\r\n          dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n      },\r\n      customDateTimeFormat: {\r\n        valueFormatter: (params: any) =>\r\n          dateFormatter(\r\n            params.value,\r\n            params.column.colDef.custom_format_string\r\n          ),\r\n      },\r\n      customNumericFormat: {\r\n        valueFormatter: (params: any) =>\r\n          numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n      },\r\n      customCurrencyFormat: {\r\n        valueFormatter: (params: any) =>\r\n          currencyFormatter(\r\n            params.value,\r\n            params.column.colDef.custom_currency_symbol\r\n          ),\r\n      },\r\n      timedeltaFormat: {\r\n        valueFormatter: (params: any) => duration(params.value).humanize(true),\r\n      },\r\n      customNumberFormat: {\r\n        valueFormatter: (params: any) =>\r\n          Number(params.value).toLocaleString(\"en-US\", {\r\n            minimumFractionDigits: 0,\r\n          }),\r\n      },\r\n      customHyperlinkRenderer: {\r\n        // valueGetter: (params: any) =>\r\n        //   params.column.colDef.baseURL + params.data.honey,\r\n        cellRenderer: HyperlinkRenderer,\r\n        cellRendererParams: {\r\n          baseURL: \"URLSearchParams.co\",\r\n        },\r\n      },\r\n    }\r\n  }, [])\r\n\r\n  const onClick = () => {\r\n    toastr.clear()\r\n    setTimeout(() => toastr.success(`Settings updated `), 300)\r\n  }\r\n\r\n  type RowStyle = {\r\n    background?: string;\r\n    color?: string;\r\n  };\r\n\r\n  function parseJsCodeFromPython(v: string) {\r\n    const JS_PLACEHOLDER = \"::JSCODE::\"\r\n    let funcReg = new RegExp(\r\n      `${JS_PLACEHOLDER}\\\\s*((function|class)\\\\s*.*)\\\\s*${JS_PLACEHOLDER}`\r\n    )\r\n  \r\n    let match = funcReg.exec(v)\r\n  \r\n    if (match) {\r\n  \r\n      const funcStr = match[1]\r\n      // eslint-disable-next-line\r\n      return new Function(\"return \" + funcStr)()\r\n    } else {\r\n      return v\r\n    }\r\n  }\r\n\r\n  const getRowStyle = (params: RowClassParams<any>): RowStyle | undefined => {\r\n    try {\r\n      const background = params.data[\"color_row\"] ?? undefined;\r\n      const color = params.data[\"color_row_text\"] ?? undefined;\r\n      return { background, color };\r\n    } catch (error) {\r\n      console.error(\"Error accessing row style:\", error);\r\n      return undefined; // Return undefined when an error occurs\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <MyModal\r\n        isOpen={modalShow}\r\n        closeModal={() => setModalshow(false)}\r\n        modalData={modalData}\r\n        promptText={promptText}\r\n        setPromptText={setPromptText}\r\n        toastr={toastr}\r\n      />\r\n      <div\r\n        style={{ flexDirection: \"row\", height: \"100%\", width: \"100\" }}\r\n        id=\"myGrid\"\r\n      >\r\n        <div className=\"d-flex justify-content-between align-items-center\">\r\n          {(refresh_sec == undefined || refresh_sec == 0) && (\r\n            <div style={{ display: \"flex\" }}>\r\n              <div style={{ margin: \"10px 10px 10px 2px\" }}>\r\n                <button className=\"btn btn-warning\" onClick={onRefresh}>\r\n                  Refresh\r\n                </button>\r\n              </div>\r\n              <div style={{ margin: \"10px 10px 10px 2px\" }}>\r\n                <button className=\"btn btn-success\" onClick={onUpdate}>\r\n                  Update\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n          <div className=\"d-flex flex-row gap-6\">\r\n            {toggle_views?.map((view: string, index: number) => (\r\n              <span className=\"\">\r\n                <button\r\n                  className={`btn ${\r\n                    viewId == index ? \"btn-danger\" : \"btn-secondary\"\r\n                  }`}\r\n                  onClick={() => setViewId(index)}\r\n                >\r\n                  {view}\r\n                </button>\r\n              </span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={grid_options.theme || \"ag-theme-alpine-dark\"}\r\n          style={{\r\n            width: \"100%\",\r\n            height: kwargs[\"grid_height\"] ? kwargs[\"grid_height\"] : \"100%\",\r\n          }}\r\n        >\r\n          <AgGridReact\r\n            ref={gridRef}\r\n            rowData={rowData}\r\n            // defaultColDef={defaultColDef}\r\n            getRowStyle={getRowStyle}\r\n            rowStyle={{ fontSize: 12, padding: 0 }}\r\n            headerHeight={30}\r\n            rowHeight={30}\r\n            onGridReady={onGridReady}\r\n            autoGroupColumnDef={autoGroupColumnDef}\r\n            // sideBar={sideBar}\r\n            animateRows={true}\r\n            suppressAggFuncInHeader={true}\r\n            getRowId={getRowId}\r\n            gridOptions={grid_options}\r\n            onCellValueChanged={onCellValueChanged}\r\n            columnTypes={columnTypes}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AgGrid\r\n","import React, { useEffect, useState } from 'react'\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from 'streamlit-component-lib'\nimport 'ag-grid-community/styles/ag-grid.css'\n// import 'ag-grid-community/styles/ag-theme-alpine.css';\nimport 'ag-grid-community/styles/ag-theme-balham.css'\nimport Aggrid from './Aggrid'\n\nconst Main = (props: ComponentProps) => {\n  const {\n    username,\n    api,\n    api_update,\n    refresh_sec,\n    refresh_cutoff_sec,\n    gridoption_build,\n    prod,\n  } = props.args\n  const { grid_options, kwargs = {} } = props.args\n  const { index, theme } = grid_options\n  console.log('AAAAAAAA', grid_options)\n  return (\n    <div>\n      <Aggrid\n        username={username}\n        api={api}\n        api_update={api_update}\n        refresh_sec={refresh_sec}\n        refresh_cutoff_sec={refresh_cutoff_sec}\n        gridoption_build={gridoption_build}\n        prod={prod}\n        grid_options={grid_options}\n        index={index}\n        kwargs={kwargs}\n      />\n    </div>\n  )\n}\n\nexport default withStreamlitConnection(Main)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Main from \"./Main\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}