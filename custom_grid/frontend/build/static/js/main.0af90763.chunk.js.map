{"version":3,"sources":["components/Modal.jsx","Aggrid.tsx","Main.tsx","index.tsx"],"names":["ReactModal","setAppElement","isExecuting","MyModal","_ref","isOpen","closeModal","modalData","promptText","setPromptText","toastr","prompt_field","prompt_order_rules","selectedRow","selectedField","ref","useRef","selectRef","useEffect","setTimeout","current","focus","Array","isArray","React","createElement","className","style","display","prompt_message","onClick","name","id","defaultValue","map","item","value","type","async","console","log","body","username","prod","selected_row","default_value","kwargs","data","res","axios","post","button_api","status","description","message_type","success","alert","error","close_modal","message","rule","index","key","width","checked","onChange","e","target","i","rows","cols","placeholder","g_rowdata","g_newRowData","dateFormatter","isoString","formaterString","date","Date","format","currencyFormatter","number","currencySymbol","n","Number","parseFloat","isNaN","toFixed","numberFormatter","precision","HyperlinkRenderer","props","href","concat","column","colDef","baseURL","options","positionClass","hideDuration","timeOut","AgGrid","BtnCellRenderer","btnClickedHandler","clicked","node","background","borderColor","col_header","buttonName","gridRef","api","api_update","refresh_sec","refresh_cutoff_sec","grid_options","buttons","toggle_views","rowData","setRowData","useState","modalShow","setModalshow","setModalData","viewId","setViewId","Streamlit","setFrameHeight","length","button","columnDefs","push","field","headerName","pinned","cellRenderer","cellRendererParams","row_index","find","row","str","JSON","parse","replace","rules_value","window","confirm","fetchAndSetData","array","fetchData","id_array","old_id_array","toUpdate","filter","includes","toRemove","toAdd","applyTransactionAsync","update","remove","add","onRefresh","toggle_view_selection","interval","setInterval","timeout","clearInterval","clearTimeout","useCallback","skipHeader","allColumnIds","columnApi","getColumns","forEach","getId","autoSizeColumns","sizeColumnsToFit","defaultMinWidth","onGridReady","autoGroupColumnDef","useMemo","minWidth","getRowId","params","onCellValueChanged","toolPanels","labelDefault","labelKey","iconKey","toolPanel","defaultToolPanel","event","columnTypes","dateColumnFilter","filterParams","comparator","filterValue","cellValue","compareAsc","numberColumnFilter","shortDateTimeFormat","valueFormatter","customDateTimeFormat","custom_format_string","customNumericFormat","_params$column$colDef2","customCurrencyFormat","custom_currency_symbol","timedeltaFormat","duration","humanize","customNumberFormat","toLocaleString","minimumFractionDigits","customHyperlinkRenderer","Fragment","flexDirection","height","undefined","margin","new_data","warning","view","theme","AgGridReact","getRowStyle","color","rowStyle","fontSize","padding","headerHeight","rowHeight","animateRows","suppressAggFuncInHeader","gridOptions","withStreamlitConnection","gridoption_build","args","Aggrid","ReactDOM","render","StrictMode","Main","document","getElementById"],"mappings":"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","file":"static/js/main.0af90763.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\"\nimport ReactModal from \"react-modal\"\nimport \"./modal.css\"\nimport axios from \"axios\"\n\nconst modalStyle = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"yellow\",\n  },\n}\nReactModal.setAppElement(\"#root\")\nlet isExecuting = false\n\nconst MyModal = ({\n  isOpen,\n  closeModal,\n  modalData,\n  promptText,\n  setPromptText,\n  toastr,\n}) => {\n  const { prompt_field, prompt_order_rules, selectedRow, selectedField } =\n    modalData\n\n  const ref = useRef()\n  const selectRef = useRef()\n\n  const handleOk = async () => {\n    if (isExecuting) return\n    isExecuting = true\n    try {\n      const { data: res } = await axios.post(modalData.button_api, {\n        username: modalData.username,\n        prod: modalData.prod,\n        selected_row: modalData.selectedRow,\n        default_value: promptText,\n        ...modalData.kwargs,\n      })\n      const { status, data, description } = res\n      console.log(\"res :>> \", res)\n      if (status == \"success\") {\n        data.message_type == \"fade\"\n          ? toastr.success(description, \"Success\")\n          : alert(\"Success!\\nDescription: \" + description)\n      } else {\n        data.message_type == \"fade\"\n          ? toastr.error(description, \"Error\")\n          : alert(\"Error!\\nDescription: \" + description)\n      }\n      if (data?.close_modal != false) closeModal()\n    } catch (error) {\n      console.log(\"error :>> \", error)\n      toastr.error(error.message)\n    }\n    isExecuting = false\n  }\n\n  const handleOkSecond = async () => {\n    if (isExecuting) return\n    isExecuting = true\n    try {\n      const body = {\n        username: modalData.username,\n        prod: modalData.prod,\n        selected_row: modalData.selectedRow,\n        default_value: promptText,\n        ...modalData.kwargs,\n      }\n      console.log(\"body :>> \", body)\n      const { data: res } = await axios.post(modalData.button_api, body)\n      const { status, data, description } = res\n      if (status == \"success\") {\n        data.message_type == \"fade\"\n          ? toastr.success(description, \"Success\")\n          : alert(\"Success!\\nDescription: \" + description)\n      } else {\n        data.message_type == \"fade\"\n          ? toastr.error(description, \"Error\")\n          : alert(\"Error!\\nDescription: \" + description)\n      }\n      if (data?.close_modal != false) closeModal()\n    } catch (error) {\n      console.log(\"error :>> \", error)\n      toastr.error(error.message)\n    }\n    isExecuting = false\n  }\n\n  const handleOkOnArray = async () => {\n    console.log(\"selectRef.current.value :>> \", selectRef.current.value)\n    if (isExecuting) return\n    isExecuting = true\n    try {\n      const body = {\n        username: modalData.username,\n        prod: modalData.prod,\n        selected_row: modalData.selectedRow,\n        default_value: selectRef.current.value,\n        ...modalData.kwargs,\n      }\n      console.log(\"body :>> \", body)\n      const { data: res } = await axios.post(modalData.button_api, body)\n      const { status, data, description } = res\n      console.log(\"res :>> \", res)\n      if (status == \"success\") {\n        data.message_type == \"fade\"\n          ? toastr.success(description, \"Success\")\n          : alert(\"Success!\\nDescription: \" + description)\n      } else {\n        data.message_type == \"fade\"\n          ? toastr.error(description, \"Error\")\n          : alert(\"Error!\\nDescription: \" + description)\n      }\n      if (data?.close_modal != false) closeModal()\n    } catch (error) {\n      console.log(\"error :>> \", error)\n      toastr.error(error.message)\n    }\n    isExecuting = false\n  }\n\n  useEffect(() => {\n    if (isOpen) setTimeout(() => ref.current.focus(), 100)\n  }, [isOpen])\n\n  if (Array.isArray(selectedField))\n    return (\n      <div className=\"my-modal\" style={{ display: isOpen ? \"block\" : \"none\" }}>\n        <div className=\"my-modal-content\">\n          <div className=\"modal-header px-4\">\n            <h4>{modalData.prompt_message}</h4>\n            <span className=\"close\" onClick={closeModal}>\n              &times;\n            </span>\n          </div>\n          <div className=\"modal-body p-2\">\n            <label className=\"px-1\">{prompt_field} </label>\n            <select\n              name=\"cars\"\n              id=\"cars\"\n              defaultValue={selectedField[0]}\n              ref={selectRef}\n            >\n              {selectedField.map((item) => (\n                <option value={item}>{item}</option>\n              ))}\n            </select>\n          </div>\n          <div className=\"modal-footer\">\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={handleOkOnArray}\n              ref={ref}\n            >\n              Ok\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              onClick={closeModal}\n            >\n              Cancel\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n\n  if (prompt_order_rules)\n    return (\n      <div className=\"my-modal\" style={{ display: isOpen ? \"block\" : \"none\" }}>\n        <div className=\"my-modal-content\">\n          <div className=\"modal-header px-4\">\n            <h4>{modalData.prompt_message}</h4>\n            <span className=\"close\" onClick={closeModal}>\n              &times;\n            </span>\n          </div>\n          <div className=\"modal-body p-2\">\n            {prompt_order_rules.map((rule, index) => {\n              if (typeof promptText[rule] == \"boolean\")\n                return (\n                  <div\n                    className=\"d-flex flex-row justify-content-end\"\n                    key={index}\n                  >\n                    <label className=\"d-flex flex-row\">\n                      {rule + \":  \"}\n                      <div className=\"px-2\" style={{ width: \"193px\" }}>\n                        <input\n                          type=\"checkbox\"\n                          checked={promptText[rule]}\n                          onChange={(e) =>\n                            setPromptText({\n                              ...promptText,\n                              [rule]: e.target.checked,\n                            })\n                          }\n                        />\n                      </div>\n                    </label>\n                  </div>\n                )\n              // If it's a list, render a select input\n              else if (Array.isArray(promptText[rule])) {\n                return (\n                  <div className=\"d-flex flex-row justify-content-end\" key={index}>\n                    <label>\n                      {rule + \":  \"}\n                      <select\n                        value={promptText[rule][0]} // Assuming the first option is selected by default\n                        onChange={(e) =>\n                          setPromptText({\n                            ...promptText,\n                            [rule]: [e.target.value],\n                          })\n                        }\n                      >\n                        {promptText[rule].map((item, i) => (\n                          <option key={i} value={item}>\n                            {item}\n                          </option>\n                        ))}\n                      </select>\n                    </label>\n                  </div>\n                );\n              }\n              return (\n                <div\n                  className=\"d-flex flex-row justify-content-end\"\n                  key={index}\n                >\n                  <label>\n                    {rule + \":  \"}\n                    <input\n                      type=\"text\"\n                      value={promptText[rule]}\n                      onChange={(e) =>\n                        setPromptText({ ...promptText, [rule]: e.target.value })\n                      }\n                    />\n                  </label>\n                </div>\n              )\n            })}\n          </div>\n          <div className=\"modal-footer\">\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={handleOkSecond}\n              ref={ref}\n            >\n              Ok\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              onClick={closeModal}\n            >\n              Cancel\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n\n  return (\n    <div className=\"my-modal\" style={{ display: isOpen ? \"block\" : \"none\" }}>\n      <div className=\"my-modal-content\">\n        <div className=\"modal-header px-4\">\n          <h4>{modalData.prompt_message}</h4>\n          <span className=\"close\" onClick={closeModal}>\n            &times;\n          </span>\n        </div>\n        <div className=\"modal-body p-2\">\n          <textarea\n            className=\"form-control\"\n            rows={4}\n            cols={50}\n            type=\"text\"\n            value={promptText}\n            placeholder=\"Please input text\"\n            onChange={(e) => setPromptText(e.target.value)}\n          />\n        </div>\n        <div className=\"modal-footer\">\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={handleOk}\n            ref={ref}\n          >\n            Ok\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            onClick={closeModal}\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default MyModal\n","import React, {\r\n  useState,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useCallback,\r\n  StrictMode,\r\n} from \"react\"\r\nimport { AgGridReact } from \"ag-grid-react\"\r\nimport toastr from \"toastr\"\r\nimport \"toastr/build/toastr.min.css\"\r\nimport \"ag-grid-community/styles/ag-grid.css\"\r\nimport \"ag-grid-community/styles/ag-theme-alpine.css\"\r\nimport \"ag-grid-community/styles/ag-theme-balham.css\"\r\nimport \"ag-grid-community/styles/ag-theme-material.css\"\r\nimport Modal from \"react-modal\"\r\nimport \"ag-grid-enterprise\"\r\nimport { parseISO, compareAsc } from \"date-fns\"\r\nimport { format } from \"date-fns-tz\"\r\nimport { duration } from \"moment\"\r\nimport \"./styles.css\"\r\nimport axios from \"axios\"\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport {\r\n  ColDef,\r\n  ColGroupDef,\r\n  ColumnResizedEvent,\r\n  GetRowIdFunc,\r\n  GetRowIdParams,\r\n  Grid,\r\n  GridOptions,\r\n  GridReadyEvent,\r\n  SideBarDef,\r\n  ValueParserParams,\r\n} from \"ag-grid-community\"\r\nimport MyModal from \"./components/Modal\"\r\nimport { order_rules_default } from \"./utils/order_rules\"\r\n\r\ntype Props = {\r\n  username: string\r\n  api: string\r\n  api_update: string\r\n  refresh_sec?: number\r\n  refresh_cutoff_sec?: number\r\n  gridoption_build?: any\r\n  prod?: boolean\r\n  grid_options?: any\r\n  index: string\r\n  kwargs: any\r\n}\r\n\r\nlet g_rowdata: any[] = []\r\nlet g_newRowData: any = null\r\n\r\nfunction dateFormatter(isoString: string, formaterString: string): String {\r\n  try {\r\n    let date = new Date(isoString)\r\n    return format(date, formaterString)\r\n  } catch {\r\n    return isoString\r\n  } finally {\r\n  }\r\n}\r\n\r\nfunction currencyFormatter(number: any, currencySymbol: string): String {\r\n  let n = Number.parseFloat(number)\r\n  if (!Number.isNaN(n)) {\r\n    return currencySymbol + n.toFixed(2)\r\n  } else {\r\n    return number\r\n  }\r\n}\r\n\r\nfunction numberFormatter(number: any, precision: number): String {\r\n  let n = Number.parseFloat(number)\r\n  if (!Number.isNaN(n)) {\r\n    return n.toFixed(precision)\r\n  } else {\r\n    return number\r\n  }\r\n}\r\n\r\nconst columnFormaters = {\r\n  columnTypes: {\r\n    dateColumnFilter: {\r\n      filter: \"agDateColumnFilter\",\r\n      filterParams: {\r\n        comparator: (filterValue: any, cellValue: string) =>\r\n          compareAsc(parseISO(cellValue), filterValue),\r\n      },\r\n    },\r\n    numberColumnFilter: {\r\n      filter: \"agNumberColumnFilter\",\r\n    },\r\n    shortDateTimeFormat: {\r\n      valueFormatter: (params: any) =>\r\n        dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n    },\r\n    customDateTimeFormat: {\r\n      valueFormatter: (params: any) =>\r\n        dateFormatter(params.value, params.column.colDef.custom_format_string),\r\n    },\r\n    customNumericFormat: {\r\n      valueFormatter: (params: any) =>\r\n        numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n    },\r\n    customCurrencyFormat: {\r\n      valueFormatter: (params: any) =>\r\n        currencyFormatter(\r\n          params.value,\r\n          params.column.colDef.custom_currency_symbol\r\n        ),\r\n    },\r\n    timedeltaFormat: {\r\n      valueFormatter: (params: any) => duration(params.value).humanize(true),\r\n    },\r\n  },\r\n}\r\n\r\nconst HyperlinkRenderer = (props: any) => {\r\n  return (\r\n    <a\r\n      href={`${props.column.colDef.baseURL}/${\r\n        props.data[props.column.colDef[\"linkField\"]]\r\n      }`}\r\n      target=\"_blank\"\r\n    >\r\n      {props.value}\r\n    </a>\r\n  )\r\n}\r\n\r\ntoastr.options = {\r\n  positionClass: \"toast-top-full-width\",\r\n  hideDuration: 300,\r\n  timeOut: 3000,\r\n}\r\n\r\nconst AgGrid = (props: Props) => {\r\n  const BtnCellRenderer = (props: any) => {\r\n    const btnClickedHandler = () => {\r\n      props.clicked(props.node.id)\r\n    }\r\n    return (\r\n      <button\r\n        onClick={btnClickedHandler}\r\n        style={{\r\n          background: \"transparent\",\r\n          width: \"100%\",\r\n          borderColor: props.borderColor ? props.borderColor : \"black\",\r\n        }}\r\n      >\r\n        {props.col_header ? props.value : props.buttonName}\r\n      </button>\r\n    )\r\n  }\r\n\r\n  const gridRef = useRef<AgGridReact>(null)\r\n  const {\r\n    username,\r\n    api,\r\n    api_update,\r\n    refresh_sec = undefined,\r\n    refresh_cutoff_sec = 0,\r\n    prod = true,\r\n    index,\r\n    kwargs,\r\n  } = props\r\n  let { grid_options = {} } = props\r\n  const { buttons, toggle_views } = kwargs\r\n  const [rowData, setRowData] = useState<any[]>([])\r\n  const [modalShow, setModalshow] = useState(false)\r\n  const [modalData, setModalData] = useState({})\r\n  const [promptText, setPromptText] = useState(\"\")\r\n  const [viewId, setViewId] = useState(0)\r\n\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight()\r\n    if (buttons.length) {\r\n      buttons.map((button: any) => {\r\n        const { prompt_field, prompt_message, button_api, prompt_order_rules } =\r\n          button\r\n        grid_options.columnDefs!.push({\r\n          field: button[\"col_header\"] ? button[\"col_header\"] : index,\r\n          headerName: button[\"col_headername\"],\r\n          width: button[\"col_width\"],\r\n          pinned: button[\"pinned\"],\r\n          cellRenderer: BtnCellRenderer,\r\n          cellRendererParams: {\r\n            col_header: button[\"col_header\"],\r\n            buttonName: button[\"button_name\"],\r\n            borderColor: button[\"border_color\"],\r\n            clicked: async function (row_index: any) {\r\n              try {\r\n                const selectedRow = g_rowdata.find(\r\n                  (row) => row[index] == row_index\r\n                )\r\n                if (prompt_order_rules) {\r\n                  const str = selectedRow[prompt_field]\r\n                  const selectedField =\r\n                    typeof str === \"string\"\r\n                      ? JSON.parse(\r\n                          selectedRow[prompt_field]\r\n                            .replace(/'/g, '\"')\r\n                            .replace(/\\n/g, \"\")\r\n                            .replace(/\\s/g, \"\")\r\n                            .replace(/False/g, \"false\")\r\n                            .replace(/True/g, \"true\")\r\n                        )\r\n                      : str\r\n                  setModalshow(true)\r\n                  setModalData({\r\n                    prompt_message,\r\n                    button_api: button_api,\r\n                    username: username,\r\n                    prod: prod,\r\n                    selectedRow: selectedRow,\r\n                    kwargs: kwargs,\r\n                    prompt_field,\r\n                    prompt_order_rules,\r\n                    selectedField,\r\n                  })\r\n                  const rules_value: any = {}\r\n                  prompt_order_rules.map((rule: string) => {\r\n                    rules_value[rule] = selectedField[rule]\r\n                  })\r\n                  setPromptText(rules_value)\r\n                } else if (prompt_field && prompt_message) {\r\n                  setModalshow(true)\r\n                  setModalData({\r\n                    prompt_message,\r\n                    button_api: button_api,\r\n                    username: username,\r\n                    prod: prod,\r\n                    selectedRow: selectedRow,\r\n                    kwargs: kwargs,\r\n                  })\r\n                  setPromptText(selectedRow[prompt_field])\r\n                  // const num = prompt(prompt_message, selectedRow[prompt_field]);\r\n                  // if (num == null) return;\r\n                  // const res = await axios.post(button_api, {\r\n                  //   username: username,\r\n                  //   prod: prod,\r\n                  //   selected_row: selectedRow,\r\n                  //   default_value: num,\r\n                  //   ...kwargs,\r\n                  // })\r\n                } else {\r\n                  if (window.confirm(prompt_message)) {\r\n                    const res = await axios.post(button_api, {\r\n                      username: username,\r\n                      prod: prod,\r\n                      selected_row: selectedRow,\r\n                      ...kwargs,\r\n                    })\r\n                  }\r\n                  toastr.success(\"Success!\")\r\n                }\r\n              } catch (error) {\r\n                alert(`${error}`)\r\n              }\r\n            },\r\n          },\r\n        })\r\n      })\r\n    }\r\n    // parseGridoptions()\r\n  })\r\n\r\n  const fetchAndSetData = async () => {\r\n    const array = await fetchData()\r\n    if (array === false) return false\r\n    const api = gridRef.current!.api\r\n    const id_array = array.map((item: any) => item[index])\r\n    const old_id_array = g_rowdata.map((item: any) => item[index])\r\n    const toUpdate = array.filter((row: any) => id_array.includes(row[index]))\r\n    const toRemove = g_rowdata.filter((row) => !id_array.includes(row[index]))\r\n    const toAdd = array.filter((row: any) => !old_id_array.includes(row[index]))\r\n    api.applyTransactionAsync({\r\n      update: toUpdate,\r\n      remove: toRemove,\r\n      add: toAdd,\r\n    })\r\n    g_rowdata = array\r\n    return true\r\n  }\r\n\r\n  useEffect(() => {\r\n    onRefresh()\r\n  }, [viewId])\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const res = await axios.post(api, {\r\n        username: username,\r\n        prod: prod,\r\n        ...kwargs,\r\n        toggle_view_selection: toggle_views ? toggle_views[viewId] : \"none\",\r\n      })\r\n      const array = JSON.parse(res.data)\r\n      console.log(\r\n        \"toggle_views[viewId],viewId :>> \",\r\n        toggle_views[viewId],\r\n        viewId\r\n      )\r\n      console.log(\"table data :>> \", array)\r\n      if (array.status == false) {\r\n        toastr.error(`Fetch Error: ${array.message}`)\r\n        return false\r\n      }\r\n      return array\r\n    } catch (error: any) {\r\n      toastr.error(`Fetch Error: ${error.message}`)\r\n      return false\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (refresh_sec && refresh_sec > 0) {\r\n      const interval = setInterval(fetchAndSetData, refresh_sec * 1000)\r\n      let timeout: NodeJS.Timeout\r\n      if (refresh_cutoff_sec > 0) {\r\n        console.log(refresh_cutoff_sec)\r\n        timeout = setTimeout(() => {\r\n          clearInterval(interval)\r\n          console.log(\"Fetching data ended, refresh rate:\", refresh_sec)\r\n        }, refresh_cutoff_sec * 1000)\r\n      }\r\n      console.error(\"rendered==========\", props)\r\n      return () => {\r\n        clearInterval(interval)\r\n        if (timeout) clearTimeout(timeout)\r\n      }\r\n    }\r\n  }, [props, viewId])\r\n\r\n  const autoSizeAll = useCallback((skipHeader: boolean) => {\r\n    const allColumnIds: string[] = []\r\n    gridRef.current!.columnApi.getColumns()!.forEach((column: any) => {\r\n      allColumnIds.push(column.getId())\r\n    })\r\n    gridRef.current!.columnApi.autoSizeColumns(allColumnIds, skipHeader)\r\n  }, [])\r\n\r\n  const sizeToFit = useCallback(() => {\r\n    gridRef.current!.api.sizeColumnsToFit({\r\n      defaultMinWidth: 100,\r\n    })\r\n  }, [])\r\n\r\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\r\n    setTimeout(async () => {\r\n      try {\r\n        const array = await fetchData()\r\n        // console.log(\"AAAAAAAAAAAAAAAAAAAAAAA\", array)\r\n        if (array == false) {\r\n          // toastr.error(`Error: ${array.message}`)\r\n          return\r\n        }\r\n        setRowData(array)\r\n        g_rowdata = array\r\n      } catch (error: any) {\r\n        toastr.error(`Error: ${error.message}`)\r\n      }\r\n    }, 100)\r\n  }, [])\r\n\r\n  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n    return {\r\n      minWidth: 200,\r\n    }\r\n  }, [])\r\n\r\n  const getRowId = useMemo<GetRowIdFunc>(() => {\r\n    return (params: GetRowIdParams) => {\r\n      return params.data[index]\r\n    }\r\n  }, [index])\r\n\r\n  const sideBar = useMemo<\r\n    SideBarDef | string | string[] | boolean | null\r\n  >(() => {\r\n    return {\r\n      toolPanels: [\r\n        {\r\n          id: \"columns\",\r\n          labelDefault: \"Columns\",\r\n          labelKey: \"columns\",\r\n          iconKey: \"columns\",\r\n          toolPanel: \"agColumnsToolPanel\",\r\n        },\r\n        {\r\n          id: \"filters\",\r\n          labelDefault: \"Filters\",\r\n          labelKey: \"filters\",\r\n          iconKey: \"filter\",\r\n          toolPanel: \"agFiltersToolPanel\",\r\n        },\r\n      ],\r\n      defaultToolPanel: \"customStats\",\r\n    }\r\n  }, [])\r\n\r\n  const onCellValueChanged = useCallback((event) => {\r\n    if (g_newRowData == null) g_newRowData = {}\r\n    g_newRowData[event.data[index]] = event.data\r\n    console.log(\"Data after change is\", g_newRowData)\r\n  }, [])\r\n\r\n  const onRefresh = async () => {\r\n    try {\r\n      const success = await fetchAndSetData()\r\n      success && toastr.success(\"Refresh success!\")\r\n    } catch (error: any) {\r\n      toastr.error(`Refresh Failed! ${error.message}`)\r\n    }\r\n  }\r\n\r\n  const onUpdate = async () => {\r\n    if (g_newRowData == null) {\r\n      toastr.warning(`No changes to update`)\r\n      return\r\n    }\r\n    try {\r\n      const res: any = await axios.post(api_update, {\r\n        username: username,\r\n        prod: prod,\r\n        new_data: g_newRowData,\r\n        ...kwargs,\r\n      })\r\n      g_newRowData = null\r\n      if (res.status) toastr.success(`Successfully Updated! `)\r\n      else toastr.error(`Failed! ${res.message}`)\r\n    } catch (error) {\r\n      toastr.error(`Failed! ${error}`)\r\n    }\r\n  }\r\n\r\n  const columnTypes = useMemo<any>(() => {\r\n    return {\r\n      dateColumnFilter: {\r\n        filter: \"agDateColumnFilter\",\r\n        filterParams: {\r\n          comparator: (filterValue: any, cellValue: string) =>\r\n            compareAsc(new Date(cellValue), filterValue),\r\n        },\r\n      },\r\n      numberColumnFilter: {\r\n        filter: \"agNumberColumnFilter\",\r\n      },\r\n      shortDateTimeFormat: {\r\n        valueFormatter: (params: any) =>\r\n          dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n      },\r\n      customDateTimeFormat: {\r\n        valueFormatter: (params: any) =>\r\n          dateFormatter(\r\n            params.value,\r\n            params.column.colDef.custom_format_string\r\n          ),\r\n      },\r\n      customNumericFormat: {\r\n        valueFormatter: (params: any) =>\r\n          numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n      },\r\n      customCurrencyFormat: {\r\n        valueFormatter: (params: any) =>\r\n          currencyFormatter(\r\n            params.value,\r\n            params.column.colDef.custom_currency_symbol\r\n          ),\r\n      },\r\n      timedeltaFormat: {\r\n        valueFormatter: (params: any) => duration(params.value).humanize(true),\r\n      },\r\n      customNumberFormat: {\r\n        valueFormatter: (params: any) =>\r\n          Number(params.value).toLocaleString(\"en-US\", {\r\n            minimumFractionDigits: 0,\r\n          }),\r\n      },\r\n      customHyperlinkRenderer: {\r\n        // valueGetter: (params: any) =>\r\n        //   params.column.colDef.baseURL + params.data.honey,\r\n        cellRenderer: HyperlinkRenderer,\r\n        cellRendererParams: {\r\n          baseURL: \"URLSearchParams.co\",\r\n        },\r\n      },\r\n    }\r\n  }, [])\r\n\r\n  const onClick = () => {\r\n    toastr.clear()\r\n    setTimeout(() => toastr.success(`Settings updated `), 300)\r\n  }\r\n\r\n  const getRowStyle = (params: any) => {\r\n    return {\r\n      background: params.data[\"color_row\"],\r\n      color: params.data[\"color_row_text\"],\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MyModal\r\n        isOpen={modalShow}\r\n        closeModal={() => setModalshow(false)}\r\n        modalData={modalData}\r\n        promptText={promptText}\r\n        setPromptText={setPromptText}\r\n        toastr={toastr}\r\n      ></MyModal>\r\n      <div\r\n        style={{ flexDirection: \"row\", height: \"100%\", width: \"100\" }}\r\n        id=\"myGrid\"\r\n      >\r\n        <div className=\"d-flex justify-content-between align-items-center\">\r\n          {(refresh_sec == undefined || refresh_sec == 0) && (\r\n            <div style={{ display: \"flex\" }}>\r\n              <div style={{ margin: \"10px 10px 10px 2px\" }}>\r\n                <button className=\"btn btn-warning\" onClick={onRefresh}>\r\n                  Refresh\r\n                </button>\r\n              </div>\r\n              <div style={{ margin: \"10px 10px 10px 2px\" }}>\r\n                <button className=\"btn btn-success\" onClick={onUpdate}>\r\n                  Update\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n          <div className=\"d-flex flex-row gap-6\">\r\n            {toggle_views?.map((view: string, index: number) => (\r\n              <span className=\"\">\r\n                <button\r\n                  className={`btn ${\r\n                    viewId == index ? \"btn-danger\" : \"btn-secondary\"\r\n                  }`}\r\n                  onClick={() => setViewId(index)}\r\n                >\r\n                  {view}\r\n                </button>\r\n              </span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={grid_options.theme || \"ag-theme-alpine-dark\"}\r\n          style={{\r\n            width: \"100%\",\r\n            height: kwargs[\"grid_height\"] ? kwargs[\"grid_height\"] : \"100%\",\r\n          }}\r\n        >\r\n          <AgGridReact\r\n            ref={gridRef}\r\n            rowData={rowData}\r\n            // defaultColDef={defaultColDef}\r\n            getRowStyle={getRowStyle}\r\n            rowStyle={{ fontSize: 12, padding: 0 }}\r\n            headerHeight={30}\r\n            rowHeight={30}\r\n            onGridReady={onGridReady}\r\n            autoGroupColumnDef={autoGroupColumnDef}\r\n            // sideBar={sideBar}\r\n            animateRows={true}\r\n            suppressAggFuncInHeader={true}\r\n            getRowId={getRowId}\r\n            gridOptions={grid_options}\r\n            onCellValueChanged={onCellValueChanged}\r\n            columnTypes={columnTypes}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AgGrid\r\n","import React, { useEffect, useState } from 'react'\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from 'streamlit-component-lib'\nimport 'ag-grid-community/styles/ag-grid.css'\n// import 'ag-grid-community/styles/ag-theme-alpine.css';\nimport 'ag-grid-community/styles/ag-theme-balham.css'\nimport Aggrid from './Aggrid'\n\nconst Main = (props: ComponentProps) => {\n  const {\n    username,\n    api,\n    api_update,\n    refresh_sec,\n    refresh_cutoff_sec,\n    gridoption_build,\n    prod,\n  } = props.args\n  const { grid_options, kwargs = {} } = props.args\n  const { index, theme } = grid_options\n  console.log('AAAAAAAA', grid_options)\n  return (\n    <div>\n      <Aggrid\n        username={username}\n        api={api}\n        api_update={api_update}\n        refresh_sec={refresh_sec}\n        refresh_cutoff_sec={refresh_cutoff_sec}\n        gridoption_build={gridoption_build}\n        prod={prod}\n        grid_options={grid_options}\n        index={index}\n        kwargs={kwargs}\n      />\n    </div>\n  )\n}\n\nexport default withStreamlitConnection(Main)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Main from \"./Main\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}