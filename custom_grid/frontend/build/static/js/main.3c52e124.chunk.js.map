{"version":3,"sources":["Aggrid.tsx","Main.tsx","index.tsx"],"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","g_rowdata","g_newRowData","AgGrid","props","BtnCellRenderer","React","createElement","onClick","clicked","button_name","gridRef","useRef","username","api","_props$refresh_sec","refresh_sec","_props$refresh_cutoff","refresh_cutoff_sec","_props$prod","prod","api_url","_props$grid_options","grid_options","index","kwargs","_useState","useState","_useState2","_slicedToArray","rowData","setRowData","useEffect","Streamlit","setFrameHeight","columnDefs","field","headerName","width","cellRenderer","cellRendererParams","_clicked","_asyncToGenerator","_callee","num","_context","console","log","find","row","client_order_id","qty_available","prompt","axios","post","number_shares","alert","t0","concat","_x","apply","arguments","pinned","fetchAndSetData","_ref","_callee2","array","id_array","old_id_array","toUpdate","toRemove","toAdd","_context2","fetchData","current","map","item","filter","includes","applyTransactionAsync","update","remove","add","_ref2","_callee3","res","_context3","JSON","parse","data","timeout","interval","setInterval","setTimeout","clearInterval","clearTimeout","useCallback","skipHeader","allColumnIds","columnApi","getColumns","column","getId","autoSizeColumns","sizeColumnsToFit","defaultMinWidth","onGridReady","_ref4","_callee6","params","_context6","_callee5","_context5","_x3","autoGroupColumnDef","useMemo","minWidth","getRowId","sideBar","toolPanels","id","labelDefault","labelKey","iconKey","toolPanel","defaultToolPanel","onCellValueChanged","event","onRefresh","_ref6","_callee7","_context7","onUpdate","_ref7","_callee8","_context8","new_data","status","message","style","flexDirection","height","display","margin","className","AgGridReact","ref","rowStyle","fontSize","padding","headerHeight","rowHeight","animateRows","suppressAggFuncInHeader","gridOptions","withStreamlitConnection","_props$args","args","gridoption_build","_props$args2","Aggrid","ReactDOM","render","StrictMode","Main","document","getElementById"],"mappings":"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","file":"static/js/main.3c52e124.chunk.js","sourcesContent":["import React, { useState, useEffect, useMemo, useRef, useCallback, StrictMode } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\r\nimport 'ag-grid-enterprise';\r\nimport './styles.css';\r\nimport axios from \"axios\"\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport {\r\n  ColDef,\r\n  ColGroupDef,\r\n  ColumnResizedEvent,\r\n  GetRowIdFunc,\r\n  GetRowIdParams,\r\n  Grid,\r\n  GridOptions,\r\n  GridReadyEvent,\r\n  SideBarDef,\r\n  ValueParserParams,\r\n} from 'ag-grid-community';\r\n\r\ntype Props = {\r\n  username: string,\r\n  api: string,\r\n  refresh_sec?: number,\r\n  refresh_cutoff_sec?: number,\r\n  gridoption_build?: any,\r\n  prod?: boolean,\r\n  api_url: string,\r\n  button_name: string,\r\n  grid_options?: GridOptions<any>,\r\n  index: string,\r\n  kwargs: any,\r\n}\r\n\r\nlet g_rowdata: any[] = [];\r\nlet g_newRowData: any = null\r\n\r\nconst AgGrid = (props: Props) => {\r\n\r\n  const BtnCellRenderer = (props: any) => {\r\n    const btnClickedHandler = () => {\r\n      props.clicked(props.value);\r\n    }\r\n\r\n    return (\r\n      <button onClick={btnClickedHandler}>{button_name}</button>\r\n    )\r\n  }\r\n\r\n  const gridRef = useRef<AgGridReact>(null);\r\n  const { username, api, refresh_sec = undefined, refresh_cutoff_sec = 0, prod = true, api_url, button_name, grid_options = {}, index, kwargs } = props;\r\n  const [rowData, setRowData] = useState<any[]>([]);\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight()\r\n    grid_options.columnDefs!.push({\r\n      field: \"client_order_id\",\r\n      headerName: 'action',\r\n      width: 80,\r\n      cellRenderer: BtnCellRenderer,\r\n      cellRendererParams: {\r\n        clicked: async function (field: any) {\r\n          try {\r\n            console.log('g_rowdata.find((row) => row.client_order_id == field).qty_available :>> ', g_rowdata.find((row) => row.client_order_id == field).qty_available);\r\n            const num = prompt(`Please input number`, g_rowdata.find((row) => row.client_order_id == field).qty_available);\r\n            console.log(\"prompt\", num);\r\n            if (num == null) return;\r\n            const res = await axios.post(api_url, {\r\n                username: username,\r\n                prod: prod,\r\n                client_order_id: field,\r\n                number_shares: num,\r\n                kwargs,\r\n            })\r\n            alert(\"Success Sellorder_request!\");\r\n          } catch (error) {\r\n            alert(`${error}`);\r\n          }\r\n        },\r\n      },\r\n      pinned: 'right',\r\n    })\r\n  });\r\n\r\n  const fetchAndSetData = async () => {\r\n    const array = await fetchData();\r\n    const api = gridRef.current!.api;\r\n    const id_array = array.map((item: any) => item[index])\r\n    const old_id_array = g_rowdata.map((item: any) => item[index])\r\n    const toUpdate = g_rowdata.filter((row: any) => id_array.includes(row[index]))\r\n    const toRemove = g_rowdata.filter((row) => !id_array.includes(row[index]))\r\n    const toAdd = array.filter((row: any) => !old_id_array.includes(row[index]))\r\n    api.applyTransactionAsync({ update: toUpdate, remove: toRemove, add: toAdd });\r\n    g_rowdata = array\r\n    console.log(\"index\", index);\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    const res = await axios.post(api, {\r\n        username: username,\r\n        prod: prod,\r\n        kwargs,\r\n    });\r\n    const array = JSON.parse(res.data);\r\n    return array;\r\n  };\r\n\r\n  const postRowId = async (id: any) => {\r\n    const res = await axios.post(api, {\r\n      username: username,\r\n      prod: prod,\r\n      id: id,\r\n    });\r\n    return res;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (refresh_sec && refresh_sec > 0) {\r\n      const interval = setInterval(fetchAndSetData, refresh_sec * 1000);\r\n      let timeout: NodeJS.Timeout;\r\n      if (refresh_cutoff_sec > 0) {\r\n        console.log(refresh_cutoff_sec);\r\n        timeout = setTimeout(() => {\r\n          clearInterval(interval);\r\n          console.log(\"Fetching data ended, refresh rate:\", refresh_sec);\r\n        }, refresh_cutoff_sec * 1000);\r\n      }\r\n      console.error(\"rendered==========\", props);\r\n      return () => {\r\n        clearInterval(interval);\r\n        if (timeout) clearTimeout(timeout);\r\n      }\r\n    }\r\n  }, [props]);\r\n\r\n  const autoSizeAll = useCallback((skipHeader: boolean) => {\r\n    const allColumnIds: string[] = [];\r\n    gridRef.current!.columnApi.getColumns()!.forEach((column: any) => {\r\n      allColumnIds.push(column.getId());\r\n    });\r\n    gridRef.current!.columnApi.autoSizeColumns(allColumnIds, skipHeader);\r\n  }, []);\r\n\r\n  const sizeToFit = useCallback(() => {\r\n    gridRef.current!.api.sizeColumnsToFit({\r\n      defaultMinWidth: 100,\r\n    });\r\n  }, []);\r\n\r\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\r\n    setTimeout(async () => {\r\n      const array = await fetchData();\r\n      setRowData(array);\r\n      g_rowdata = array;\r\n    }, 100);\r\n  }, []);\r\n\r\n  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n    return {\r\n      minWidth: 200,\r\n    };\r\n  }, []);\r\n\r\n  const getRowId = useMemo<GetRowIdFunc>(() => {\r\n    return (params: GetRowIdParams) => {\r\n      return params.data[index];\r\n    };\r\n  }, [index]);\r\n\r\n  const sideBar = useMemo<\r\n    SideBarDef | string | string[] | boolean | null\r\n  >(() => {\r\n    return {\r\n      toolPanels: [\r\n        {\r\n          id: 'columns',\r\n          labelDefault: 'Columns',\r\n          labelKey: 'columns',\r\n          iconKey: 'columns',\r\n          toolPanel: 'agColumnsToolPanel',\r\n        },\r\n        {\r\n          id: 'filters',\r\n          labelDefault: 'Filters',\r\n          labelKey: 'filters',\r\n          iconKey: 'filter',\r\n          toolPanel: 'agFiltersToolPanel',\r\n        },\r\n      ],\r\n      defaultToolPanel: 'customStats',\r\n    };\r\n  }, []);\r\n\r\n  const onCellValueChanged = useCallback((event) => {\r\n    if (g_newRowData == null) g_newRowData = {}\r\n    g_newRowData[event.data[index]] = event.data;\r\n    console.log('Data after change is', g_newRowData);\r\n  }, []);\r\n\r\n  const onRefresh = async () => {\r\n    fetchAndSetData();\r\n  }\r\n\r\n  const onUpdate = async () => {\r\n    if (g_newRowData == null) {\r\n      alert(\"No changes\");\r\n      return;\r\n    }\r\n    try {\r\n      const res: any = await axios.post(\"http://127.0.0.1:8000/api/data/update_orders\", {\r\n        username: username,\r\n        prod: prod,\r\n        new_data: g_newRowData,\r\n        kwargs,\r\n      })\r\n      g_newRowData = null\r\n      if (res.status)\r\n        alert(\"success\"+res.data);\r\n      else alert(\"Failed\" + res.message);\r\n    } catch (error: any) {\r\n      alert(error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{ flexDirection: 'row', height: '300px', width: \"100\" }} id='myGrid'>\r\n      {\r\n        (refresh_sec == undefined || refresh_sec == 0) &&\r\n        <div style={{ display: 'flex' }}>\r\n          <div style={{ margin: \"10px 10px 10px 2px\" }}>\r\n            <button className='btn btn-warning' onClick={onRefresh}>Refresh</button>\r\n          </div>\r\n          <div style={{ margin: \"10px 10px 10px 2px\" }}>\r\n            <button className='btn btn-success' onClick={onUpdate}>Update</button>\r\n          </div>\r\n        </div>\r\n      }\r\n      <div className=\"ag-theme-alpine-dark\" style={{ width: \"100%\", height: \"100%\" }}>\r\n        <AgGridReact\r\n          ref={gridRef}\r\n          rowData={rowData}\r\n          // columnDefs={columnDefs}\r\n          // defaultColDef={defaultColDef}\r\n          rowStyle={{ fontSize: 12, padding: 0 }}\r\n          headerHeight={30}\r\n          rowHeight={30}\r\n          onGridReady={onGridReady}\r\n          autoGroupColumnDef={autoGroupColumnDef}\r\n          sideBar={sideBar}\r\n          animateRows={true}\r\n          suppressAggFuncInHeader={true}\r\n          getRowId={getRowId}\r\n          gridOptions={grid_options}\r\n          onCellValueChanged={onCellValueChanged}\r\n        />\r\n      </div>\r\n    </div >\r\n  );\r\n};\r\n\r\nexport default AgGrid;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\r\nimport Aggrid from \"./Aggrid\";\r\n\r\nconst Main = (props: ComponentProps) => {\r\n\r\n  const { username, api, refresh_sec, refresh_cutoff_sec, gridoption_build, prod } = props.args;\r\n  const { api_url, button_name, grid_options, kwargs } = props.args;\r\n  const { index } = grid_options;\r\n  console.log(\"AAAAAAAA\", grid_options.refresh_sec);\r\n  return (\r\n    <div >\r\n      <Aggrid\r\n        username={username}\r\n        api={api}\r\n        refresh_sec={refresh_sec}\r\n        refresh_cutoff_sec={refresh_cutoff_sec}\r\n        gridoption_build={gridoption_build}\r\n        prod={prod}\r\n        api_url={api_url}\r\n        button_name={button_name}\r\n        grid_options={grid_options}\r\n        index={index}\r\n        kwargs={kwargs}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withStreamlitConnection(Main);\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport Main from \"./Main\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Main />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}