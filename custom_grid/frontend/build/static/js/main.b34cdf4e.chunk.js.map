{"version":3,"sources":["components/Modal.jsx","Aggrid.tsx","Main.tsx","index.tsx"],"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","ReactModal","setAppElement","isExecuting","MyModal","_ref","isOpen","closeModal","modalData","promptText","setPromptText","toastr","prompt_field","prompt_order_rules","selectedField","selectedRow","ref","useRef","selectRef","handleOk","_ref2","_asyncToGenerator","_callee","_yield$axios$post","res","status","data","description","_context","axios","post","button_api","_objectSpread","username","prod","selected_row","default_value","kwargs","console","log","message_type","success","alert","close_modal","t0","message","apply","arguments","handleOkSecond","_ref3","_callee2","body","_yield$axios$post2","_context2","handleOkOnArray","_ref4","_callee3","_yield$axios$post3","_context3","current","useEffect","setTimeout","focus","Array","isArray","React","createElement","className","style","display","prompt_message","onClick","id","defaultValue","map","item","rule","index","width","checked","onChange","e","_defineProperty","target","rows","cols","placeholder","g_rowdata","g_newRowData","dateFormatter","isoString","formaterString","date","Date","format","_unused","currencyFormatter","number","currencySymbol","n","Number","parseFloat","toFixed","numberFormatter","precision","HyperlinkRenderer","props","href","concat","column","colDef","baseURL","options","positionClass","hideDuration","timeOut","AgGrid","BtnCellRenderer","clicked","background","borderColor","col_header","rowIndex","buttonName","gridRef","api","api_update","_props$refresh_sec","refresh_sec","_props$refresh_cutoff","refresh_cutoff_sec","_props$prod","_props$grid_options","grid_options","buttons","toggle_views","_useState","useState","_useState2","_slicedToArray","rowData","setRowData","_useState3","_useState4","modalShow","setModalshow","_useState5","_useState6","setModalData","_useState7","_useState8","_useState9","_useState10","viewId","setViewId","Streamlit","setFrameHeight","button","columnDefs","field","headerName","pinned","cellRenderer","cellRendererParams","_clicked","str","rules_value","find","row","JSON","parse","replace","window","confirm","_x","fetchAndSetData","array","id_array","old_id_array","toUpdate","toRemove","toAdd","fetchData","filter","includes","applyTransactionAsync","update","remove","add","onRefresh","toggle_view_selection","timeout","interval","setInterval","clearInterval","clearTimeout","useCallback","skipHeader","allColumnIds","columnApi","getColumns","getId","autoSizeColumns","sizeColumnsToFit","defaultMinWidth","onGridReady","_callee5","params","_context5","_callee4","_context4","_x2","autoGroupColumnDef","useMemo","minWidth","getRowId","onCellValueChanged","toolPanels","labelDefault","labelKey","iconKey","toolPanel","defaultToolPanel","event","_ref5","_callee6","_context6","onUpdate","_ref6","_callee7","_context7","warning","new_data","columnTypes","dateColumnFilter","filterParams","comparator","filterValue","cellValue","compareAsc","numberColumnFilter","shortDateTimeFormat","valueFormatter","customDateTimeFormat","custom_format_string","customNumericFormat","_params$column$colDef2","customCurrencyFormat","custom_currency_symbol","timedeltaFormat","duration","humanize","customNumberFormat","toLocaleString","minimumFractionDigits","customHyperlinkRenderer","Fragment","flexDirection","height","margin","view","theme","AgGridReact","getRowStyle","color","rowStyle","fontSize","padding","headerHeight","rowHeight","animateRows","suppressAggFuncInHeader","gridOptions","withStreamlitConnection","_props$args","args","gridoption_build","_props$args2","_props$args2$kwargs","Aggrid","ReactDOM","render","StrictMode","Main","document","getElementById"],"mappings":"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","file":"static/js/main.b34cdf4e.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\"\r\nimport ReactModal from \"react-modal\"\r\nimport \"./modal.css\"\r\nimport axios from \"axios\"\r\n\r\nconst modalStyle = {\r\n  content: {\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    right: \"auto\",\r\n    bottom: \"auto\",\r\n    marginRight: \"-50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    backgroundColor: \"yellow\",\r\n  },\r\n}\r\nReactModal.setAppElement(\"#root\")\r\nlet isExecuting = false\r\n\r\nconst MyModal = ({\r\n  isOpen,\r\n  closeModal,\r\n  modalData,\r\n  promptText,\r\n  setPromptText,\r\n  toastr,\r\n}) => {\r\n  const { prompt_field, prompt_order_rules, selectedRow, selectedField } =\r\n    modalData\r\n\r\n  const ref = useRef()\r\n  const selectRef = useRef()\r\n\r\n  const handleOk = async () => {\r\n    if (isExecuting) return\r\n    isExecuting = true\r\n    try {\r\n      const { data: res } = await axios.post(modalData.button_api, {\r\n        username: modalData.username,\r\n        prod: modalData.prod,\r\n        selected_row: modalData.selectedRow,\r\n        default_value: promptText,\r\n        ...modalData.kwargs,\r\n      })\r\n      const { status, data, description } = res\r\n      console.log(\"res :>> \", res)\r\n      if (status == \"success\") {\r\n        data.message_type == \"fade\"\r\n          ? toastr.success(description, \"Success\")\r\n          : alert(\"Success!\\nDescription: \" + description)\r\n      } else {\r\n        data.message_type == \"fade\"\r\n          ? toastr.error(description, \"Error\")\r\n          : alert(\"Error!\\nDescription: \" + description)\r\n      }\r\n      if (data?.close_modal != false) closeModal()\r\n    } catch (error) {\r\n      console.log(\"error :>> \", error)\r\n      toastr.error(error.message)\r\n    }\r\n    isExecuting = false\r\n  }\r\n\r\n  const handleOkSecond = async () => {\r\n    if (isExecuting) return\r\n    isExecuting = true\r\n    try {\r\n      const body = {\r\n        username: modalData.username,\r\n        prod: modalData.prod,\r\n        selected_row: modalData.selectedRow,\r\n        default_value: promptText,\r\n        ...modalData.kwargs,\r\n      }\r\n      console.log(\"body :>> \", body)\r\n      const { data: res } = await axios.post(modalData.button_api, body)\r\n      const { status, data, description } = res\r\n      if (status == \"success\") {\r\n        data.message_type == \"fade\"\r\n          ? toastr.success(description, \"Success\")\r\n          : alert(\"Success!\\nDescription: \" + description)\r\n      } else {\r\n        data.message_type == \"fade\"\r\n          ? toastr.error(description, \"Error\")\r\n          : alert(\"Error!\\nDescription: \" + description)\r\n      }\r\n      if (data?.close_modal != false) closeModal()\r\n    } catch (error) {\r\n      console.log(\"error :>> \", error)\r\n      toastr.error(error.message)\r\n    }\r\n    isExecuting = false\r\n  }\r\n\r\n  const handleOkOnArray = async () => {\r\n    console.log(\"selectRef.current.value :>> \", selectRef.current.value)\r\n    if (isExecuting) return\r\n    isExecuting = true\r\n    try {\r\n      const body = {\r\n        username: modalData.username,\r\n        prod: modalData.prod,\r\n        selected_row: modalData.selectedRow,\r\n        default_value: selectRef.current.value,\r\n        ...modalData.kwargs,\r\n      }\r\n      console.log(\"body :>> \", body)\r\n      const { data: res } = await axios.post(modalData.button_api, body)\r\n      const { status, data, description } = res\r\n      console.log(\"res :>> \", res)\r\n      if (status == \"success\") {\r\n        data.message_type == \"fade\"\r\n          ? toastr.success(description, \"Success\")\r\n          : alert(\"Success!\\nDescription: \" + description)\r\n      } else {\r\n        data.message_type == \"fade\"\r\n          ? toastr.error(description, \"Error\")\r\n          : alert(\"Error!\\nDescription: \" + description)\r\n      }\r\n      if (data?.close_modal != false) closeModal()\r\n    } catch (error) {\r\n      console.log(\"error :>> \", error)\r\n      toastr.error(error.message)\r\n    }\r\n    isExecuting = false\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isOpen) setTimeout(() => ref.current.focus(), 100)\r\n  }, [isOpen])\r\n\r\n  if (Array.isArray(selectedField))\r\n    return (\r\n      <div className=\"my-modal\" style={{ display: isOpen ? \"block\" : \"none\" }}>\r\n        <div className=\"my-modal-content\">\r\n          <div className=\"modal-header px-4\">\r\n            <h4>{modalData.prompt_message}</h4>\r\n            <span className=\"close\" onClick={closeModal}>\r\n              &times;\r\n            </span>\r\n          </div>\r\n          <div className=\"modal-body p-2\">\r\n            <label className=\"px-1\">{prompt_field} </label>\r\n            <select\r\n              name=\"cars\"\r\n              id=\"cars\"\r\n              defaultValue={selectedField[0]}\r\n              ref={selectRef}\r\n            >\r\n              {selectedField.map((item) => (\r\n                <option value={item}>{item}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              onClick={handleOkOnArray}\r\n              ref={ref}\r\n            >\r\n              Ok\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              onClick={closeModal}\r\n            >\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n\r\n  if (prompt_order_rules)\r\n    return (\r\n      <div className=\"my-modal\" style={{ display: isOpen ? \"block\" : \"none\" }}>\r\n        <div className=\"my-modal-content\">\r\n          <div className=\"modal-header px-4\">\r\n            <h4>{modalData.prompt_message}</h4>\r\n            <span className=\"close\" onClick={closeModal}>\r\n              &times;\r\n            </span>\r\n          </div>\r\n          <div className=\"modal-body p-2\">\r\n            {prompt_order_rules.map((rule, index) => {\r\n              if (typeof promptText[rule] == \"boolean\")\r\n                return (\r\n                  <div\r\n                    className=\"d-flex flex-row justify-content-end\"\r\n                    key={index}\r\n                  >\r\n                    <label className=\"d-flex flex-row\">\r\n                      {rule + \":  \"}\r\n                      <div className=\"px-2\" style={{ width: \"193px\" }}>\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={promptText[rule]}\r\n                          onChange={(e) =>\r\n                            setPromptText({\r\n                              ...promptText,\r\n                              [rule]: e.target.checked,\r\n                            })\r\n                          }\r\n                        />\r\n                      </div>\r\n                    </label>\r\n                  </div>\r\n                )\r\n              return (\r\n                <div\r\n                  className=\"d-flex flex-row justify-content-end\"\r\n                  key={index}\r\n                >\r\n                  <label>\r\n                    {rule + \":  \"}\r\n                    <input\r\n                      type=\"text\"\r\n                      value={promptText[rule]}\r\n                      onChange={(e) =>\r\n                        setPromptText({ ...promptText, [rule]: e.target.value })\r\n                      }\r\n                    />\r\n                  </label>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              onClick={handleOkSecond}\r\n              ref={ref}\r\n            >\r\n              Ok\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              onClick={closeModal}\r\n            >\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n\r\n  return (\r\n    <div className=\"my-modal\" style={{ display: isOpen ? \"block\" : \"none\" }}>\r\n      <div className=\"my-modal-content\">\r\n        <div className=\"modal-header px-4\">\r\n          <h4>{modalData.prompt_message}</h4>\r\n          <span className=\"close\" onClick={closeModal}>\r\n            &times;\r\n          </span>\r\n        </div>\r\n        <div className=\"modal-body p-2\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            rows={4}\r\n            cols={50}\r\n            type=\"text\"\r\n            value={promptText}\r\n            placeholder=\"Please input text\"\r\n            onChange={(e) => setPromptText(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"modal-footer\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={handleOk}\r\n            ref={ref}\r\n          >\r\n            Ok\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={closeModal}\r\n          >\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MyModal\r\n","import React, {\r\n  useState,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useCallback,\r\n  StrictMode,\r\n} from \"react\"\r\nimport { AgGridReact } from \"ag-grid-react\"\r\nimport toastr from \"toastr\"\r\nimport \"toastr/build/toastr.min.css\"\r\nimport \"ag-grid-community/styles/ag-grid.css\"\r\nimport \"ag-grid-community/styles/ag-theme-alpine.css\"\r\nimport \"ag-grid-community/styles/ag-theme-balham.css\"\r\nimport \"ag-grid-community/styles/ag-theme-material.css\"\r\nimport Modal from \"react-modal\"\r\nimport \"ag-grid-enterprise\"\r\nimport { parseISO, compareAsc } from \"date-fns\"\r\nimport { format } from \"date-fns-tz\"\r\nimport { duration } from \"moment\"\r\nimport \"./styles.css\"\r\nimport axios from \"axios\"\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport {\r\n  ColDef,\r\n  ColGroupDef,\r\n  ColumnResizedEvent,\r\n  GetRowIdFunc,\r\n  GetRowIdParams,\r\n  Grid,\r\n  GridOptions,\r\n  GridReadyEvent,\r\n  SideBarDef,\r\n  ValueParserParams,\r\n} from \"ag-grid-community\"\r\nimport MyModal from \"./components/Modal\"\r\nimport { order_rules_default } from \"./utils/order_rules\"\r\n\r\ntype Props = {\r\n  username: string\r\n  api: string\r\n  api_update: string\r\n  refresh_sec?: number\r\n  refresh_cutoff_sec?: number\r\n  gridoption_build?: any\r\n  prod?: boolean\r\n  grid_options?: any\r\n  index: string\r\n  kwargs: any\r\n}\r\n\r\nlet g_rowdata: any[] = []\r\nlet g_newRowData: any = null\r\n\r\nfunction dateFormatter(isoString: string, formaterString: string): String {\r\n  try {\r\n    let date = new Date(isoString)\r\n    return format(date, formaterString)\r\n  } catch {\r\n    return isoString\r\n  } finally {\r\n  }\r\n}\r\n\r\nfunction currencyFormatter(number: any, currencySymbol: string): String {\r\n  let n = Number.parseFloat(number)\r\n  if (!Number.isNaN(n)) {\r\n    return currencySymbol + n.toFixed(2)\r\n  } else {\r\n    return number\r\n  }\r\n}\r\n\r\nfunction numberFormatter(number: any, precision: number): String {\r\n  let n = Number.parseFloat(number)\r\n  if (!Number.isNaN(n)) {\r\n    return n.toFixed(precision)\r\n  } else {\r\n    return number\r\n  }\r\n}\r\n\r\nconst columnFormaters = {\r\n  columnTypes: {\r\n    dateColumnFilter: {\r\n      filter: \"agDateColumnFilter\",\r\n      filterParams: {\r\n        comparator: (filterValue: any, cellValue: string) =>\r\n          compareAsc(parseISO(cellValue), filterValue),\r\n      },\r\n    },\r\n    numberColumnFilter: {\r\n      filter: \"agNumberColumnFilter\",\r\n    },\r\n    shortDateTimeFormat: {\r\n      valueFormatter: (params: any) =>\r\n        dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n    },\r\n    customDateTimeFormat: {\r\n      valueFormatter: (params: any) =>\r\n        dateFormatter(params.value, params.column.colDef.custom_format_string),\r\n    },\r\n    customNumericFormat: {\r\n      valueFormatter: (params: any) =>\r\n        numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n    },\r\n    customCurrencyFormat: {\r\n      valueFormatter: (params: any) =>\r\n        currencyFormatter(\r\n          params.value,\r\n          params.column.colDef.custom_currency_symbol\r\n        ),\r\n    },\r\n    timedeltaFormat: {\r\n      valueFormatter: (params: any) => duration(params.value).humanize(true),\r\n    },\r\n  },\r\n}\r\n\r\nconst HyperlinkRenderer = (props: any) => {\r\n  return (\r\n    <a\r\n      href={`${props.column.colDef.baseURL}/${\r\n        props.data[props.column.colDef[\"linkField\"]]\r\n      }`}\r\n      target=\"_blank\"\r\n    >\r\n      {props.value}\r\n    </a>\r\n  )\r\n}\r\n\r\ntoastr.options = {\r\n  positionClass: \"toast-top-full-width\",\r\n  hideDuration: 300,\r\n  timeOut: 3000,\r\n}\r\n\r\nconst AgGrid = (props: Props) => {\r\n  const BtnCellRenderer = (props: any) => {\r\n    const btnClickedHandler = () => {\r\n      props.clicked(props.value)\r\n    }\r\n    return (\r\n      <button\r\n        onClick={btnClickedHandler}\r\n        style={{\r\n          background: \"transparent\",\r\n          width: \"100%\",\r\n          borderColor: props.borderColor ? props.borderColor : \"black\",\r\n        }}\r\n      >\r\n        {props.col_header\r\n          ? g_rowdata[props.rowIndex][props.col_header]\r\n          : props.buttonName}\r\n      </button>\r\n    )\r\n  }\r\n\r\n  const gridRef = useRef<AgGridReact>(null)\r\n  const {\r\n    username,\r\n    api,\r\n    api_update,\r\n    refresh_sec = undefined,\r\n    refresh_cutoff_sec = 0,\r\n    prod = true,\r\n    index,\r\n    kwargs,\r\n  } = props\r\n  let { grid_options = {} } = props\r\n  const { buttons, toggle_views } = kwargs\r\n  const [rowData, setRowData] = useState<any[]>([])\r\n  const [modalShow, setModalshow] = useState(false)\r\n  const [modalData, setModalData] = useState({})\r\n  const [promptText, setPromptText] = useState(\"\")\r\n  const [viewId, setViewId] = useState(0)\r\n\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight()\r\n    if (buttons.length) {\r\n      buttons.map((button: any) => {\r\n        const { prompt_field, prompt_message, button_api, prompt_order_rules } =\r\n          button\r\n        grid_options.columnDefs!.push({\r\n          field: index,\r\n          headerName: button[\"col_headername\"],\r\n          width: button[\"col_width\"],\r\n          pinned: button[\"pinned\"],\r\n          cellRenderer: BtnCellRenderer,\r\n          cellRendererParams: {\r\n            col_header: button[\"col_header\"],\r\n            buttonName: button[\"button_name\"],\r\n            borderColor: button[\"border_color\"],\r\n            clicked: async function (field: any) {\r\n              try {\r\n                const selectedRow = g_rowdata.find((row) => row[index] == field)\r\n                if (prompt_order_rules) {\r\n                  const str = selectedRow[prompt_field]\r\n                  const selectedField =\r\n                    typeof str === \"string\"\r\n                      ? JSON.parse(\r\n                          selectedRow[prompt_field]\r\n                            .replace(/'/g, '\"')\r\n                            .replace(/\\n/g, \"\")\r\n                            .replace(/\\s/g, \"\")\r\n                            .replace(/False/g, \"false\")\r\n                            .replace(/True/g, \"true\")\r\n                        )\r\n                      : str\r\n                  setModalshow(true)\r\n                  setModalData({\r\n                    prompt_message,\r\n                    button_api: button_api,\r\n                    username: username,\r\n                    prod: prod,\r\n                    selectedRow: selectedRow,\r\n                    kwargs: kwargs,\r\n                    prompt_field,\r\n                    prompt_order_rules,\r\n                    selectedField,\r\n                  })\r\n                  const rules_value: any = {}\r\n                  prompt_order_rules.map((rule: string) => {\r\n                    rules_value[rule] = selectedField[rule]\r\n                  })\r\n                  setPromptText(rules_value)\r\n                } else if (prompt_field && prompt_message) {\r\n                  setModalshow(true)\r\n                  setModalData({\r\n                    prompt_message,\r\n                    button_api: button_api,\r\n                    username: username,\r\n                    prod: prod,\r\n                    selectedRow: selectedRow,\r\n                    kwargs: kwargs,\r\n                  })\r\n                  setPromptText(selectedRow[prompt_field])\r\n                  // const num = prompt(prompt_message, selectedRow[prompt_field]);\r\n                  // if (num == null) return;\r\n                  // const res = await axios.post(button_api, {\r\n                  //   username: username,\r\n                  //   prod: prod,\r\n                  //   selected_row: selectedRow,\r\n                  //   default_value: num,\r\n                  //   ...kwargs,\r\n                  // })\r\n                } else {\r\n                  if (window.confirm(prompt_message)) {\r\n                    const res = await axios.post(button_api, {\r\n                      username: username,\r\n                      prod: prod,\r\n                      selected_row: selectedRow,\r\n                      ...kwargs,\r\n                    })\r\n                  }\r\n                  toastr.success(\"Success!\")\r\n                }\r\n              } catch (error) {\r\n                alert(`${error}`)\r\n              }\r\n            },\r\n          },\r\n        })\r\n      })\r\n    }\r\n    // parseGridoptions()\r\n  })\r\n\r\n  const fetchAndSetData = async () => {\r\n    const array = await fetchData()\r\n    if (array === false) return false\r\n    const api = gridRef.current!.api\r\n    const id_array = array.map((item: any) => item[index])\r\n    const old_id_array = g_rowdata.map((item: any) => item[index])\r\n    const toUpdate = array.filter((row: any) => id_array.includes(row[index]))\r\n    const toRemove = g_rowdata.filter((row) => !id_array.includes(row[index]))\r\n    const toAdd = array.filter((row: any) => !old_id_array.includes(row[index]))\r\n    api.applyTransactionAsync({\r\n      update: toUpdate,\r\n      remove: toRemove,\r\n      add: toAdd,\r\n    })\r\n    g_rowdata = array\r\n    return true\r\n  }\r\n\r\n  useEffect(() => {\r\n    onRefresh()\r\n  }, [viewId])\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const res = await axios.post(api, {\r\n        username: username,\r\n        prod: prod,\r\n        ...kwargs,\r\n        toggle_view_selection: toggle_views ? toggle_views[viewId] : \"none\",\r\n      })\r\n      const array = JSON.parse(res.data)\r\n      console.log(\r\n        \"toggle_views[viewId],viewId :>> \",\r\n        toggle_views[viewId],\r\n        viewId\r\n      )\r\n      console.log(\"table data :>> \", array)\r\n      if (array.status == false) {\r\n        toastr.error(`Fetch Error: ${array.message}`)\r\n        return false\r\n      }\r\n      return array\r\n    } catch (error: any) {\r\n      toastr.error(`Fetch Error: ${error.message}`)\r\n      return false\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (refresh_sec && refresh_sec > 0) {\r\n      const interval = setInterval(fetchAndSetData, refresh_sec * 1000)\r\n      let timeout: NodeJS.Timeout\r\n      if (refresh_cutoff_sec > 0) {\r\n        console.log(refresh_cutoff_sec)\r\n        timeout = setTimeout(() => {\r\n          clearInterval(interval)\r\n          console.log(\"Fetching data ended, refresh rate:\", refresh_sec)\r\n        }, refresh_cutoff_sec * 1000)\r\n      }\r\n      console.error(\"rendered==========\", props)\r\n      return () => {\r\n        clearInterval(interval)\r\n        if (timeout) clearTimeout(timeout)\r\n      }\r\n    }\r\n  }, [props, viewId])\r\n\r\n  const autoSizeAll = useCallback((skipHeader: boolean) => {\r\n    const allColumnIds: string[] = []\r\n    gridRef.current!.columnApi.getColumns()!.forEach((column: any) => {\r\n      allColumnIds.push(column.getId())\r\n    })\r\n    gridRef.current!.columnApi.autoSizeColumns(allColumnIds, skipHeader)\r\n  }, [])\r\n\r\n  const sizeToFit = useCallback(() => {\r\n    gridRef.current!.api.sizeColumnsToFit({\r\n      defaultMinWidth: 100,\r\n    })\r\n  }, [])\r\n\r\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\r\n    setTimeout(async () => {\r\n      try {\r\n        const array = await fetchData()\r\n        // console.log(\"AAAAAAAAAAAAAAAAAAAAAAA\", array)\r\n        if (array == false) {\r\n          // toastr.error(`Error: ${array.message}`)\r\n          return\r\n        }\r\n        setRowData(array)\r\n        g_rowdata = array\r\n      } catch (error: any) {\r\n        toastr.error(`Error: ${error.message}`)\r\n      }\r\n    }, 100)\r\n  }, [])\r\n\r\n  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n    return {\r\n      minWidth: 200,\r\n    }\r\n  }, [])\r\n\r\n  const getRowId = useMemo<GetRowIdFunc>(() => {\r\n    return (params: GetRowIdParams) => {\r\n      return params.data[index]\r\n    }\r\n  }, [index])\r\n\r\n  const sideBar = useMemo<\r\n    SideBarDef | string | string[] | boolean | null\r\n  >(() => {\r\n    return {\r\n      toolPanels: [\r\n        {\r\n          id: \"columns\",\r\n          labelDefault: \"Columns\",\r\n          labelKey: \"columns\",\r\n          iconKey: \"columns\",\r\n          toolPanel: \"agColumnsToolPanel\",\r\n        },\r\n        {\r\n          id: \"filters\",\r\n          labelDefault: \"Filters\",\r\n          labelKey: \"filters\",\r\n          iconKey: \"filter\",\r\n          toolPanel: \"agFiltersToolPanel\",\r\n        },\r\n      ],\r\n      defaultToolPanel: \"customStats\",\r\n    }\r\n  }, [])\r\n\r\n  const onCellValueChanged = useCallback((event) => {\r\n    if (g_newRowData == null) g_newRowData = {}\r\n    g_newRowData[event.data[index]] = event.data\r\n    console.log(\"Data after change is\", g_newRowData)\r\n  }, [])\r\n\r\n  const onRefresh = async () => {\r\n    try {\r\n      const success = await fetchAndSetData()\r\n      success && toastr.success(\"Refresh success!\")\r\n    } catch (error: any) {\r\n      toastr.error(`Refresh Failed! ${error.message}`)\r\n    }\r\n  }\r\n\r\n  const onUpdate = async () => {\r\n    if (g_newRowData == null) {\r\n      toastr.warning(`No changes to update`)\r\n      return\r\n    }\r\n    try {\r\n      const res: any = await axios.post(api_update, {\r\n        username: username,\r\n        prod: prod,\r\n        new_data: g_newRowData,\r\n        ...kwargs,\r\n      })\r\n      g_newRowData = null\r\n      if (res.status) toastr.success(`Successfully Updated! `)\r\n      else toastr.error(`Failed! ${res.message}`)\r\n    } catch (error) {\r\n      toastr.error(`Failed! ${error}`)\r\n    }\r\n  }\r\n\r\n  const columnTypes = useMemo<any>(() => {\r\n    return {\r\n      dateColumnFilter: {\r\n        filter: \"agDateColumnFilter\",\r\n        filterParams: {\r\n          comparator: (filterValue: any, cellValue: string) =>\r\n            compareAsc(new Date(cellValue), filterValue),\r\n        },\r\n      },\r\n      numberColumnFilter: {\r\n        filter: \"agNumberColumnFilter\",\r\n      },\r\n      shortDateTimeFormat: {\r\n        valueFormatter: (params: any) =>\r\n          dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n      },\r\n      customDateTimeFormat: {\r\n        valueFormatter: (params: any) =>\r\n          dateFormatter(\r\n            params.value,\r\n            params.column.colDef.custom_format_string\r\n          ),\r\n      },\r\n      customNumericFormat: {\r\n        valueFormatter: (params: any) =>\r\n          numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n      },\r\n      customCurrencyFormat: {\r\n        valueFormatter: (params: any) =>\r\n          currencyFormatter(\r\n            params.value,\r\n            params.column.colDef.custom_currency_symbol\r\n          ),\r\n      },\r\n      timedeltaFormat: {\r\n        valueFormatter: (params: any) => duration(params.value).humanize(true),\r\n      },\r\n      customNumberFormat: {\r\n        valueFormatter: (params: any) =>\r\n          Number(params.value).toLocaleString(\"en-US\", {\r\n            minimumFractionDigits: 0,\r\n          }),\r\n      },\r\n      customHyperlinkRenderer: {\r\n        // valueGetter: (params: any) =>\r\n        //   params.column.colDef.baseURL + params.data.honey,\r\n        cellRenderer: HyperlinkRenderer,\r\n        cellRendererParams: {\r\n          baseURL: \"URLSearchParams.co\",\r\n        },\r\n      },\r\n    }\r\n  }, [])\r\n\r\n  const onClick = () => {\r\n    toastr.clear()\r\n    setTimeout(() => toastr.success(`Settings updated `), 300)\r\n  }\r\n\r\n  const getRowStyle = (params: any) => {\r\n    return {\r\n      background: params.data[\"color_row\"],\r\n      color: params.data[\"color_row_text\"],\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MyModal\r\n        isOpen={modalShow}\r\n        closeModal={() => setModalshow(false)}\r\n        modalData={modalData}\r\n        promptText={promptText}\r\n        setPromptText={setPromptText}\r\n        toastr={toastr}\r\n      ></MyModal>\r\n      <div\r\n        style={{ flexDirection: \"row\", height: \"100%\", width: \"100\" }}\r\n        id=\"myGrid\"\r\n      >\r\n        <div className=\"d-flex justify-content-between align-items-center\">\r\n          {(refresh_sec == undefined || refresh_sec == 0) && (\r\n            <div style={{ display: \"flex\" }}>\r\n              <div style={{ margin: \"10px 10px 10px 2px\" }}>\r\n                <button className=\"btn btn-warning\" onClick={onRefresh}>\r\n                  Refresh\r\n                </button>\r\n              </div>\r\n              <div style={{ margin: \"10px 10px 10px 2px\" }}>\r\n                <button className=\"btn btn-success\" onClick={onUpdate}>\r\n                  Update\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n          <div className=\"d-flex flex-row gap-6\">\r\n            {toggle_views?.map((view: string, index: number) => (\r\n              <span className=\"\">\r\n                <button\r\n                  className={`btn ${\r\n                    viewId == index ? \"btn-danger\" : \"btn-secondary\"\r\n                  }`}\r\n                  onClick={() => setViewId(index)}\r\n                >\r\n                  {view}\r\n                </button>\r\n              </span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={grid_options.theme || \"ag-theme-alpine-dark\"}\r\n          style={{\r\n            width: \"100%\",\r\n            height: kwargs[\"grid_height\"] ? kwargs[\"grid_height\"] : \"100%\",\r\n          }}\r\n        >\r\n          <AgGridReact\r\n            ref={gridRef}\r\n            rowData={rowData}\r\n            // defaultColDef={defaultColDef}\r\n            getRowStyle={getRowStyle}\r\n            rowStyle={{ fontSize: 12, padding: 0 }}\r\n            headerHeight={30}\r\n            rowHeight={30}\r\n            onGridReady={onGridReady}\r\n            autoGroupColumnDef={autoGroupColumnDef}\r\n            // sideBar={sideBar}\r\n            animateRows={true}\r\n            suppressAggFuncInHeader={true}\r\n            getRowId={getRowId}\r\n            gridOptions={grid_options}\r\n            onCellValueChanged={onCellValueChanged}\r\n            columnTypes={columnTypes}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AgGrid\r\n","import React, { useEffect, useState } from 'react'\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from 'streamlit-component-lib'\r\nimport 'ag-grid-community/styles/ag-grid.css'\r\n// import 'ag-grid-community/styles/ag-theme-alpine.css';\r\nimport 'ag-grid-community/styles/ag-theme-balham.css'\r\nimport Aggrid from './Aggrid'\r\n\r\nconst Main = (props: ComponentProps) => {\r\n  const {\r\n    username,\r\n    api,\r\n    api_update,\r\n    refresh_sec,\r\n    refresh_cutoff_sec,\r\n    gridoption_build,\r\n    prod,\r\n  } = props.args\r\n  const { grid_options, kwargs = {} } = props.args\r\n  const { index, theme } = grid_options\r\n  console.log('AAAAAAAA', grid_options)\r\n  return (\r\n    <div>\r\n      <Aggrid\r\n        username={username}\r\n        api={api}\r\n        api_update={api_update}\r\n        refresh_sec={refresh_sec}\r\n        refresh_cutoff_sec={refresh_cutoff_sec}\r\n        gridoption_build={gridoption_build}\r\n        prod={prod}\r\n        grid_options={grid_options}\r\n        index={index}\r\n        kwargs={kwargs}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withStreamlitConnection(Main)\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport Main from \"./Main\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Main />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}