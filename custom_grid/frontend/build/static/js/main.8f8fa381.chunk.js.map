{"version":3,"sources":["Aggrid.tsx","Main.tsx","index.tsx"],"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","g_rowdata","g_newRowData","dateFormatter","isoString","formaterString","date","Date","format","_unused","currencyFormatter","number","currencySymbol","n","Number","parseFloat","toFixed","numberFormatter","precision","HyperlinkRenderer","props","console","log","React","createElement","href","concat","column","colDef","baseURL","target","AgGrid","BtnCellRenderer","onClick","clicked","button_name","gridRef","useRef","username","api","api_update","_props$refresh_sec","refresh_sec","_props$refresh_cutoff","refresh_cutoff_sec","_props$prod","prod","api_url","index","kwargs","_props$grid_options","grid_options","prompt_message","prompt_field","_useState","useState","_useState2","_slicedToArray","rowData","setRowData","useEffect","Streamlit","setFrameHeight","columnDefs","field","headerName","width","cellRenderer","cellRendererParams","_clicked","_asyncToGenerator","_callee","selectedRow","num","_context","find","row","prompt","axios","post","client_order_id","number_shares","window","confirm","alert","t0","_x","apply","arguments","pinned","fetchAndSetData","_ref","_callee2","array","id_array","old_id_array","toUpdate","toRemove","toAdd","_context2","fetchData","current","map","item","filter","includes","applyTransactionAsync","update","remove","add","_ref2","_callee3","res","_context3","JSON","parse","data","timeout","interval","setInterval","setTimeout","clearInterval","clearTimeout","useCallback","skipHeader","allColumnIds","columnApi","getColumns","getId","autoSizeColumns","sizeColumnsToFit","defaultMinWidth","onGridReady","_ref4","_callee6","params","_context6","_callee5","_context5","_x3","autoGroupColumnDef","useMemo","minWidth","getRowId","sideBar","toolPanels","id","labelDefault","labelKey","iconKey","toolPanel","defaultToolPanel","onCellValueChanged","event","onRefresh","_ref6","_callee7","_context7","onUpdate","_ref7","_callee8","_context8","new_data","status","message","columnTypes","dateColumnFilter","filterParams","comparator","filterValue","cellValue","compareAsc","numberColumnFilter","shortDateTimeFormat","valueFormatter","customDateTimeFormat","custom_format_string","customNumericFormat","_params$column$colDef2","customCurrencyFormat","custom_currency_symbol","timedeltaFormat","duration","humanize","customNumberFormat","toLocaleString","minimumFractionDigits","customHyperlinkRenderer","style","flexDirection","height","display","margin","className","AgGridReact","ref","rowStyle","fontSize","padding","headerHeight","rowHeight","animateRows","suppressAggFuncInHeader","gridOptions","withStreamlitConnection","_props$args","args","gridoption_build","_props$args2","_props$args2$kwargs","Aggrid","ReactDOM","render","StrictMode","Main","document","getElementById"],"mappings":"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","file":"static/js/main.8f8fa381.chunk.js","sourcesContent":["import React, { useState, useEffect, useMemo, useRef, useCallback, StrictMode } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\r\nimport 'ag-grid-enterprise';\r\nimport { parseISO, compareAsc } from \"date-fns\"\r\nimport { format } from \"date-fns-tz\"\r\nimport { duration } from \"moment\"\r\nimport './styles.css';\r\nimport axios from \"axios\"\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport {\r\n  ColDef,\r\n  ColGroupDef,\r\n  ColumnResizedEvent,\r\n  GetRowIdFunc,\r\n  GetRowIdParams,\r\n  Grid,\r\n  GridOptions,\r\n  GridReadyEvent,\r\n  SideBarDef,\r\n  ValueParserParams,\r\n} from 'ag-grid-community';\r\n\r\ntype Props = {\r\n  username: string,\r\n  api: string,\r\n  api_update: string,\r\n  refresh_sec?: number,\r\n  refresh_cutoff_sec?: number,\r\n  gridoption_build?: any,\r\n  prod?: boolean,\r\n  api_url: string,\r\n  button_name: string,\r\n  grid_options?: GridOptions<any>,\r\n  index: string,\r\n  kwargs: any,\r\n}\r\n\r\nlet g_rowdata: any[] = [];\r\nlet g_newRowData: any = null\r\n\r\nfunction dateFormatter(isoString: string, formaterString: string): String {\r\n  try {\r\n    let date = new Date(isoString)\r\n    return format(date, formaterString)\r\n  } catch {\r\n    return isoString\r\n  } finally {\r\n  }\r\n}\r\n\r\nfunction currencyFormatter(number: any, currencySymbol: string): String {\r\n  let n = Number.parseFloat(number)\r\n  if (!Number.isNaN(n)) {\r\n    return currencySymbol + n.toFixed(2)\r\n  } else {\r\n    return number\r\n  }\r\n}\r\n\r\nfunction numberFormatter(number: any, precision: number): String {\r\n  let n = Number.parseFloat(number)\r\n  if (!Number.isNaN(n)) {\r\n    return n.toFixed(precision)\r\n  } else {\r\n    return number\r\n  }\r\n}\r\n\r\nconst columnFormaters = {\r\n  columnTypes: {\r\n    dateColumnFilter: {\r\n      filter: \"agDateColumnFilter\",\r\n      filterParams: {\r\n        comparator: (filterValue: any, cellValue: string) =>\r\n          compareAsc(parseISO(cellValue), filterValue),\r\n      },\r\n    },\r\n    numberColumnFilter: {\r\n      filter: \"agNumberColumnFilter\",\r\n    },\r\n    shortDateTimeFormat: {\r\n      valueFormatter: (params: any) =>\r\n        dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n    },\r\n    customDateTimeFormat: {\r\n      valueFormatter: (params: any) =>\r\n        dateFormatter(params.value, params.column.colDef.custom_format_string),\r\n    },\r\n    customNumericFormat: {\r\n      valueFormatter: (params: any) =>\r\n        numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n    },\r\n    customCurrencyFormat: {\r\n      valueFormatter: (params: any) =>\r\n        currencyFormatter(\r\n          params.value,\r\n          params.column.colDef.custom_currency_symbol\r\n        ),\r\n    },\r\n    timedeltaFormat: {\r\n      valueFormatter: (params: any) => duration(params.value).humanize(true),\r\n    },\r\n  },\r\n}\r\n\r\nconst HyperlinkRenderer = (props: any) => {\r\n  console.log(\"hyperlink\", props);\r\n  return <a href={`${props.column.colDef.baseURL}/${props.value}`} target='_blank'>{props.value}</a>\r\n}\r\n\r\nconst AgGrid = (props: Props) => {\r\n\r\n  const BtnCellRenderer = (props: any) => {\r\n    const btnClickedHandler = () => {\r\n      props.clicked(props.value);\r\n    }\r\n\r\n    return (\r\n      <button onClick={btnClickedHandler}>{button_name}</button>\r\n    )\r\n  }\r\n\r\n\r\n  const gridRef = useRef<AgGridReact>(null);\r\n  const { username, api, api_update, refresh_sec = undefined, refresh_cutoff_sec = 0, prod = true, api_url, button_name, index, kwargs } = props;\r\n  let { grid_options = {} } = props;\r\n  const { prompt_message, prompt_field } = kwargs;\r\n  const [rowData, setRowData] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight();\r\n    if (button_name) grid_options.columnDefs!.push({\r\n      field: index,\r\n      headerName: 'action',\r\n      width: 80,\r\n      cellRenderer: BtnCellRenderer,\r\n      cellRendererParams: {\r\n        clicked: async function (field: any) {\r\n          try {\r\n            if (prompt_field && prompt_message) {\r\n              const selectedRow = g_rowdata.find((row) => row[index] == field)\r\n              const num = prompt(prompt_message, selectedRow[prompt_field]);\r\n              if (num == null) return;\r\n              const res = await axios.post(api_url, {\r\n                username: username,\r\n                prod: prod,\r\n                client_order_id: field,\r\n                number_shares: num,\r\n                kwargs,\r\n              })\r\n            }\r\n            else {\r\n              if (window.confirm(prompt_message)) {\r\n                const res = await axios.post(api_url, {\r\n                  username: username,\r\n                  prod: prod,\r\n                  client_order_id: field,\r\n                  kwargs,\r\n                })\r\n              }\r\n            }\r\n            alert(\"Success!\");\r\n          } catch (error) {\r\n            alert(`${error}`);\r\n          }\r\n        },\r\n      },\r\n      pinned: 'right',\r\n    })\r\n    // parseGridoptions()\r\n  });\r\n\r\n  function parseGridoptions() {\r\n    let gridOptions = Object.assign(\r\n      {},\r\n      columnFormaters,\r\n      grid_options\r\n    )\r\n    grid_options = gridOptions\r\n  }\r\n\r\n  const fetchAndSetData = async () => {\r\n    const array = await fetchData();\r\n    const api = gridRef.current!.api;\r\n    const id_array = array.map((item: any) => item[index])\r\n    const old_id_array = g_rowdata.map((item: any) => item[index])\r\n    const toUpdate = g_rowdata.filter((row: any) => id_array.includes(row[index]))\r\n    const toRemove = g_rowdata.filter((row) => !id_array.includes(row[index]))\r\n    const toAdd = array.filter((row: any) => !old_id_array.includes(row[index]))\r\n    api.applyTransactionAsync({ update: toUpdate, remove: toRemove, add: toAdd });\r\n    g_rowdata = array\r\n    console.log(\"index\", index);\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    const res = await axios.post(api, {\r\n      username: username,\r\n      prod: prod,\r\n      kwargs,\r\n    });\r\n    const array = JSON.parse(res.data);\r\n    return array;\r\n  };\r\n\r\n  const postRowId = async (id: any) => {\r\n    const res = await axios.post(api, {\r\n      username: username,\r\n      prod: prod,\r\n      id: id,\r\n    });\r\n    return res;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (refresh_sec && refresh_sec > 0) {\r\n      const interval = setInterval(fetchAndSetData, refresh_sec * 1000);\r\n      let timeout: NodeJS.Timeout;\r\n      if (refresh_cutoff_sec > 0) {\r\n        console.log(refresh_cutoff_sec);\r\n        timeout = setTimeout(() => {\r\n          clearInterval(interval);\r\n          console.log(\"Fetching data ended, refresh rate:\", refresh_sec);\r\n        }, refresh_cutoff_sec * 1000);\r\n      }\r\n      console.error(\"rendered==========\", props);\r\n      return () => {\r\n        clearInterval(interval);\r\n        if (timeout) clearTimeout(timeout);\r\n      }\r\n    }\r\n  }, [props]);\r\n\r\n  const autoSizeAll = useCallback((skipHeader: boolean) => {\r\n    const allColumnIds: string[] = [];\r\n    gridRef.current!.columnApi.getColumns()!.forEach((column: any) => {\r\n      allColumnIds.push(column.getId());\r\n    });\r\n    gridRef.current!.columnApi.autoSizeColumns(allColumnIds, skipHeader);\r\n  }, []);\r\n\r\n  const sizeToFit = useCallback(() => {\r\n    gridRef.current!.api.sizeColumnsToFit({\r\n      defaultMinWidth: 100,\r\n    });\r\n  }, []);\r\n\r\n  const onGridReady = useCallback(async (params: GridReadyEvent) => {\r\n    setTimeout(async () => {\r\n      const array = await fetchData();\r\n      setRowData(array);\r\n      g_rowdata = array;\r\n    }, 100);\r\n  }, []);\r\n\r\n  const autoGroupColumnDef = useMemo<ColDef>(() => {\r\n    return {\r\n      minWidth: 200,\r\n    };\r\n  }, []);\r\n\r\n  const getRowId = useMemo<GetRowIdFunc>(() => {\r\n    return (params: GetRowIdParams) => {\r\n      return params.data[index];\r\n    };\r\n  }, [index]);\r\n\r\n  const sideBar = useMemo<\r\n    SideBarDef | string | string[] | boolean | null\r\n  >(() => {\r\n    return {\r\n      toolPanels: [\r\n        {\r\n          id: 'columns',\r\n          labelDefault: 'Columns',\r\n          labelKey: 'columns',\r\n          iconKey: 'columns',\r\n          toolPanel: 'agColumnsToolPanel',\r\n        },\r\n        {\r\n          id: 'filters',\r\n          labelDefault: 'Filters',\r\n          labelKey: 'filters',\r\n          iconKey: 'filter',\r\n          toolPanel: 'agFiltersToolPanel',\r\n        },\r\n      ],\r\n      defaultToolPanel: 'customStats',\r\n    };\r\n  }, []);\r\n\r\n  const onCellValueChanged = useCallback((event) => {\r\n    if (g_newRowData == null) g_newRowData = {}\r\n    g_newRowData[event.data[index]] = event.data;\r\n    console.log('Data after change is', g_newRowData);\r\n  }, []);\r\n\r\n  const onRefresh = async () => {\r\n    fetchAndSetData();\r\n  }\r\n\r\n  const onUpdate = async () => {\r\n    if (g_newRowData == null) {\r\n      alert(\"No changes\");\r\n      return;\r\n    }\r\n    try {\r\n      const res: any = await axios.post(api_update, {\r\n        username: username,\r\n        prod: prod,\r\n        new_data: g_newRowData,\r\n        kwargs,\r\n      })\r\n      g_newRowData = null\r\n      if (res.status)\r\n        alert(\"success\" + res.data);\r\n      else alert(\"Failed\" + res.message);\r\n    } catch (error: any) {\r\n      alert(error);\r\n    }\r\n  }\r\n\r\n  const columnTypes = useMemo<any>(() => {\r\n    return {\r\n      dateColumnFilter: {\r\n        filter: \"agDateColumnFilter\",\r\n        filterParams: {\r\n          comparator: (filterValue: any, cellValue: string) =>\r\n            compareAsc(new Date(cellValue), filterValue),\r\n        },\r\n      },\r\n      numberColumnFilter: {\r\n        filter: \"agNumberColumnFilter\",\r\n      },\r\n      shortDateTimeFormat: {\r\n        valueFormatter: (params: any) =>\r\n          dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n      },\r\n      customDateTimeFormat: {\r\n        valueFormatter: (params: any) =>\r\n          dateFormatter(params.value, params.column.colDef.custom_format_string),\r\n      },\r\n      customNumericFormat: {\r\n        valueFormatter: (params: any) =>\r\n          numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n      },\r\n      customCurrencyFormat: {\r\n        valueFormatter: (params: any) =>\r\n          currencyFormatter(\r\n            params.value,\r\n            params.column.colDef.custom_currency_symbol\r\n          ),\r\n      },\r\n      timedeltaFormat: {\r\n        valueFormatter: (params: any) => duration(params.value).humanize(true),\r\n      },\r\n      customNumberFormat: {\r\n        valueFormatter: (params: any) =>\r\n          Number(params.value).toLocaleString('en-US', { minimumFractionDigits: 0 })\r\n      },\r\n      customHyperlinkRenderer: {\r\n        // valueGetter: (params: any) =>\r\n        //   params.column.colDef.baseURL + params.data.honey,\r\n        cellRenderer: HyperlinkRenderer,\r\n        cellRendererParams: {\r\n          baseURL: \"URLSearchParams.co\"\r\n        }\r\n      },\r\n    };\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div style={{ flexDirection: 'row', height: '300px', width: \"100\" }} id='myGrid'>\r\n      {\r\n        (refresh_sec == undefined || refresh_sec == 0) &&\r\n        <div style={{ display: 'flex' }}>\r\n          <div style={{ margin: \"10px 10px 10px 2px\" }}>\r\n            <button className='btn btn-warning' onClick={onRefresh}>Refresh</button>\r\n          </div>\r\n          <div style={{ margin: \"10px 10px 10px 2px\" }}>\r\n            <button className='btn btn-success' onClick={onUpdate}>Update</button>\r\n          </div>\r\n        </div>\r\n      }\r\n      <div className=\"ag-theme-alpine-dark\" style={{ width: \"100%\", height: \"100%\" }}>\r\n        <AgGridReact\r\n          ref={gridRef}\r\n          rowData={rowData}\r\n          // columnDefs={columnDefs}\r\n          // defaultColDef={defaultColDef}\r\n          rowStyle={{ fontSize: 12, padding: 0 }}\r\n          headerHeight={30}\r\n          rowHeight={30}\r\n          onGridReady={onGridReady}\r\n          autoGroupColumnDef={autoGroupColumnDef}\r\n          sideBar={sideBar}\r\n          animateRows={true}\r\n          suppressAggFuncInHeader={true}\r\n          getRowId={getRowId}\r\n          gridOptions={grid_options}\r\n          onCellValueChanged={onCellValueChanged}\r\n          columnTypes={columnTypes}\r\n        />\r\n      </div>\r\n    </div >\r\n  );\r\n};\r\n\r\nexport default AgGrid;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\r\nimport Aggrid from \"./Aggrid\";\r\n\r\nconst Main = (props: ComponentProps) => {\r\n\r\n  const { username, api, api_update, refresh_sec, refresh_cutoff_sec, gridoption_build, prod } = props.args;\r\n  const { api_url, button_name, grid_options, kwargs = {} } = props.args;\r\n  const { index } = grid_options;\r\n  console.log(\"AAAAAAAA\", grid_options.columnDefs);\r\n  return (\r\n    <div >\r\n      <Aggrid\r\n        username={username}\r\n        api={api}\r\n        api_update={api_update}\r\n        refresh_sec={refresh_sec}\r\n        refresh_cutoff_sec={refresh_cutoff_sec}\r\n        gridoption_build={gridoption_build}\r\n        prod={prod}\r\n        api_url={api_url}\r\n        button_name={button_name}\r\n        grid_options={grid_options}\r\n        index={index}\r\n        kwargs={kwargs}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withStreamlitConnection(Main);\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport Main from \"./Main\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Main />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}